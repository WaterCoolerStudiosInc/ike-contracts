{
    "contracts":{
        "Cargo.lock":"# This file is automatically @generated by Cargo.\n# It is not intended for manual editing.\nversion = 3\n\n[[package]]\nname = \"Inflector\"\nversion = \"0.11.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fe438c63458706e03479442743baae6c88256498e6431708f6dfc520a26515d3\"\ndependencies = [\n \"lazy_static\",\n \"regex\",\n]\n\n[[package]]\nname = \"addr2line\"\nversion = \"0.21.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8a30b2e23b9e17a9f90641c7ab1549cd9b44f296d3ccbf309d2863cfe398a0cb\"\ndependencies = [\n \"gimli\",\n]\n\n[[package]]\nname = \"adler\"\nversion = \"1.0.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f26201604c87b1e01bd3d98f8d5d9a8fcbb815e8cedb41ffccbeb4bf593a35fe\"\n\n[[package]]\nname = \"aead\"\nversion = \"0.5.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d122413f284cf2d62fb1b7db97e02edb8cda96d769b16e443a4f6195e35662b0\"\ndependencies = [\n \"crypto-common\",\n \"generic-array\",\n]\n\n[[package]]\nname = \"ahash\"\nversion = \"0.7.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"891477e0c6a8957309ee5c45a6368af3ae14bb510732d2684ffa19af310920f9\"\ndependencies = [\n \"getrandom\",\n \"once_cell\",\n \"version_check\",\n]\n\n[[package]]\nname = \"ahash\"\nversion = \"0.8.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e89da841a80418a9b391ebaea17f5c112ffaaa96f621d2c285b5174da76b9011\"\ndependencies = [\n \"cfg-if\",\n \"getrandom\",\n \"once_cell\",\n \"version_check\",\n \"zerocopy\",\n]\n\n[[package]]\nname = \"aho-corasick\"\nversion = \"1.1.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8e60d3430d3a69478ad0993f19238d2df97c507009a52b3c10addcd7f6bcb916\"\ndependencies = [\n \"memchr\",\n]\n\n[[package]]\nname = \"android-tzdata\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e999941b234f3131b00bc13c22d06e8c5ff726d1b6318ac7eb276997bbb4fef0\"\n\n[[package]]\nname = \"android_system_properties\"\nversion = \"0.1.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"819e7219dbd41043ac279b19830f2efc897156490d7fd6ea916720117ee66311\"\ndependencies = [\n \"libc\",\n]\n\n[[package]]\nname = \"ansi_term\"\nversion = \"0.12.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d52a9bb7ec0cf484c551830a7ce27bd20d67eac647e1befb56b0be4ee39a55d2\"\ndependencies = [\n \"winapi\",\n]\n\n[[package]]\nname = \"ark-bls12-377\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fb00293ba84f51ce3bd026bd0de55899c4e68f0a39a5728cebae3a73ffdc0a4f\"\ndependencies = [\n \"ark-ec\",\n \"ark-ff\",\n \"ark-std\",\n]\n\n[[package]]\nname = \"ark-bls12-381\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c775f0d12169cba7aae4caeb547bb6a50781c7449a8aa53793827c9ec4abf488\"\ndependencies = [\n \"ark-ec\",\n \"ark-ff\",\n \"ark-serialize\",\n \"ark-std\",\n]\n\n[[package]]\nname = \"ark-ec\"\nversion = \"0.4.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"defd9a439d56ac24968cca0571f598a61bc8c55f71d50a89cda591cb750670ba\"\ndependencies = [\n \"ark-ff\",\n \"ark-poly\",\n \"ark-serialize\",\n \"ark-std\",\n \"derivative\",\n \"hashbrown 0.13.2\",\n \"itertools\",\n \"num-traits\",\n \"zeroize\",\n]\n\n[[package]]\nname = \"ark-ff\"\nversion = \"0.4.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ec847af850f44ad29048935519032c33da8aa03340876d351dfab5660d2966ba\"\ndependencies = [\n \"ark-ff-asm\",\n \"ark-ff-macros\",\n \"ark-serialize\",\n \"ark-std\",\n \"derivative\",\n \"digest 0.10.7\",\n \"itertools\",\n \"num-bigint\",\n \"num-traits\",\n \"paste\",\n \"rustc_version\",\n \"zeroize\",\n]\n\n[[package]]\nname = \"ark-ff-asm\"\nversion = \"0.4.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3ed4aa4fe255d0bc6d79373f7e31d2ea147bcf486cba1be5ba7ea85abdb92348\"\ndependencies = [\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"ark-ff-macros\"\nversion = \"0.4.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7abe79b0e4288889c4574159ab790824d0033b9fdcb2a112a3182fac2e514565\"\ndependencies = [\n \"num-bigint\",\n \"num-traits\",\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"ark-poly\"\nversion = \"0.4.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d320bfc44ee185d899ccbadfa8bc31aab923ce1558716e1997a1e74057fe86bf\"\ndependencies = [\n \"ark-ff\",\n \"ark-serialize\",\n \"ark-std\",\n \"derivative\",\n \"hashbrown 0.13.2\",\n]\n\n[[package]]\nname = \"ark-serialize\"\nversion = \"0.4.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"adb7b85a02b83d2f22f89bd5cac66c9c89474240cb6207cb1efc16d098e822a5\"\ndependencies = [\n \"ark-serialize-derive\",\n \"ark-std\",\n \"digest 0.10.7\",\n \"num-bigint\",\n]\n\n[[package]]\nname = \"ark-serialize-derive\"\nversion = \"0.4.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ae3281bc6d0fd7e549af32b52511e1302185bd688fd3359fa36423346ff682ea\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"ark-std\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"94893f1e0c6eeab764ade8dc4c0db24caf4fe7cbbaafc0eba0a9030f447b5185\"\ndependencies = [\n \"num-traits\",\n \"rand\",\n]\n\n[[package]]\nname = \"array-bytes\"\nversion = \"6.2.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6f840fb7195bcfc5e17ea40c26e5ce6d5b9ce5d584466e17703209657e459ae0\"\n\n[[package]]\nname = \"array-init\"\nversion = \"2.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3d62b7694a562cdf5a74227903507c56ab2cc8bdd1f781ed5cb4cf9c9f810bfc\"\n\n[[package]]\nname = \"arrayref\"\nversion = \"0.3.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6b4930d2cb77ce62f89ee5d5289b4ac049559b1c45539271f5ed4fdc7db34545\"\n\n[[package]]\nname = \"arrayvec\"\nversion = \"0.7.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"96d30a06541fbafbc7f82ed10c06164cfbd2c401138f6addd8404629c4b16711\"\n\n[[package]]\nname = \"autocfg\"\nversion = \"1.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0c4b4d0bd25bd0b74681c0ad21497610ce1b7c91b1022cd21c80c6fbdd9476b0\"\n\n[[package]]\nname = \"backtrace\"\nversion = \"0.3.71\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"26b05800d2e817c8b3b4b54abd461726265fa9789ae34330622f2db9ee696f9d\"\ndependencies = [\n \"addr2line\",\n \"cc\",\n \"cfg-if\",\n \"libc\",\n \"miniz_oxide\",\n \"object\",\n \"rustc-demangle\",\n]\n\n[[package]]\nname = \"base16ct\"\nversion = \"0.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4c7f02d4ea65f2c1853089ffd8d2787bdbc63de2f0d29dedbcf8ccdfa0ccd4cf\"\n\n[[package]]\nname = \"base64\"\nversion = \"0.13.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9e1b586273c5702936fe7b7d6896644d8be71e6314cfe09d3167c95f712589e8\"\n\n[[package]]\nname = \"base64ct\"\nversion = \"1.6.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8c3c1a368f70d6cf7302d78f8f7093da241fb8e8807c05cc9e51a125895a6d5b\"\n\n[[package]]\nname = \"bitcoin-internals\"\nversion = \"0.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9425c3bf7089c983facbae04de54513cce73b41c7f9ff8c845b54e7bc64ebbfb\"\n\n[[package]]\nname = \"bitcoin_hashes\"\nversion = \"0.13.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1930a4dabfebb8d7d9992db18ebe3ae2876f0a305fab206fd168df931ede293b\"\ndependencies = [\n \"bitcoin-internals\",\n \"hex-conservative\",\n]\n\n[[package]]\nname = \"bitflags\"\nversion = \"1.3.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bef38d45163c2f1dde094a7dfd33ccf595c92905c8f8f4fdc18d06fb1037718a\"\n\n[[package]]\nname = \"bitflags\"\nversion = \"2.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cf4b9d6a944f767f8e5e0db018570623c85f3d925ac718db4e06d0187adb21c1\"\n\n[[package]]\nname = \"bitvec\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1bc2832c24239b0141d5674bb9174f9d68a8b5b3f2753311927c172ca46f7e9c\"\ndependencies = [\n \"funty\",\n \"radium\",\n \"tap\",\n \"wyz\",\n]\n\n[[package]]\nname = \"blake2\"\nversion = \"0.10.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"46502ad458c9a52b69d4d4d32775c788b7a1b85e8bc9d482d92250fc0e3f8efe\"\ndependencies = [\n \"digest 0.10.7\",\n]\n\n[[package]]\nname = \"blake2b_simd\"\nversion = \"1.0.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"23285ad32269793932e830392f2fe2f83e26488fd3ec778883a93c8323735780\"\ndependencies = [\n \"arrayref\",\n \"arrayvec\",\n \"constant_time_eq\",\n]\n\n[[package]]\nname = \"block-buffer\"\nversion = \"0.9.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4152116fd6e9dadb291ae18fc1ec3575ed6d84c29642d97890f4b4a3417297e4\"\ndependencies = [\n \"generic-array\",\n]\n\n[[package]]\nname = \"block-buffer\"\nversion = \"0.10.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3078c7629b62d3f0439517fa394996acacc5cbc91c5a20d8c658e77abd503a71\"\ndependencies = [\n \"generic-array\",\n]\n\n[[package]]\nname = \"bounded-collections\"\nversion = \"0.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d32385ecb91a31bddaf908e8dcf4a15aef1bcd3913cc03ebfad02ff6d568abc1\"\ndependencies = [\n \"log\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"serde\",\n]\n\n[[package]]\nname = \"bs58\"\nversion = \"0.5.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bf88ba1141d185c399bee5288d850d63b8369520c1eafc32a0430b5b6c287bf4\"\ndependencies = [\n \"tinyvec\",\n]\n\n[[package]]\nname = \"bumpalo\"\nversion = \"3.16.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"79296716171880943b8470b5f8d03aa55eb2e645a4874bdbb28adb49162e012c\"\n\n[[package]]\nname = \"byte-slice-cast\"\nversion = \"1.2.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c3ac9f8b63eca6fd385229b3675f6cc0dc5c8a5c8a54a59d4f52ffd670d87b0c\"\n\n[[package]]\nname = \"byteorder\"\nversion = \"1.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1fd0f2584146f6f2ef48085050886acf353beff7305ebd1ae69500e27c67f64b\"\n\n[[package]]\nname = \"bytes\"\nversion = \"1.6.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"514de17de45fdb8dc022b1a7975556c53c86f9f0aa5f534b98977b171857c2c9\"\n\n[[package]]\nname = \"cc\"\nversion = \"1.0.97\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"099a5357d84c4c61eb35fc8eafa9a79a902c2f76911e5747ced4e032edd8d9b4\"\n\n[[package]]\nname = \"cfg-if\"\nversion = \"1.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd\"\n\n[[package]]\nname = \"chrono\"\nversion = \"0.4.38\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a21f936df1771bf62b77f047b726c4625ff2e8aa607c01ec06e5a05bd8463401\"\ndependencies = [\n \"android-tzdata\",\n \"iana-time-zone\",\n \"num-traits\",\n \"windows-targets\",\n]\n\n[[package]]\nname = \"common-path\"\nversion = \"1.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2382f75942f4b3be3690fe4f86365e9c853c1587d6ee58212cebf6e2a9ccd101\"\n\n[[package]]\nname = \"const-oid\"\nversion = \"0.9.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c2459377285ad874054d797f3ccebf984978aa39129f6eafde5cdc8315b612f8\"\n\n[[package]]\nname = \"constant_time_eq\"\nversion = \"0.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f7144d30dcf0fafbce74250a3963025d8d52177934239851c917d29f1df280c2\"\n\n[[package]]\nname = \"constcat\"\nversion = \"0.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cd7e35aee659887cbfb97aaf227ac12cad1a9d7c71e55ff3376839ed4e282d08\"\n\n[[package]]\nname = \"core-foundation-sys\"\nversion = \"0.8.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"06ea2b9bc92be3c2baa9334a323ebca2d6f074ff852cd1d7b11064035cd3868f\"\n\n[[package]]\nname = \"cpufeatures\"\nversion = \"0.2.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"53fe5e26ff1b7aef8bca9c6080520cfb8d9333c7568e1829cef191a9723e5504\"\ndependencies = [\n \"libc\",\n]\n\n[[package]]\nname = \"crunchy\"\nversion = \"0.2.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7a81dae078cea95a014a339291cec439d2f232ebe854a9d672b796c6afafa9b7\"\n\n[[package]]\nname = \"crypto-bigint\"\nversion = \"0.5.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0dc92fb57ca44df6db8059111ab3af99a63d5d0f8375d9972e319a379c6bab76\"\ndependencies = [\n \"generic-array\",\n \"rand_core 0.6.4\",\n \"subtle\",\n \"zeroize\",\n]\n\n[[package]]\nname = \"crypto-common\"\nversion = \"0.1.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1bfb12502f3fc46cca1bb51ac28df9d618d813cdc3d2f25b9fe775a34af26bb3\"\ndependencies = [\n \"generic-array\",\n \"rand_core 0.6.4\",\n \"typenum\",\n]\n\n[[package]]\nname = \"crypto-mac\"\nversion = \"0.8.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b584a330336237c1eecd3e94266efb216c56ed91225d634cb2991c5f3fd1aeab\"\ndependencies = [\n \"generic-array\",\n \"subtle\",\n]\n\n[[package]]\nname = \"curve25519-dalek\"\nversion = \"3.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0b9fdf9972b2bd6af2d913799d9ebc165ea4d2e65878e329d9c6b372c4491b61\"\ndependencies = [\n \"byteorder\",\n \"digest 0.9.0\",\n \"rand_core 0.5.1\",\n \"subtle\",\n \"zeroize\",\n]\n\n[[package]]\nname = \"curve25519-dalek\"\nversion = \"4.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0a677b8922c94e01bdbb12126b0bc852f00447528dee1782229af9c720c3f348\"\ndependencies = [\n \"cfg-if\",\n \"cpufeatures\",\n \"curve25519-dalek-derive\",\n \"digest 0.10.7\",\n \"fiat-crypto\",\n \"platforms\",\n \"rustc_version\",\n \"subtle\",\n \"zeroize\",\n]\n\n[[package]]\nname = \"curve25519-dalek-derive\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f46882e17999c6cc590af592290432be3bce0428cb0d5f8b6715e4dc7b383eb3\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.61\",\n]\n\n[[package]]\nname = \"darling\"\nversion = \"0.14.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7b750cb3417fd1b327431a470f388520309479ab0bf5e323505daf0290cd3850\"\ndependencies = [\n \"darling_core\",\n \"darling_macro\",\n]\n\n[[package]]\nname = \"darling_core\"\nversion = \"0.14.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"109c1ca6e6b7f82cc233a97004ea8ed7ca123a9af07a8230878fcfda9b158bf0\"\ndependencies = [\n \"fnv\",\n \"ident_case\",\n \"proc-macro2\",\n \"quote\",\n \"strsim\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"darling_macro\"\nversion = \"0.14.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a4aab4dbc9f7611d8b55048a3a16d2d010c2c8334e46304b40ac1cc14bf3b48e\"\ndependencies = [\n \"darling_core\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"der\"\nversion = \"0.7.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f55bf8e7b65898637379c1b74eb1551107c8294ed26d855ceb9fd1a09cfc9bc0\"\ndependencies = [\n \"const-oid\",\n \"zeroize\",\n]\n\n[[package]]\nname = \"derivative\"\nversion = \"2.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fcc3dd5e9e9c0b295d6e1e4d811fb6f157d5ffd784b8d202fc62eac8035a770b\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"derive-syn-parse\"\nversion = \"0.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d65d7ce8132b7c0e54497a4d9a55a1c2a0912a0d786cf894472ba818fba45762\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.61\",\n]\n\n[[package]]\nname = \"derive_more\"\nversion = \"0.99.17\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4fb810d30a7c1953f91334de7244731fc3f3c10d7fe163338a35b9f640960321\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"digest\"\nversion = \"0.9.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d3dd60d1080a57a05ab032377049e0591415d2b31afd7028356dbf3cc6dcb066\"\ndependencies = [\n \"generic-array\",\n]\n\n[[package]]\nname = \"digest\"\nversion = \"0.10.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9ed9a281f7bc9b7576e61468ba615a66a5c8cfdff42420a70aa82701a3b1e292\"\ndependencies = [\n \"block-buffer 0.10.4\",\n \"const-oid\",\n \"crypto-common\",\n \"subtle\",\n]\n\n[[package]]\nname = \"docify\"\nversion = \"0.2.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"43a2f138ad521dc4a2ced1a4576148a6a610b4c5923933b062a263130a6802ce\"\ndependencies = [\n \"docify_macros\",\n]\n\n[[package]]\nname = \"docify_macros\"\nversion = \"0.2.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1a081e51fb188742f5a7a1164ad752121abcb22874b21e2c3b0dd040c515fdad\"\ndependencies = [\n \"common-path\",\n \"derive-syn-parse\",\n \"once_cell\",\n \"proc-macro2\",\n \"quote\",\n \"regex\",\n \"syn 2.0.61\",\n \"termcolor\",\n \"toml\",\n \"walkdir\",\n]\n\n[[package]]\nname = \"dyn-clonable\"\nversion = \"0.9.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4e9232f0e607a262ceb9bd5141a3dfb3e4db6994b31989bbfd845878cba59fd4\"\ndependencies = [\n \"dyn-clonable-impl\",\n \"dyn-clone\",\n]\n\n[[package]]\nname = \"dyn-clonable-impl\"\nversion = \"0.9.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"558e40ea573c374cf53507fd240b7ee2f5477df7cfebdb97323ec61c719399c5\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"dyn-clone\"\nversion = \"1.0.17\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0d6ef0072f8a535281e4876be788938b528e9a1d43900b82c2569af7da799125\"\n\n[[package]]\nname = \"ecdsa\"\nversion = \"0.16.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ee27f32b5c5292967d2d4a9d7f1e0b0aed2c15daded5a60300e4abb9d8020bca\"\ndependencies = [\n \"der\",\n \"digest 0.10.7\",\n \"elliptic-curve\",\n \"rfc6979\",\n \"serdect\",\n \"signature\",\n \"spki\",\n]\n\n[[package]]\nname = \"ed25519\"\nversion = \"2.2.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"115531babc129696a58c64a4fef0a8bf9e9698629fb97e9e40767d235cfbcd53\"\ndependencies = [\n \"pkcs8\",\n \"signature\",\n]\n\n[[package]]\nname = \"ed25519-dalek\"\nversion = \"2.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4a3daa8e81a3963a60642bcc1f90a670680bd4a77535faa384e9d1c79d620871\"\ndependencies = [\n \"curve25519-dalek 4.1.2\",\n \"ed25519\",\n \"serde\",\n \"sha2 0.10.8\",\n \"subtle\",\n \"zeroize\",\n]\n\n[[package]]\nname = \"ed25519-zebra\"\nversion = \"3.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7c24f403d068ad0b359e577a77f92392118be3f3c927538f2bb544a5ecd828c6\"\ndependencies = [\n \"curve25519-dalek 3.2.0\",\n \"hashbrown 0.12.3\",\n \"hex\",\n \"rand_core 0.6.4\",\n \"sha2 0.9.9\",\n \"zeroize\",\n]\n\n[[package]]\nname = \"either\"\nversion = \"1.11.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a47c1c47d2f5964e29c61246e81db715514cd532db6b5116a25ea3c03d6780a2\"\n\n[[package]]\nname = \"elliptic-curve\"\nversion = \"0.13.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b5e6043086bf7973472e0c7dff2142ea0b680d30e18d9cc40f267efbf222bd47\"\ndependencies = [\n \"base16ct\",\n \"crypto-bigint\",\n \"digest 0.10.7\",\n \"ff\",\n \"generic-array\",\n \"group\",\n \"pkcs8\",\n \"rand_core 0.6.4\",\n \"sec1\",\n \"serdect\",\n \"subtle\",\n \"zeroize\",\n]\n\n[[package]]\nname = \"env_logger\"\nversion = \"0.10.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4cd405aab171cb85d6735e5c8d9db038c17d3ca007a4d2c25f337935c3d90580\"\ndependencies = [\n \"humantime\",\n \"is-terminal\",\n \"log\",\n \"regex\",\n \"termcolor\",\n]\n\n[[package]]\nname = \"environmental\"\nversion = \"1.1.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e48c92028aaa870e83d51c64e5d4e0b6981b360c522198c23959f219a4e1b15b\"\n\n[[package]]\nname = \"equivalent\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5443807d6dff69373d433ab9ef5378ad8df50ca6298caf15de6e52e24aaf54d5\"\n\n[[package]]\nname = \"expander\"\nversion = \"2.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"00e83c02035136f1592a47964ea60c05a50e4ed8b5892cfac197063850898d4d\"\ndependencies = [\n \"blake2\",\n \"fs-err\",\n \"prettier-please\",\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.61\",\n]\n\n[[package]]\nname = \"ff\"\nversion = \"0.13.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ded41244b729663b1e574f1b4fb731469f69f79c17667b5d776b16cda0479449\"\ndependencies = [\n \"rand_core 0.6.4\",\n \"subtle\",\n]\n\n[[package]]\nname = \"fiat-crypto\"\nversion = \"0.2.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"38793c55593b33412e3ae40c2c9781ffaa6f438f6f8c10f24e71846fbd7ae01e\"\n\n[[package]]\nname = \"fixed-hash\"\nversion = \"0.8.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"835c052cb0c08c1acf6ffd71c022172e18723949c8282f2b9f27efbc51e64534\"\ndependencies = [\n \"byteorder\",\n \"rand\",\n \"rustc-hex\",\n \"static_assertions\",\n]\n\n[[package]]\nname = \"fnv\"\nversion = \"1.0.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3f9eec918d3f24069decb9af1554cad7c880e2da24a9afd88aca000531ab82c1\"\n\n[[package]]\nname = \"fs-err\"\nversion = \"2.11.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"88a41f105fe1d5b6b34b2055e3dc59bb79b46b48b2040b9e6c7b4b5de097aa41\"\ndependencies = [\n \"autocfg\",\n]\n\n[[package]]\nname = \"funty\"\nversion = \"2.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e6d5a32815ae3f33302d95fdcb2ce17862f8c65363dcfd29360480ba1001fc9c\"\n\n[[package]]\nname = \"futures\"\nversion = \"0.3.30\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"645c6916888f6cb6350d2550b80fb63e734897a8498abe35cfb732b6487804b0\"\ndependencies = [\n \"futures-channel\",\n \"futures-core\",\n \"futures-executor\",\n \"futures-io\",\n \"futures-sink\",\n \"futures-task\",\n \"futures-util\",\n]\n\n[[package]]\nname = \"futures-channel\"\nversion = \"0.3.30\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"eac8f7d7865dcb88bd4373ab671c8cf4508703796caa2b1985a9ca867b3fcb78\"\ndependencies = [\n \"futures-core\",\n \"futures-sink\",\n]\n\n[[package]]\nname = \"futures-core\"\nversion = \"0.3.30\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"dfc6580bb841c5a68e9ef15c77ccc837b40a7504914d52e47b8b0e9bbda25a1d\"\n\n[[package]]\nname = \"futures-executor\"\nversion = \"0.3.30\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a576fc72ae164fca6b9db127eaa9a9dda0d61316034f33a0a0d4eda41f02b01d\"\ndependencies = [\n \"futures-core\",\n \"futures-task\",\n \"futures-util\",\n \"num_cpus\",\n]\n\n[[package]]\nname = \"futures-io\"\nversion = \"0.3.30\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a44623e20b9681a318efdd71c299b6b222ed6f231972bfe2f224ebad6311f0c1\"\n\n[[package]]\nname = \"futures-macro\"\nversion = \"0.3.30\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"87750cf4b7a4c0625b1529e4c543c2182106e4dedc60a2a6455e00d212c489ac\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.61\",\n]\n\n[[package]]\nname = \"futures-sink\"\nversion = \"0.3.30\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9fb8e00e87438d937621c1c6269e53f536c14d3fbd6a042bb24879e57d474fb5\"\n\n[[package]]\nname = \"futures-task\"\nversion = \"0.3.30\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"38d84fa142264698cdce1a9f9172cf383a0c82de1bddcf3092901442c4097004\"\n\n[[package]]\nname = \"futures-util\"\nversion = \"0.3.30\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3d6401deb83407ab3da39eba7e33987a73c3df0c82b4bb5813ee871c19c41d48\"\ndependencies = [\n \"futures-channel\",\n \"futures-core\",\n \"futures-io\",\n \"futures-macro\",\n \"futures-sink\",\n \"futures-task\",\n \"memchr\",\n \"pin-project-lite\",\n \"pin-utils\",\n \"slab\",\n]\n\n[[package]]\nname = \"generic-array\"\nversion = \"0.14.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"85649ca51fd72272d7821adaf274ad91c288277713d9c18820d8499a7ff69e9a\"\ndependencies = [\n \"typenum\",\n \"version_check\",\n \"zeroize\",\n]\n\n[[package]]\nname = \"getrandom\"\nversion = \"0.2.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c4567c8db10ae91089c99af84c68c38da3ec2f087c3f82960bcdbf3656b6f4d7\"\ndependencies = [\n \"cfg-if\",\n \"libc\",\n \"wasi\",\n]\n\n[[package]]\nname = \"getrandom_or_panic\"\nversion = \"0.0.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6ea1015b5a70616b688dc230cfe50c8af89d972cb132d5a622814d29773b10b9\"\ndependencies = [\n \"rand\",\n \"rand_core 0.6.4\",\n]\n\n[[package]]\nname = \"gimli\"\nversion = \"0.28.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4271d37baee1b8c7e4b708028c57d816cf9d2434acb33a549475f78c181f6253\"\n\n[[package]]\nname = \"group\"\nversion = \"0.13.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f0f9ef7462f7c099f518d754361858f86d8a07af53ba9af0fe635bbccb151a63\"\ndependencies = [\n \"ff\",\n \"rand_core 0.6.4\",\n \"subtle\",\n]\n\n[[package]]\nname = \"hash-db\"\nversion = \"0.16.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8e7d7786361d7425ae2fe4f9e407eb0efaa0840f5212d109cc018c40c35c6ab4\"\n\n[[package]]\nname = \"hash256-std-hasher\"\nversion = \"0.15.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"92c171d55b98633f4ed3860808f004099b36c1cc29c42cfc53aa8591b21efcf2\"\ndependencies = [\n \"crunchy\",\n]\n\n[[package]]\nname = \"hashbrown\"\nversion = \"0.12.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8a9ee70c43aaf417c914396645a0fa852624801b24ebb7ae78fe8272889ac888\"\ndependencies = [\n \"ahash 0.7.8\",\n]\n\n[[package]]\nname = \"hashbrown\"\nversion = \"0.13.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"43a3c133739dddd0d2990f9a4bdf8eb4b21ef50e4851ca85ab661199821d510e\"\ndependencies = [\n \"ahash 0.8.11\",\n]\n\n[[package]]\nname = \"hashbrown\"\nversion = \"0.14.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e5274423e17b7c9fc20b6e7e208532f9b19825d82dfd615708b70edd83df41f1\"\n\n[[package]]\nname = \"heck\"\nversion = \"0.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"95505c38b4572b2d910cecb0281560f54b440a19336cbbcb27bf6ce6adc6f5a8\"\n\n[[package]]\nname = \"hermit-abi\"\nversion = \"0.3.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d231dfb89cfffdbc30e7fc41579ed6066ad03abda9e567ccafae602b97ec5024\"\n\n[[package]]\nname = \"hex\"\nversion = \"0.4.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7f24254aa9a54b5c858eaee2f5bccdb46aaf0e486a595ed5fd8f86ba55232a70\"\n\n[[package]]\nname = \"hex-conservative\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"30ed443af458ccb6d81c1e7e661545f94d3176752fb1df2f543b902a1e0f51e2\"\n\n[[package]]\nname = \"hmac\"\nversion = \"0.8.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"126888268dcc288495a26bf004b38c5fdbb31682f992c84ceb046a1f0fe38840\"\ndependencies = [\n \"crypto-mac\",\n \"digest 0.9.0\",\n]\n\n[[package]]\nname = \"hmac\"\nversion = \"0.12.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6c49c37c09c17a53d937dfbb742eb3a961d65a994e6bcdcf37e7399d0cc8ab5e\"\ndependencies = [\n \"digest 0.10.7\",\n]\n\n[[package]]\nname = \"hmac-drbg\"\nversion = \"0.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"17ea0a1394df5b6574da6e0c1ade9e78868c9fb0a4e5ef4428e32da4676b85b1\"\ndependencies = [\n \"digest 0.9.0\",\n \"generic-array\",\n \"hmac 0.8.1\",\n]\n\n[[package]]\nname = \"humantime\"\nversion = \"2.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9a3a5bfb195931eeb336b2a7b4d761daec841b97f947d34394601737a7bba5e4\"\n\n[[package]]\nname = \"iana-time-zone\"\nversion = \"0.1.60\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e7ffbb5a1b541ea2561f8c41c087286cc091e21e556a4f09a8f6cbf17b69b141\"\ndependencies = [\n \"android_system_properties\",\n \"core-foundation-sys\",\n \"iana-time-zone-haiku\",\n \"js-sys\",\n \"wasm-bindgen\",\n \"windows-core\",\n]\n\n[[package]]\nname = \"iana-time-zone-haiku\"\nversion = \"0.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f31827a206f56af32e590ba56d5d2d085f558508192593743f16b2306495269f\"\ndependencies = [\n \"cc\",\n]\n\n[[package]]\nname = \"ident_case\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b9e0384b61958566e926dc50660321d12159025e767c18e043daf26b70104c39\"\n\n[[package]]\nname = \"impl-codec\"\nversion = \"0.6.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ba6a270039626615617f3f36d15fc827041df3b78c439da2cadfa47455a77f2f\"\ndependencies = [\n \"parity-scale-codec\",\n]\n\n[[package]]\nname = \"impl-serde\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ebc88fc67028ae3db0c853baa36269d398d5f45b6982f95549ff5def78c935cd\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"impl-trait-for-tuples\"\nversion = \"0.2.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"11d7a9f6330b71fea57921c9b61c47ee6e84f72d394754eff6163ae67e7395eb\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"indexmap\"\nversion = \"2.2.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"168fb715dda47215e360912c096649d23d58bf392ac62f73919e831745e40f26\"\ndependencies = [\n \"equivalent\",\n \"hashbrown 0.14.5\",\n]\n\n[[package]]\nname = \"ink\"\nversion = \"4.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e9fd4f77d66c94aa7f27a7cf41cd2edbc2229afe34ec475c3f32b6e8fdf561a0\"\ndependencies = [\n \"derive_more\",\n \"ink_env\",\n \"ink_macro\",\n \"ink_metadata\",\n \"ink_prelude\",\n \"ink_primitives\",\n \"ink_storage\",\n \"parity-scale-codec\",\n]\n\n[[package]]\nname = \"ink_allocator\"\nversion = \"4.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"870914970470fd77a3f42d3c5d1918b562817af127fd063ee8b1d9fbf59aa1fe\"\ndependencies = [\n \"cfg-if\",\n]\n\n[[package]]\nname = \"ink_codegen\"\nversion = \"4.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"22d79057b2565df31a10af6510a44b161093f110c5f9c22ad02c20af9cea4c29\"\ndependencies = [\n \"blake2\",\n \"derive_more\",\n \"either\",\n \"env_logger\",\n \"heck\",\n \"impl-serde\",\n \"ink_ir\",\n \"ink_primitives\",\n \"itertools\",\n \"log\",\n \"parity-scale-codec\",\n \"proc-macro2\",\n \"quote\",\n \"serde\",\n \"serde_json\",\n \"syn 2.0.61\",\n]\n\n[[package]]\nname = \"ink_engine\"\nversion = \"4.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"722ec3a5eb557124b001c60ff8f961079f6d566af643edea579f152b15822fe5\"\ndependencies = [\n \"blake2\",\n \"derive_more\",\n \"ink_primitives\",\n \"parity-scale-codec\",\n \"secp256k1 0.27.0\",\n \"sha2 0.10.8\",\n \"sha3\",\n]\n\n[[package]]\nname = \"ink_env\"\nversion = \"4.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"584e73bc0982f6f1a067bb63ebc75262f6dc54ed2a17060efa73eaba84dc9308\"\ndependencies = [\n \"arrayref\",\n \"blake2\",\n \"cfg-if\",\n \"derive_more\",\n \"ink_allocator\",\n \"ink_engine\",\n \"ink_prelude\",\n \"ink_primitives\",\n \"ink_storage_traits\",\n \"num-traits\",\n \"parity-scale-codec\",\n \"paste\",\n \"rlibc\",\n \"scale-decode\",\n \"scale-encode\",\n \"scale-info\",\n \"secp256k1 0.27.0\",\n \"sha2 0.10.8\",\n \"sha3\",\n \"static_assertions\",\n]\n\n[[package]]\nname = \"ink_ir\"\nversion = \"4.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5b529c941518e8f450395fab9fe8ebba0a7acbb18778fc7e0a87f6248286ec72\"\ndependencies = [\n \"blake2\",\n \"either\",\n \"itertools\",\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.61\",\n]\n\n[[package]]\nname = \"ink_macro\"\nversion = \"4.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8579576c995ca9baa032584beca19155cbd63b6739570aa9da4d35a0415f4be8\"\ndependencies = [\n \"ink_codegen\",\n \"ink_ir\",\n \"ink_primitives\",\n \"parity-scale-codec\",\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.61\",\n \"synstructure\",\n]\n\n[[package]]\nname = \"ink_metadata\"\nversion = \"4.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3fddff95ce3e01f42002fdaf96edda691dbccb08c9ae76d7101daa1fa634e601\"\ndependencies = [\n \"derive_more\",\n \"impl-serde\",\n \"ink_prelude\",\n \"ink_primitives\",\n \"scale-info\",\n \"serde\",\n]\n\n[[package]]\nname = \"ink_prelude\"\nversion = \"4.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d8cfdf91d2b442f08efb34dd3780fd6fbd3d033f63b42f62684fe47534948ef6\"\ndependencies = [\n \"cfg-if\",\n]\n\n[[package]]\nname = \"ink_primitives\"\nversion = \"4.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6414bcad12ebf0c3abbbb192a09e4d06e22f662cf3e19545204e1b0684be12a1\"\ndependencies = [\n \"derive_more\",\n \"ink_prelude\",\n \"parity-scale-codec\",\n \"scale-decode\",\n \"scale-encode\",\n \"scale-info\",\n \"xxhash-rust\",\n]\n\n[[package]]\nname = \"ink_storage\"\nversion = \"4.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bd728409de235de0489f71ee2d1beb320613fdb50dda9fa1c564825f4ad06daa\"\ndependencies = [\n \"array-init\",\n \"cfg-if\",\n \"derive_more\",\n \"ink_env\",\n \"ink_metadata\",\n \"ink_prelude\",\n \"ink_primitives\",\n \"ink_storage_traits\",\n \"parity-scale-codec\",\n \"scale-info\",\n]\n\n[[package]]\nname = \"ink_storage_traits\"\nversion = \"4.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a8dcb50f70377ac35c28d63b06383a0a3cbb79542ea4cdc5b00e3e2b3de4a549\"\ndependencies = [\n \"ink_metadata\",\n \"ink_prelude\",\n \"ink_primitives\",\n \"parity-scale-codec\",\n \"scale-info\",\n]\n\n[[package]]\nname = \"integer-sqrt\"\nversion = \"0.1.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"276ec31bcb4a9ee45f58bec6f9ec700ae4cf4f4f8f2fa7e06cb406bd5ffdd770\"\ndependencies = [\n \"num-traits\",\n]\n\n[[package]]\nname = \"is-terminal\"\nversion = \"0.4.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f23ff5ef2b80d608d61efee834934d862cd92461afc0560dedf493e4c033738b\"\ndependencies = [\n \"hermit-abi\",\n \"libc\",\n \"windows-sys\",\n]\n\n[[package]]\nname = \"itertools\"\nversion = \"0.10.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b0fd2260e829bddf4cb6ea802289de2f86d6a7a690192fbe91b3f46e0f2c8473\"\ndependencies = [\n \"either\",\n]\n\n[[package]]\nname = \"itoa\"\nversion = \"1.0.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"49f1f14873335454500d59611f1cf4a4b0f786f9ac11f4312a78e4cf2566695b\"\n\n[[package]]\nname = \"js-sys\"\nversion = \"0.3.69\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"29c15563dc2726973df627357ce0c9ddddbea194836909d655df6a75d2cf296d\"\ndependencies = [\n \"wasm-bindgen\",\n]\n\n[[package]]\nname = \"k256\"\nversion = \"0.13.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"956ff9b67e26e1a6a866cb758f12c6f8746208489e3e4a4b5580802f2f0a587b\"\ndependencies = [\n \"cfg-if\",\n \"ecdsa\",\n \"elliptic-curve\",\n \"once_cell\",\n \"serdect\",\n \"sha2 0.10.8\",\n]\n\n[[package]]\nname = \"keccak\"\nversion = \"0.1.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ecc2af9a1119c51f12a14607e783cb977bde58bc069ff0c3da1095e635d70654\"\ndependencies = [\n \"cpufeatures\",\n]\n\n[[package]]\nname = \"lazy_static\"\nversion = \"1.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e2abad23fbc42b3700f2f279844dc832adb2b2eb069b2df918f455c4e18cc646\"\n\n[[package]]\nname = \"libc\"\nversion = \"0.2.154\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ae743338b92ff9146ce83992f766a31066a91a8c84a45e0e9f21e7cf6de6d346\"\n\n[[package]]\nname = \"libsecp256k1\"\nversion = \"0.7.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"95b09eff1b35ed3b33b877ced3a691fc7a481919c7e29c53c906226fcf55e2a1\"\ndependencies = [\n \"arrayref\",\n \"base64\",\n \"digest 0.9.0\",\n \"hmac-drbg\",\n \"libsecp256k1-core\",\n \"libsecp256k1-gen-ecmult\",\n \"libsecp256k1-gen-genmult\",\n \"rand\",\n \"serde\",\n \"sha2 0.9.9\",\n \"typenum\",\n]\n\n[[package]]\nname = \"libsecp256k1-core\"\nversion = \"0.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5be9b9bb642d8522a44d533eab56c16c738301965504753b03ad1de3425d5451\"\ndependencies = [\n \"crunchy\",\n \"digest 0.9.0\",\n \"subtle\",\n]\n\n[[package]]\nname = \"libsecp256k1-gen-ecmult\"\nversion = \"0.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3038c808c55c87e8a172643a7d87187fc6c4174468159cb3090659d55bcb4809\"\ndependencies = [\n \"libsecp256k1-core\",\n]\n\n[[package]]\nname = \"libsecp256k1-gen-genmult\"\nversion = \"0.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3db8d6ba2cec9eacc40e6e8ccc98931840301f1006e95647ceb2dd5c3aa06f7c\"\ndependencies = [\n \"libsecp256k1-core\",\n]\n\n[[package]]\nname = \"lock_api\"\nversion = \"0.4.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"07af8b9cdd281b7915f413fa73f29ebd5d55d0d3f0155584dade1ff18cea1b17\"\ndependencies = [\n \"autocfg\",\n \"scopeguard\",\n]\n\n[[package]]\nname = \"log\"\nversion = \"0.4.21\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"90ed8c1e510134f979dbc4f070f87d4313098b704861a105fe34231c70a3901c\"\n\n[[package]]\nname = \"matchers\"\nversion = \"0.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f099785f7595cc4b4553a174ce30dd7589ef93391ff414dbb67f62392b9e0ce1\"\ndependencies = [\n \"regex-automata 0.1.10\",\n]\n\n[[package]]\nname = \"memchr\"\nversion = \"2.7.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6c8640c5d730cb13ebd907d8d04b52f55ac9a2eec55b440c8892f40d56c76c1d\"\n\n[[package]]\nname = \"memory-db\"\nversion = \"0.32.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"808b50db46293432a45e63bc15ea51e0ab4c0a1647b8eb114e31a3e698dd6fbe\"\ndependencies = [\n \"hash-db\",\n]\n\n[[package]]\nname = \"merlin\"\nversion = \"3.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"58c38e2799fc0978b65dfff8023ec7843e2330bb462f19198840b34b6582397d\"\ndependencies = [\n \"byteorder\",\n \"keccak\",\n \"rand_core 0.6.4\",\n \"zeroize\",\n]\n\n[[package]]\nname = \"miniz_oxide\"\nversion = \"0.7.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9d811f3e15f28568be3407c8e7fdb6514c1cda3cb30683f15b6a1a1dc4ea14a7\"\ndependencies = [\n \"adler\",\n]\n\n[[package]]\nname = \"mock_nominator\"\nversion = \"0.1.0\"\ndependencies = [\n \"ink\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"sp-io\",\n \"sp-runtime\",\n]\n\n[[package]]\nname = \"nohash-hasher\"\nversion = \"0.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2bf50223579dc7cdcfb3bfcacf7069ff68243f8c363f62ffa99cf000a6b9c451\"\n\n[[package]]\nname = \"nomination_agent\"\nversion = \"0.1.0\"\ndependencies = [\n \"ink\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"sp-io\",\n \"sp-runtime\",\n]\n\n[[package]]\nname = \"num-bigint\"\nversion = \"0.4.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c165a9ab64cf766f73521c0dd2cfdff64f488b8f0b3e621face3462d3db536d7\"\ndependencies = [\n \"num-integer\",\n \"num-traits\",\n]\n\n[[package]]\nname = \"num-format\"\nversion = \"0.4.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a652d9771a63711fd3c3deb670acfbe5c30a4072e664d7a3bf5a9e1056ac72c3\"\ndependencies = [\n \"arrayvec\",\n \"itoa\",\n]\n\n[[package]]\nname = \"num-integer\"\nversion = \"0.1.46\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7969661fd2958a5cb096e56c8e1ad0444ac2bbcd0061bd28660485a44879858f\"\ndependencies = [\n \"num-traits\",\n]\n\n[[package]]\nname = \"num-traits\"\nversion = \"0.2.19\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"071dfc062690e90b734c0b2273ce72ad0ffa95f0c74596bc250dcfd960262841\"\ndependencies = [\n \"autocfg\",\n]\n\n[[package]]\nname = \"num_cpus\"\nversion = \"1.16.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4161fcb6d602d4d2081af7c3a45852d875a03dd337a6bfdd6e06407b61342a43\"\ndependencies = [\n \"hermit-abi\",\n \"libc\",\n]\n\n[[package]]\nname = \"object\"\nversion = \"0.32.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a6a622008b6e321afc04970976f62ee297fdbaa6f95318ca343e3eebb9648441\"\ndependencies = [\n \"memchr\",\n]\n\n[[package]]\nname = \"once_cell\"\nversion = \"1.19.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3fdb12b2476b595f9358c5161aa467c2438859caa136dec86c26fdd2efe17b92\"\n\n[[package]]\nname = \"opaque-debug\"\nversion = \"0.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c08d65885ee38876c4f86fa503fb49d7b507c2b62552df7c70b2fce627e06381\"\n\n[[package]]\nname = \"parity-bip39\"\nversion = \"2.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4e69bf016dc406eff7d53a7d3f7cf1c2e72c82b9088aac1118591e36dd2cd3e9\"\ndependencies = [\n \"bitcoin_hashes\",\n \"rand\",\n \"rand_core 0.6.4\",\n \"serde\",\n \"unicode-normalization\",\n]\n\n[[package]]\nname = \"parity-scale-codec\"\nversion = \"3.6.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"306800abfa29c7f16596b5970a588435e3d5b3149683d00c12b699cc19f895ee\"\ndependencies = [\n \"arrayvec\",\n \"bitvec\",\n \"byte-slice-cast\",\n \"bytes\",\n \"impl-trait-for-tuples\",\n \"parity-scale-codec-derive\",\n \"serde\",\n]\n\n[[package]]\nname = \"parity-scale-codec-derive\"\nversion = \"3.6.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d830939c76d294956402033aee57a6da7b438f2294eb94864c37b0569053a42c\"\ndependencies = [\n \"proc-macro-crate 3.1.0\",\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"parking_lot\"\nversion = \"0.12.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7e4af0ca4f6caed20e900d564c242b8e5d4903fdacf31d3daf527b66fe6f42fb\"\ndependencies = [\n \"lock_api\",\n \"parking_lot_core\",\n]\n\n[[package]]\nname = \"parking_lot_core\"\nversion = \"0.9.10\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1e401f977ab385c9e4e3ab30627d6f26d00e2c73eef317493c4ec6d468726cf8\"\ndependencies = [\n \"cfg-if\",\n \"libc\",\n \"redox_syscall\",\n \"smallvec\",\n \"windows-targets\",\n]\n\n[[package]]\nname = \"password-hash\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"346f04948ba92c43e8469c1ee6736c7563d71012b17d40745260fe106aac2166\"\ndependencies = [\n \"base64ct\",\n \"rand_core 0.6.4\",\n \"subtle\",\n]\n\n[[package]]\nname = \"paste\"\nversion = \"1.0.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"57c0d7b74b563b49d38dae00a0c37d4d6de9b432382b2892f0574ddcae73fd0a\"\n\n[[package]]\nname = \"pbkdf2\"\nversion = \"0.12.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f8ed6a7761f76e3b9f92dfb0a60a6a6477c61024b775147ff0973a02653abaf2\"\ndependencies = [\n \"digest 0.10.7\",\n \"password-hash\",\n]\n\n[[package]]\nname = \"pin-project-lite\"\nversion = \"0.2.14\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bda66fc9667c18cb2758a2ac84d1167245054bcf85d5d1aaa6923f45801bdd02\"\n\n[[package]]\nname = \"pin-utils\"\nversion = \"0.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8b870d8c151b6f2fb93e84a13146138f05d02ed11c7e7c54f8826aaaf7c9f184\"\n\n[[package]]\nname = \"pkcs8\"\nversion = \"0.10.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f950b2377845cebe5cf8b5165cb3cc1a5e0fa5cfa3e1f7f55707d8fd82e0a7b7\"\ndependencies = [\n \"der\",\n \"spki\",\n]\n\n[[package]]\nname = \"platforms\"\nversion = \"3.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"db23d408679286588f4d4644f965003d056e3dd5abcaaa938116871d7ce2fee7\"\n\n[[package]]\nname = \"polkavm-common\"\nversion = \"0.9.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1d9428a5cfcc85c5d7b9fc4b6a18c4b802d0173d768182a51cc7751640f08b92\"\n\n[[package]]\nname = \"polkavm-derive\"\nversion = \"0.9.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ae8c4bea6f3e11cd89bb18bcdddac10bd9a24015399bd1c485ad68a985a19606\"\ndependencies = [\n \"polkavm-derive-impl-macro\",\n]\n\n[[package]]\nname = \"polkavm-derive-impl\"\nversion = \"0.9.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5c4fdfc49717fb9a196e74a5d28e0bc764eb394a2c803eb11133a31ac996c60c\"\ndependencies = [\n \"polkavm-common\",\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.61\",\n]\n\n[[package]]\nname = \"polkavm-derive-impl-macro\"\nversion = \"0.9.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8ba81f7b5faac81e528eb6158a6f3c9e0bb1008e0ffa19653bc8dea925ecb429\"\ndependencies = [\n \"polkavm-derive-impl\",\n \"syn 2.0.61\",\n]\n\n[[package]]\nname = \"ppv-lite86\"\nversion = \"0.2.17\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5b40af805b3121feab8a3c29f04d8ad262fa8e0561883e7653e024ae4479e6de\"\n\n[[package]]\nname = \"prettier-please\"\nversion = \"0.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"22020dfcf177fcc7bf5deaf7440af371400c67c0de14c399938d8ed4fb4645d3\"\ndependencies = [\n \"proc-macro2\",\n \"syn 2.0.61\",\n]\n\n[[package]]\nname = \"primitive-types\"\nversion = \"0.12.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0b34d9fd68ae0b74a41b21c03c2f62847aa0ffea044eee893b4c140b37e244e2\"\ndependencies = [\n \"fixed-hash\",\n \"impl-codec\",\n \"impl-serde\",\n \"scale-info\",\n \"uint\",\n]\n\n[[package]]\nname = \"proc-macro-crate\"\nversion = \"1.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7f4c021e1093a56626774e81216a4ce732a735e5bad4868a03f3ed65ca0c3919\"\ndependencies = [\n \"once_cell\",\n \"toml_edit 0.19.15\",\n]\n\n[[package]]\nname = \"proc-macro-crate\"\nversion = \"3.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6d37c51ca738a55da99dc0c4a34860fd675453b8b36209178c2249bb13651284\"\ndependencies = [\n \"toml_edit 0.21.1\",\n]\n\n[[package]]\nname = \"proc-macro2\"\nversion = \"1.0.82\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8ad3d49ab951a01fbaafe34f2ec74122942fe18a3f9814c3268f1bb72042131b\"\ndependencies = [\n \"unicode-ident\",\n]\n\n[[package]]\nname = \"psp22\"\nversion = \"0.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"280a16162bc25759f07bebde12ad9737a73beb9356ba4d9befabf9be89f79e24\"\ndependencies = [\n \"ink\",\n \"parity-scale-codec\",\n \"scale-info\",\n]\n\n[[package]]\nname = \"quote\"\nversion = \"1.0.36\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0fa76aaf39101c457836aec0ce2316dbdc3ab723cdda1c6bd4e6ad4208acaca7\"\ndependencies = [\n \"proc-macro2\",\n]\n\n[[package]]\nname = \"radium\"\nversion = \"0.7.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"dc33ff2d4973d518d823d61aa239014831e521c75da58e3df4840d3f47749d09\"\n\n[[package]]\nname = \"rand\"\nversion = \"0.8.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"34af8d1a0e25924bc5b7c43c079c942339d8f0a8b57c39049bef581b46327404\"\ndependencies = [\n \"libc\",\n \"rand_chacha\",\n \"rand_core 0.6.4\",\n]\n\n[[package]]\nname = \"rand_chacha\"\nversion = \"0.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e6c10a63a0fa32252be49d21e7709d4d4baf8d231c2dbce1eaa8141b9b127d88\"\ndependencies = [\n \"ppv-lite86\",\n \"rand_core 0.6.4\",\n]\n\n[[package]]\nname = \"rand_core\"\nversion = \"0.5.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"90bde5296fc891b0cef12a6d03ddccc162ce7b2aff54160af9338f8d40df6d19\"\n\n[[package]]\nname = \"rand_core\"\nversion = \"0.6.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ec0be4795e2f6a28069bec0b5ff3e2ac9bafc99e6a9a7dc3547996c5c816922c\"\ndependencies = [\n \"getrandom\",\n]\n\n[[package]]\nname = \"redox_syscall\"\nversion = \"0.5.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"469052894dcb553421e483e4209ee581a45100d31b4018de03e5a7ad86374a7e\"\ndependencies = [\n \"bitflags 2.5.0\",\n]\n\n[[package]]\nname = \"ref-cast\"\nversion = \"1.0.23\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ccf0a6f84d5f1d581da8b41b47ec8600871962f2a528115b542b362d4b744931\"\ndependencies = [\n \"ref-cast-impl\",\n]\n\n[[package]]\nname = \"ref-cast-impl\"\nversion = \"1.0.23\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bcc303e793d3734489387d205e9b186fac9c6cfacedd98cbb2e8a5943595f3e6\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.61\",\n]\n\n[[package]]\nname = \"regex\"\nversion = \"1.10.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c117dbdfde9c8308975b6a18d71f3f385c89461f7b3fb054288ecf2a2058ba4c\"\ndependencies = [\n \"aho-corasick\",\n \"memchr\",\n \"regex-automata 0.4.6\",\n \"regex-syntax 0.8.3\",\n]\n\n[[package]]\nname = \"regex-automata\"\nversion = \"0.1.10\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6c230d73fb8d8c1b9c0b3135c5142a8acee3a0558fb8db5cf1cb65f8d7862132\"\ndependencies = [\n \"regex-syntax 0.6.29\",\n]\n\n[[package]]\nname = \"regex-automata\"\nversion = \"0.4.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"86b83b8b9847f9bf95ef68afb0b8e6cdb80f498442f5179a29fad448fcc1eaea\"\ndependencies = [\n \"aho-corasick\",\n \"memchr\",\n \"regex-syntax 0.8.3\",\n]\n\n[[package]]\nname = \"regex-syntax\"\nversion = \"0.6.29\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f162c6dd7b008981e4d40210aca20b4bd0f9b60ca9271061b07f78537722f2e1\"\n\n[[package]]\nname = \"regex-syntax\"\nversion = \"0.8.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"adad44e29e4c806119491a7f06f03de4d1af22c3a680dd47f1e6e179439d1f56\"\n\n[[package]]\nname = \"registry\"\nversion = \"0.1.0\"\ndependencies = [\n \"ink\",\n \"nomination_agent\",\n \"parity-scale-codec\",\n \"scale-info\",\n]\n\n[[package]]\nname = \"rfc6979\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f8dd2a808d456c4a54e300a23e9f5a67e122c3024119acbfd73e3bf664491cb2\"\ndependencies = [\n \"hmac 0.12.1\",\n \"subtle\",\n]\n\n[[package]]\nname = \"rlibc\"\nversion = \"1.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fc874b127765f014d792f16763a81245ab80500e2ad921ed4ee9e82481ee08fe\"\n\n[[package]]\nname = \"rustc-demangle\"\nversion = \"0.1.24\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"719b953e2095829ee67db738b3bfa9fa368c94900df327b3f07fe6e794d2fe1f\"\n\n[[package]]\nname = \"rustc-hex\"\nversion = \"2.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3e75f6a532d0fd9f7f13144f392b6ad56a32696bfcd9c78f797f16bbb6f072d6\"\n\n[[package]]\nname = \"rustc_version\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bfa0f585226d2e68097d4f95d113b15b83a82e819ab25717ec0590d9584ef366\"\ndependencies = [\n \"semver\",\n]\n\n[[package]]\nname = \"rustversion\"\nversion = \"1.0.16\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"092474d1a01ea8278f69e6a358998405fae5b8b963ddaeb2b0b04a128bf1dfb0\"\n\n[[package]]\nname = \"ryu\"\nversion = \"1.0.18\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f3cb5ba0dc43242ce17de99c180e96db90b235b8a9fdc9543c96d2209116bd9f\"\n\n[[package]]\nname = \"same-file\"\nversion = \"1.0.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"93fc1dc3aaa9bfed95e02e6eadabb4baf7e3078b0bd1b4d7b6b0b68378900502\"\ndependencies = [\n \"winapi-util\",\n]\n\n[[package]]\nname = \"scale-bits\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"036575c29af9b6e4866ffb7fa055dbf623fe7a9cc159b33786de6013a6969d89\"\ndependencies = [\n \"parity-scale-codec\",\n \"scale-info\",\n]\n\n[[package]]\nname = \"scale-decode\"\nversion = \"0.9.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7789f5728e4e954aaa20cadcc370b99096fb8645fca3c9333ace44bb18f30095\"\ndependencies = [\n \"derive_more\",\n \"parity-scale-codec\",\n \"scale-bits\",\n \"scale-decode-derive\",\n \"scale-info\",\n \"smallvec\",\n]\n\n[[package]]\nname = \"scale-decode-derive\"\nversion = \"0.9.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"27873eb6005868f8cc72dcfe109fae664cf51223d35387bc2f28be4c28d94c47\"\ndependencies = [\n \"darling\",\n \"proc-macro-crate 1.3.1\",\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"scale-encode\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6d70cb4b29360105483fac1ed567ff95d65224a14dd275b6303ed0a654c78de5\"\ndependencies = [\n \"derive_more\",\n \"parity-scale-codec\",\n \"scale-encode-derive\",\n \"scale-info\",\n \"smallvec\",\n]\n\n[[package]]\nname = \"scale-encode-derive\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"995491f110efdc6bea96d6a746140e32bfceb4ea47510750a5467295a4707a25\"\ndependencies = [\n \"darling\",\n \"proc-macro-crate 1.3.1\",\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"scale-info\"\nversion = \"2.11.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7c453e59a955f81fb62ee5d596b450383d699f152d350e9d23a0db2adb78e4c0\"\ndependencies = [\n \"bitvec\",\n \"cfg-if\",\n \"derive_more\",\n \"parity-scale-codec\",\n \"scale-info-derive\",\n \"serde\",\n]\n\n[[package]]\nname = \"scale-info-derive\"\nversion = \"2.11.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2d35494501194174bda522a32605929eefc9ecf7e0a326c26db1fdd85881eb62\"\ndependencies = [\n \"proc-macro-crate 3.1.0\",\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"schnellru\"\nversion = \"0.2.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6b0cf7da6fc4477944d5529807234f66802fcb618fc62b9c05bedca7f9be6c43\"\ndependencies = [\n \"ahash 0.8.11\",\n \"cfg-if\",\n \"hashbrown 0.13.2\",\n]\n\n[[package]]\nname = \"schnorrkel\"\nversion = \"0.11.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8de18f6d8ba0aad7045f5feae07ec29899c1112584a38509a84ad7b04451eaa0\"\ndependencies = [\n \"aead\",\n \"arrayref\",\n \"arrayvec\",\n \"curve25519-dalek 4.1.2\",\n \"getrandom_or_panic\",\n \"merlin\",\n \"rand_core 0.6.4\",\n \"serde_bytes\",\n \"sha2 0.10.8\",\n \"subtle\",\n \"zeroize\",\n]\n\n[[package]]\nname = \"scopeguard\"\nversion = \"1.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"94143f37725109f92c262ed2cf5e59bce7498c01bcc1502d7b9afe439a4e9f49\"\n\n[[package]]\nname = \"sec1\"\nversion = \"0.7.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d3e97a565f76233a6003f9f5c54be1d9c5bdfa3eccfb189469f11ec4901c47dc\"\ndependencies = [\n \"base16ct\",\n \"der\",\n \"generic-array\",\n \"pkcs8\",\n \"serdect\",\n \"subtle\",\n \"zeroize\",\n]\n\n[[package]]\nname = \"secp256k1\"\nversion = \"0.27.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"25996b82292a7a57ed3508f052cfff8640d38d32018784acd714758b43da9c8f\"\ndependencies = [\n \"secp256k1-sys 0.8.1\",\n]\n\n[[package]]\nname = \"secp256k1\"\nversion = \"0.28.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d24b59d129cdadea20aea4fb2352fa053712e5d713eee47d700cd4b2bc002f10\"\ndependencies = [\n \"secp256k1-sys 0.9.2\",\n]\n\n[[package]]\nname = \"secp256k1-sys\"\nversion = \"0.8.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"70a129b9e9efbfb223753b9163c4ab3b13cff7fd9c7f010fbac25ab4099fa07e\"\ndependencies = [\n \"cc\",\n]\n\n[[package]]\nname = \"secp256k1-sys\"\nversion = \"0.9.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e5d1746aae42c19d583c3c1a8c646bfad910498e2051c551a7f2e3c0c9fbb7eb\"\ndependencies = [\n \"cc\",\n]\n\n[[package]]\nname = \"secrecy\"\nversion = \"0.8.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9bd1c54ea06cfd2f6b63219704de0b9b4f72dcc2b8fdef820be6cd799780e91e\"\ndependencies = [\n \"zeroize\",\n]\n\n[[package]]\nname = \"semver\"\nversion = \"1.0.23\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"61697e0a1c7e512e84a621326239844a24d8207b4669b41bc18b32ea5cbf988b\"\n\n[[package]]\nname = \"serde\"\nversion = \"1.0.201\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"780f1cebed1629e4753a1a38a3c72d30b97ec044f0aef68cb26650a3c5cf363c\"\ndependencies = [\n \"serde_derive\",\n]\n\n[[package]]\nname = \"serde_bytes\"\nversion = \"0.11.14\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8b8497c313fd43ab992087548117643f6fcd935cbf36f176ffda0aacf9591734\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"serde_derive\"\nversion = \"1.0.201\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c5e405930b9796f1c00bee880d03fc7e0bb4b9a11afc776885ffe84320da2865\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.61\",\n]\n\n[[package]]\nname = \"serde_json\"\nversion = \"1.0.117\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"455182ea6142b14f93f4bc5320a2b31c1f266b66a4a5c858b013302a5d8cbfc3\"\ndependencies = [\n \"itoa\",\n \"ryu\",\n \"serde\",\n]\n\n[[package]]\nname = \"serde_spanned\"\nversion = \"0.6.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"eb3622f419d1296904700073ea6cc23ad690adbd66f13ea683df73298736f0c1\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"serdect\"\nversion = \"0.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a84f14a19e9a014bb9f4512488d9829a68e04ecabffb0f9904cd1ace94598177\"\ndependencies = [\n \"base16ct\",\n \"serde\",\n]\n\n[[package]]\nname = \"sha2\"\nversion = \"0.9.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4d58a1e1bf39749807d89cf2d98ac2dfa0ff1cb3faa38fbb64dd88ac8013d800\"\ndependencies = [\n \"block-buffer 0.9.0\",\n \"cfg-if\",\n \"cpufeatures\",\n \"digest 0.9.0\",\n \"opaque-debug\",\n]\n\n[[package]]\nname = \"sha2\"\nversion = \"0.10.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"793db75ad2bcafc3ffa7c68b215fee268f537982cd901d132f89c6343f3a3dc8\"\ndependencies = [\n \"cfg-if\",\n \"cpufeatures\",\n \"digest 0.10.7\",\n]\n\n[[package]]\nname = \"sha3\"\nversion = \"0.10.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"75872d278a8f37ef87fa0ddbda7802605cb18344497949862c0d4dcb291eba60\"\ndependencies = [\n \"digest 0.10.7\",\n \"keccak\",\n]\n\n[[package]]\nname = \"sharded-slab\"\nversion = \"0.1.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f40ca3c46823713e0d4209592e8d6e826aa57e928f09752619fc696c499637f6\"\ndependencies = [\n \"lazy_static\",\n]\n\n[[package]]\nname = \"share_token\"\nversion = \"0.1.0\"\ndependencies = [\n \"ink\",\n \"parity-scale-codec\",\n \"psp22\",\n \"scale-info\",\n]\n\n[[package]]\nname = \"signature\"\nversion = \"2.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"77549399552de45a898a580c1b41d445bf730df867cc44e6c0233bbc4b8329de\"\ndependencies = [\n \"digest 0.10.7\",\n \"rand_core 0.6.4\",\n]\n\n[[package]]\nname = \"simple-mermaid\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"620a1d43d70e142b1d46a929af51d44f383db9c7a2ec122de2cd992ccfcf3c18\"\n\n[[package]]\nname = \"slab\"\nversion = \"0.4.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8f92a496fb766b417c996b9c5e57daf2f7ad3b0bebe1ccfca4856390e3d3bb67\"\ndependencies = [\n \"autocfg\",\n]\n\n[[package]]\nname = \"smallvec\"\nversion = \"1.13.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3c5e1a9a646d36c3599cd173a41282daf47c44583ad367b8e6837255952e5c67\"\n\n[[package]]\nname = \"sp-application-crypto\"\nversion = \"34.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1505fad69251900048ddddc6387265e1545d1a366e3b4dcd57b76a03f0a65ae7\"\ndependencies = [\n \"parity-scale-codec\",\n \"scale-info\",\n \"serde\",\n \"sp-core\",\n \"sp-io\",\n \"sp-std\",\n]\n\n[[package]]\nname = \"sp-arithmetic\"\nversion = \"26.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"46d0d0a4c591c421d3231ddd5e27d828618c24456d51445d21a1f79fcee97c23\"\ndependencies = [\n \"docify\",\n \"integer-sqrt\",\n \"num-traits\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"serde\",\n \"sp-std\",\n \"static_assertions\",\n]\n\n[[package]]\nname = \"sp-core\"\nversion = \"32.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bb2dac7e47c7ddbb61efe196d5cce99f6ea88926c961fa39909bfeae46fc5a7b\"\ndependencies = [\n \"array-bytes\",\n \"bitflags 1.3.2\",\n \"blake2\",\n \"bounded-collections\",\n \"bs58\",\n \"dyn-clonable\",\n \"ed25519-zebra\",\n \"futures\",\n \"hash-db\",\n \"hash256-std-hasher\",\n \"impl-serde\",\n \"itertools\",\n \"k256\",\n \"libsecp256k1\",\n \"log\",\n \"merlin\",\n \"parity-bip39\",\n \"parity-scale-codec\",\n \"parking_lot\",\n \"paste\",\n \"primitive-types\",\n \"rand\",\n \"scale-info\",\n \"schnorrkel\",\n \"secp256k1 0.28.2\",\n \"secrecy\",\n \"serde\",\n \"sp-crypto-hashing\",\n \"sp-debug-derive\",\n \"sp-externalities\",\n \"sp-runtime-interface\",\n \"sp-std\",\n \"sp-storage\",\n \"ss58-registry\",\n \"substrate-bip39\",\n \"thiserror\",\n \"tracing\",\n \"w3f-bls\",\n \"zeroize\",\n]\n\n[[package]]\nname = \"sp-crypto-hashing\"\nversion = \"0.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bc9927a7f81334ed5b8a98a4a978c81324d12bd9713ec76b5c68fd410174c5eb\"\ndependencies = [\n \"blake2b_simd\",\n \"byteorder\",\n \"digest 0.10.7\",\n \"sha2 0.10.8\",\n \"sha3\",\n \"twox-hash\",\n]\n\n[[package]]\nname = \"sp-debug-derive\"\nversion = \"14.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"48d09fa0a5f7299fb81ee25ae3853d26200f7a348148aed6de76be905c007dbe\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.61\",\n]\n\n[[package]]\nname = \"sp-externalities\"\nversion = \"0.28.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"33abaec4be69b1613796bbf430decbbcaaf978756379e2016e683a4d6379cd02\"\ndependencies = [\n \"environmental\",\n \"parity-scale-codec\",\n \"sp-storage\",\n]\n\n[[package]]\nname = \"sp-io\"\nversion = \"34.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c44ed47247b6eee76ff703f9fa9f04f99c4104ac1faf629e6d1128e09066b57b\"\ndependencies = [\n \"bytes\",\n \"ed25519-dalek\",\n \"libsecp256k1\",\n \"log\",\n \"parity-scale-codec\",\n \"polkavm-derive\",\n \"rustversion\",\n \"secp256k1 0.28.2\",\n \"sp-core\",\n \"sp-crypto-hashing\",\n \"sp-externalities\",\n \"sp-keystore\",\n \"sp-runtime-interface\",\n \"sp-state-machine\",\n \"sp-std\",\n \"sp-tracing\",\n \"sp-trie\",\n \"tracing\",\n \"tracing-core\",\n]\n\n[[package]]\nname = \"sp-keystore\"\nversion = \"0.38.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4e6c7a7abd860a5211a356cf9d5fcabf0eb37d997985e5d722b6b33dcc815528\"\ndependencies = [\n \"parity-scale-codec\",\n \"parking_lot\",\n \"sp-core\",\n \"sp-externalities\",\n]\n\n[[package]]\nname = \"sp-panic-handler\"\nversion = \"13.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d8f5a17a0a11de029a8b811cb6e8b32ce7e02183cc04a3e965c383246798c416\"\ndependencies = [\n \"backtrace\",\n \"lazy_static\",\n \"regex\",\n]\n\n[[package]]\nname = \"sp-runtime\"\nversion = \"35.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"42ce931b7fbfdeeca1340801dbd4a1cae54ad4c97a1e3dcfcc79709bc800dd46\"\ndependencies = [\n \"docify\",\n \"either\",\n \"hash256-std-hasher\",\n \"impl-trait-for-tuples\",\n \"log\",\n \"parity-scale-codec\",\n \"paste\",\n \"rand\",\n \"scale-info\",\n \"serde\",\n \"simple-mermaid\",\n \"sp-application-crypto\",\n \"sp-arithmetic\",\n \"sp-core\",\n \"sp-io\",\n \"sp-std\",\n \"sp-weights\",\n]\n\n[[package]]\nname = \"sp-runtime-interface\"\nversion = \"27.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"647db5e1dc481686628b41554e832df6ab400c4b43a6a54e54d3b0a71ca404aa\"\ndependencies = [\n \"bytes\",\n \"impl-trait-for-tuples\",\n \"parity-scale-codec\",\n \"polkavm-derive\",\n \"primitive-types\",\n \"sp-externalities\",\n \"sp-runtime-interface-proc-macro\",\n \"sp-std\",\n \"sp-storage\",\n \"sp-tracing\",\n \"sp-wasm-interface\",\n \"static_assertions\",\n]\n\n[[package]]\nname = \"sp-runtime-interface-proc-macro\"\nversion = \"18.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0195f32c628fee3ce1dfbbf2e7e52a30ea85f3589da9fe62a8b816d70fc06294\"\ndependencies = [\n \"Inflector\",\n \"expander\",\n \"proc-macro-crate 3.1.0\",\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.61\",\n]\n\n[[package]]\nname = \"sp-state-machine\"\nversion = \"0.39.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"21d9078306c3066f1824e41153e1ceec34231d39d9a7e7956b101eadf7b9fd3a\"\ndependencies = [\n \"hash-db\",\n \"log\",\n \"parity-scale-codec\",\n \"parking_lot\",\n \"rand\",\n \"smallvec\",\n \"sp-core\",\n \"sp-externalities\",\n \"sp-panic-handler\",\n \"sp-trie\",\n \"thiserror\",\n \"tracing\",\n \"trie-db\",\n]\n\n[[package]]\nname = \"sp-std\"\nversion = \"14.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"12f8ee986414b0a9ad741776762f4083cd3a5128449b982a3919c4df36874834\"\n\n[[package]]\nname = \"sp-storage\"\nversion = \"21.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"99c82989b3a4979a7e1ad848aad9f5d0b4388f1f454cc131766526601ab9e8f8\"\ndependencies = [\n \"impl-serde\",\n \"parity-scale-codec\",\n \"ref-cast\",\n \"serde\",\n \"sp-debug-derive\",\n]\n\n[[package]]\nname = \"sp-tracing\"\nversion = \"17.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"90b3decf116db9f1dfaf1f1597096b043d0e12c952d3bcdc018c6d6b77deec7e\"\ndependencies = [\n \"parity-scale-codec\",\n \"tracing\",\n \"tracing-core\",\n \"tracing-subscriber\",\n]\n\n[[package]]\nname = \"sp-trie\"\nversion = \"33.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d1f5b3620a1c87c265a83d85d7519c6b60c47acf7f77593966afe313d086f00e\"\ndependencies = [\n \"ahash 0.8.11\",\n \"hash-db\",\n \"lazy_static\",\n \"memory-db\",\n \"nohash-hasher\",\n \"parity-scale-codec\",\n \"parking_lot\",\n \"rand\",\n \"scale-info\",\n \"schnellru\",\n \"sp-core\",\n \"sp-externalities\",\n \"thiserror\",\n \"tracing\",\n \"trie-db\",\n \"trie-root\",\n]\n\n[[package]]\nname = \"sp-wasm-interface\"\nversion = \"21.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3b04b919e150b4736d85089d49327eab65507deb1485eec929af69daa2278eb3\"\ndependencies = [\n \"impl-trait-for-tuples\",\n \"log\",\n \"parity-scale-codec\",\n]\n\n[[package]]\nname = \"sp-weights\"\nversion = \"31.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"93cdaf72a1dad537bbb130ba4d47307ebe5170405280ed1aa31fa712718a400e\"\ndependencies = [\n \"bounded-collections\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"serde\",\n \"smallvec\",\n \"sp-arithmetic\",\n \"sp-debug-derive\",\n]\n\n[[package]]\nname = \"spki\"\nversion = \"0.7.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d91ed6c858b01f942cd56b37a94b3e0a1798290327d1236e4d9cf4eaca44d29d\"\ndependencies = [\n \"base64ct\",\n \"der\",\n]\n\n[[package]]\nname = \"ss58-registry\"\nversion = \"1.47.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4743ce898933fbff7bbf414f497c459a782d496269644b3d650a398ae6a487ba\"\ndependencies = [\n \"Inflector\",\n \"num-format\",\n \"proc-macro2\",\n \"quote\",\n \"serde\",\n \"serde_json\",\n \"unicode-xid\",\n]\n\n[[package]]\nname = \"static_assertions\"\nversion = \"1.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a2eb9349b6444b326872e140eb1cf5e7c522154d69e7a0ffb0fb81c06b37543f\"\n\n[[package]]\nname = \"strsim\"\nversion = \"0.10.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"73473c0e59e6d5812c5dfe2a064a6444949f089e20eec9a2e5506596494e4623\"\n\n[[package]]\nname = \"substrate-bip39\"\nversion = \"0.6.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ca58ffd742f693dc13d69bdbb2e642ae239e0053f6aab3b104252892f856700a\"\ndependencies = [\n \"hmac 0.12.1\",\n \"pbkdf2\",\n \"schnorrkel\",\n \"sha2 0.10.8\",\n \"zeroize\",\n]\n\n[[package]]\nname = \"subtle\"\nversion = \"2.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"81cdd64d312baedb58e21336b31bc043b77e01cc99033ce76ef539f78e965ebc\"\n\n[[package]]\nname = \"syn\"\nversion = \"1.0.109\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"72b64191b275b66ffe2469e8af2c1cfe3bafa67b529ead792a6d0160888b4237\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"unicode-ident\",\n]\n\n[[package]]\nname = \"syn\"\nversion = \"2.0.61\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c993ed8ccba56ae856363b1845da7266a7cb78e1d146c8a32d54b45a8b831fc9\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"unicode-ident\",\n]\n\n[[package]]\nname = \"synstructure\"\nversion = \"0.13.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c8af7666ab7b6390ab78131fb5b0fce11d6b7a6951602017c35fa82800708971\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.61\",\n]\n\n[[package]]\nname = \"tap\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"55937e1799185b12863d447f42597ed69d9928686b8d88a1df17376a097d8369\"\n\n[[package]]\nname = \"termcolor\"\nversion = \"1.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"06794f8f6c5c898b3275aebefa6b8a1cb24cd2c6c79397ab15774837a0bc5755\"\ndependencies = [\n \"winapi-util\",\n]\n\n[[package]]\nname = \"thiserror\"\nversion = \"1.0.60\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"579e9083ca58dd9dcf91a9923bb9054071b9ebbd800b342194c9feb0ee89fc18\"\ndependencies = [\n \"thiserror-impl\",\n]\n\n[[package]]\nname = \"thiserror-impl\"\nversion = \"1.0.60\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e2470041c06ec3ac1ab38d0356a6119054dedaea53e12fbefc0de730a1c08524\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.61\",\n]\n\n[[package]]\nname = \"thread_local\"\nversion = \"1.1.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8b9ef9bad013ada3808854ceac7b46812a6465ba368859a37e2100283d2d719c\"\ndependencies = [\n \"cfg-if\",\n \"once_cell\",\n]\n\n[[package]]\nname = \"tinyvec\"\nversion = \"1.6.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"87cc5ceb3875bb20c2890005a4e226a4651264a5c75edb2421b52861a0a0cb50\"\ndependencies = [\n \"tinyvec_macros\",\n]\n\n[[package]]\nname = \"tinyvec_macros\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1f3ccbac311fea05f86f61904b462b55fb3df8837a366dfc601a0161d0532f20\"\n\n[[package]]\nname = \"toml\"\nversion = \"0.8.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e9dd1545e8208b4a5af1aa9bbd0b4cf7e9ea08fabc5d0a5c67fcaafa17433aa3\"\ndependencies = [\n \"serde\",\n \"serde_spanned\",\n \"toml_datetime\",\n \"toml_edit 0.22.12\",\n]\n\n[[package]]\nname = \"toml_datetime\"\nversion = \"0.6.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3550f4e9685620ac18a50ed434eb3aec30db8ba93b0287467bca5826ea25baf1\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"toml_edit\"\nversion = \"0.19.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1b5bb770da30e5cbfde35a2d7b9b8a2c4b8ef89548a7a6aeab5c9a576e3e7421\"\ndependencies = [\n \"indexmap\",\n \"toml_datetime\",\n \"winnow 0.5.40\",\n]\n\n[[package]]\nname = \"toml_edit\"\nversion = \"0.21.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6a8534fd7f78b5405e860340ad6575217ce99f38d4d5c8f2442cb5ecb50090e1\"\ndependencies = [\n \"indexmap\",\n \"toml_datetime\",\n \"winnow 0.5.40\",\n]\n\n[[package]]\nname = \"toml_edit\"\nversion = \"0.22.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d3328d4f68a705b2a4498da1d580585d39a6510f98318a2cec3018a7ec61ddef\"\ndependencies = [\n \"indexmap\",\n \"serde\",\n \"serde_spanned\",\n \"toml_datetime\",\n \"winnow 0.6.8\",\n]\n\n[[package]]\nname = \"tracing\"\nversion = \"0.1.40\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c3523ab5a71916ccf420eebdf5521fcef02141234bbc0b8a49f2fdc4544364ef\"\ndependencies = [\n \"pin-project-lite\",\n \"tracing-attributes\",\n \"tracing-core\",\n]\n\n[[package]]\nname = \"tracing-attributes\"\nversion = \"0.1.27\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"34704c8d6ebcbc939824180af020566b01a7c01f80641264eba0999f6c2b6be7\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.61\",\n]\n\n[[package]]\nname = \"tracing-core\"\nversion = \"0.1.32\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c06d3da6113f116aaee68e4d601191614c9053067f9ab7f6edbcb161237daa54\"\ndependencies = [\n \"once_cell\",\n \"valuable\",\n]\n\n[[package]]\nname = \"tracing-log\"\nversion = \"0.1.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f751112709b4e791d8ce53e32c4ed2d353565a795ce84da2285393f41557bdf2\"\ndependencies = [\n \"log\",\n \"once_cell\",\n \"tracing-core\",\n]\n\n[[package]]\nname = \"tracing-serde\"\nversion = \"0.1.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bc6b213177105856957181934e4920de57730fc69bf42c37ee5bb664d406d9e1\"\ndependencies = [\n \"serde\",\n \"tracing-core\",\n]\n\n[[package]]\nname = \"tracing-subscriber\"\nversion = \"0.2.25\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0e0d2eaa99c3c2e41547cfa109e910a68ea03823cccad4a0525dcbc9b01e8c71\"\ndependencies = [\n \"ansi_term\",\n \"chrono\",\n \"lazy_static\",\n \"matchers\",\n \"regex\",\n \"serde\",\n \"serde_json\",\n \"sharded-slab\",\n \"smallvec\",\n \"thread_local\",\n \"tracing\",\n \"tracing-core\",\n \"tracing-log\",\n \"tracing-serde\",\n]\n\n[[package]]\nname = \"trie-db\"\nversion = \"0.28.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ff28e0f815c2fea41ebddf148e008b077d2faddb026c9555b29696114d602642\"\ndependencies = [\n \"hash-db\",\n \"hashbrown 0.13.2\",\n \"log\",\n \"rustc-hex\",\n \"smallvec\",\n]\n\n[[package]]\nname = \"trie-root\"\nversion = \"0.18.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d4ed310ef5ab98f5fa467900ed906cb9232dd5376597e00fd4cba2a449d06c0b\"\ndependencies = [\n \"hash-db\",\n]\n\n[[package]]\nname = \"twox-hash\"\nversion = \"1.6.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"97fee6b57c6a41524a810daee9286c02d7752c4253064d0b05472833a438f675\"\ndependencies = [\n \"cfg-if\",\n \"digest 0.10.7\",\n \"rand\",\n \"static_assertions\",\n]\n\n[[package]]\nname = \"typenum\"\nversion = \"1.17.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"42ff0bf0c66b8238c6f3b578df37d0b7848e55df8577b3f74f92a69acceeb825\"\n\n[[package]]\nname = \"uint\"\nversion = \"0.9.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"76f64bba2c53b04fcab63c01a7d7427eadc821e3bc48c34dc9ba29c501164b52\"\ndependencies = [\n \"byteorder\",\n \"crunchy\",\n \"hex\",\n \"static_assertions\",\n]\n\n[[package]]\nname = \"unicode-ident\"\nversion = \"1.0.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3354b9ac3fae1ff6755cb6db53683adb661634f67557942dea4facebec0fee4b\"\n\n[[package]]\nname = \"unicode-normalization\"\nversion = \"0.1.22\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5c5713f0fc4b5db668a2ac63cdb7bb4469d8c9fed047b1d0292cc7b0ce2ba921\"\ndependencies = [\n \"tinyvec\",\n]\n\n[[package]]\nname = \"unicode-xid\"\nversion = \"0.2.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f962df74c8c05a667b5ee8bcf162993134c104e96440b663c8daa176dc772d8c\"\n\n[[package]]\nname = \"valuable\"\nversion = \"0.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"830b7e5d4d90034032940e4ace0d9a9a057e7a45cd94e6c007832e39edb82f6d\"\n\n[[package]]\nname = \"vault\"\nversion = \"0.1.0\"\ndependencies = [\n \"ink\",\n \"num-bigint\",\n \"num-traits\",\n \"parity-scale-codec\",\n \"psp22\",\n \"registry\",\n \"scale-info\",\n \"share_token\",\n]\n\n[[package]]\nname = \"version_check\"\nversion = \"0.9.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"49874b5167b65d7193b8aba1567f5c7d93d001cafc34600cee003eda787e483f\"\n\n[[package]]\nname = \"w3f-bls\"\nversion = \"0.1.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7335e4c132c28cc43caef6adb339789e599e39adbe78da0c4d547fad48cbc331\"\ndependencies = [\n \"ark-bls12-377\",\n \"ark-bls12-381\",\n \"ark-ec\",\n \"ark-ff\",\n \"ark-serialize\",\n \"ark-serialize-derive\",\n \"arrayref\",\n \"constcat\",\n \"digest 0.10.7\",\n \"rand\",\n \"rand_chacha\",\n \"rand_core 0.6.4\",\n \"sha2 0.10.8\",\n \"sha3\",\n \"thiserror\",\n \"zeroize\",\n]\n\n[[package]]\nname = \"walkdir\"\nversion = \"2.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"29790946404f91d9c5d06f9874efddea1dc06c5efe94541a7d6863108e3a5e4b\"\ndependencies = [\n \"same-file\",\n \"winapi-util\",\n]\n\n[[package]]\nname = \"wasi\"\nversion = \"0.11.0+wasi-snapshot-preview1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9c8d87e72b64a3b4db28d11ce29237c246188f4f51057d65a7eab63b7987e423\"\n\n[[package]]\nname = \"wasm-bindgen\"\nversion = \"0.2.92\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4be2531df63900aeb2bca0daaaddec08491ee64ceecbee5076636a3b026795a8\"\ndependencies = [\n \"cfg-if\",\n \"wasm-bindgen-macro\",\n]\n\n[[package]]\nname = \"wasm-bindgen-backend\"\nversion = \"0.2.92\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"614d787b966d3989fa7bb98a654e369c762374fd3213d212cfc0251257e747da\"\ndependencies = [\n \"bumpalo\",\n \"log\",\n \"once_cell\",\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.61\",\n \"wasm-bindgen-shared\",\n]\n\n[[package]]\nname = \"wasm-bindgen-macro\"\nversion = \"0.2.92\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a1f8823de937b71b9460c0c34e25f3da88250760bec0ebac694b49997550d726\"\ndependencies = [\n \"quote\",\n \"wasm-bindgen-macro-support\",\n]\n\n[[package]]\nname = \"wasm-bindgen-macro-support\"\nversion = \"0.2.92\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e94f17b526d0a461a191c78ea52bbce64071ed5c04c9ffe424dcb38f74171bb7\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.61\",\n \"wasm-bindgen-backend\",\n \"wasm-bindgen-shared\",\n]\n\n[[package]]\nname = \"wasm-bindgen-shared\"\nversion = \"0.2.92\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"af190c94f2773fdb3729c55b007a722abb5384da03bc0986df4c289bf5567e96\"\n\n[[package]]\nname = \"winapi\"\nversion = \"0.3.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5c839a674fcd7a98952e593242ea400abe93992746761e38641405d28b00f419\"\ndependencies = [\n \"winapi-i686-pc-windows-gnu\",\n \"winapi-x86_64-pc-windows-gnu\",\n]\n\n[[package]]\nname = \"winapi-i686-pc-windows-gnu\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ac3b87c63620426dd9b991e5ce0329eff545bccbbb34f3be09ff6fb6ab51b7b6\"\n\n[[package]]\nname = \"winapi-util\"\nversion = \"0.1.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4d4cc384e1e73b93bafa6fb4f1df8c41695c8a91cf9c4c64358067d15a7b6c6b\"\ndependencies = [\n \"windows-sys\",\n]\n\n[[package]]\nname = \"winapi-x86_64-pc-windows-gnu\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f\"\n\n[[package]]\nname = \"windows-core\"\nversion = \"0.52.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"33ab640c8d7e35bf8ba19b884ba838ceb4fba93a4e8c65a9059d08afcfc683d9\"\ndependencies = [\n \"windows-targets\",\n]\n\n[[package]]\nname = \"windows-sys\"\nversion = \"0.52.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"282be5f36a8ce781fad8c8ae18fa3f9beff57ec1b52cb3de0789201425d9a33d\"\ndependencies = [\n \"windows-targets\",\n]\n\n[[package]]\nname = \"windows-targets\"\nversion = \"0.52.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6f0713a46559409d202e70e28227288446bf7841d3211583a4b53e3f6d96e7eb\"\ndependencies = [\n \"windows_aarch64_gnullvm\",\n \"windows_aarch64_msvc\",\n \"windows_i686_gnu\",\n \"windows_i686_gnullvm\",\n \"windows_i686_msvc\",\n \"windows_x86_64_gnu\",\n \"windows_x86_64_gnullvm\",\n \"windows_x86_64_msvc\",\n]\n\n[[package]]\nname = \"windows_aarch64_gnullvm\"\nversion = \"0.52.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7088eed71e8b8dda258ecc8bac5fb1153c5cffaf2578fc8ff5d61e23578d3263\"\n\n[[package]]\nname = \"windows_aarch64_msvc\"\nversion = \"0.52.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9985fd1504e250c615ca5f281c3f7a6da76213ebd5ccc9561496568a2752afb6\"\n\n[[package]]\nname = \"windows_i686_gnu\"\nversion = \"0.52.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"88ba073cf16d5372720ec942a8ccbf61626074c6d4dd2e745299726ce8b89670\"\n\n[[package]]\nname = \"windows_i686_gnullvm\"\nversion = \"0.52.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"87f4261229030a858f36b459e748ae97545d6f1ec60e5e0d6a3d32e0dc232ee9\"\n\n[[package]]\nname = \"windows_i686_msvc\"\nversion = \"0.52.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"db3c2bf3d13d5b658be73463284eaf12830ac9a26a90c717b7f771dfe97487bf\"\n\n[[package]]\nname = \"windows_x86_64_gnu\"\nversion = \"0.52.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4e4246f76bdeff09eb48875a0fd3e2af6aada79d409d33011886d3e1581517d9\"\n\n[[package]]\nname = \"windows_x86_64_gnullvm\"\nversion = \"0.52.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"852298e482cd67c356ddd9570386e2862b5673c85bd5f88df9ab6802b334c596\"\n\n[[package]]\nname = \"windows_x86_64_msvc\"\nversion = \"0.52.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bec47e5bfd1bff0eeaf6d8b485cc1074891a197ab4225d504cb7a1ab88b02bf0\"\n\n[[package]]\nname = \"winnow\"\nversion = \"0.5.40\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f593a95398737aeed53e489c785df13f3618e41dbcd6718c6addbf1395aa6876\"\ndependencies = [\n \"memchr\",\n]\n\n[[package]]\nname = \"winnow\"\nversion = \"0.6.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c3c52e9c97a68071b23e836c9380edae937f17b9c4667bd021973efc689f618d\"\ndependencies = [\n \"memchr\",\n]\n\n[[package]]\nname = \"wyz\"\nversion = \"0.5.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"05f360fc0b24296329c78fda852a1e9ae82de9cf7b27dae4b7f62f118f77b9ed\"\ndependencies = [\n \"tap\",\n]\n\n[[package]]\nname = \"xxhash-rust\"\nversion = \"0.8.10\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"927da81e25be1e1a2901d59b81b37dd2efd1fc9c9345a55007f09bf5a2d3ee03\"\n\n[[package]]\nname = \"zerocopy\"\nversion = \"0.7.34\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ae87e3fcd617500e5d106f0380cf7b77f3c6092aae37191433159dda23cfb087\"\ndependencies = [\n \"zerocopy-derive\",\n]\n\n[[package]]\nname = \"zerocopy-derive\"\nversion = \"0.7.34\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"15e934569e47891f7d9411f1a451d947a60e000ab3bd24fbb970f000387d1b3b\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.61\",\n]\n\n[[package]]\nname = \"zeroize\"\nversion = \"1.7.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"525b4ec142c6b68a2d10f01f7bbf6755599ca3f81ea53b8431b7dd348f5fdb2d\"\ndependencies = [\n \"zeroize_derive\",\n]\n\n[[package]]\nname = \"zeroize_derive\"\nversion = \"1.4.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ce36e65b0d2999d2aafac989fb249189a141aee1f53c612c1f37d72631959f69\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.61\",\n]\n",
        "Cargo.toml":"[workspace]\n\nresolver = \"1\"\nmembers = [\n    \"src/vault\",\n    \"src/share_token\",\n    \"src/registry\",\n    \"src/nomination_agent\",\n    \"src/mock_nominator\",\n]\nexclude = [\n    \"drink_tests\",\n]\n",
        "drink_tests/Cargo.lock":"# This file is automatically @generated by Cargo.\n# It is not intended for manual editing.\nversion = 3\n\n[[package]]\nname = \"Inflector\"\nversion = \"0.11.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fe438c63458706e03479442743baae6c88256498e6431708f6dfc520a26515d3\"\ndependencies = [\n \"lazy_static\",\n \"regex\",\n]\n\n[[package]]\nname = \"addr2line\"\nversion = \"0.19.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a76fd60b23679b7d19bd066031410fb7e458ccc5e958eb5c325888ce4baedc97\"\ndependencies = [\n \"gimli 0.27.3\",\n]\n\n[[package]]\nname = \"addr2line\"\nversion = \"0.21.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8a30b2e23b9e17a9f90641c7ab1549cd9b44f296d3ccbf309d2863cfe398a0cb\"\ndependencies = [\n \"gimli 0.28.1\",\n]\n\n[[package]]\nname = \"adler\"\nversion = \"1.0.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f26201604c87b1e01bd3d98f8d5d9a8fcbb815e8cedb41ffccbeb4bf593a35fe\"\n\n[[package]]\nname = \"ahash\"\nversion = \"0.7.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"891477e0c6a8957309ee5c45a6368af3ae14bb510732d2684ffa19af310920f9\"\ndependencies = [\n \"getrandom 0.2.15\",\n \"once_cell\",\n \"version_check\",\n]\n\n[[package]]\nname = \"ahash\"\nversion = \"0.8.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e89da841a80418a9b391ebaea17f5c112ffaaa96f621d2c285b5174da76b9011\"\ndependencies = [\n \"cfg-if\",\n \"getrandom 0.2.15\",\n \"once_cell\",\n \"version_check\",\n \"zerocopy\",\n]\n\n[[package]]\nname = \"aho-corasick\"\nversion = \"1.1.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8e60d3430d3a69478ad0993f19238d2df97c507009a52b3c10addcd7f6bcb916\"\ndependencies = [\n \"memchr\",\n]\n\n[[package]]\nname = \"android-tzdata\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e999941b234f3131b00bc13c22d06e8c5ff726d1b6318ac7eb276997bbb4fef0\"\n\n[[package]]\nname = \"android_system_properties\"\nversion = \"0.1.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"819e7219dbd41043ac279b19830f2efc897156490d7fd6ea916720117ee66311\"\ndependencies = [\n \"libc\",\n]\n\n[[package]]\nname = \"ansi_term\"\nversion = \"0.12.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d52a9bb7ec0cf484c551830a7ce27bd20d67eac647e1befb56b0be4ee39a55d2\"\ndependencies = [\n \"winapi\",\n]\n\n[[package]]\nname = \"anstream\"\nversion = \"0.6.14\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"418c75fa768af9c03be99d17643f93f79bbba589895012a80e3452a19ddda15b\"\ndependencies = [\n \"anstyle\",\n \"anstyle-parse\",\n \"anstyle-query\",\n \"anstyle-wincon\",\n \"colorchoice\",\n \"is_terminal_polyfill\",\n \"utf8parse\",\n]\n\n[[package]]\nname = \"anstyle\"\nversion = \"1.0.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"038dfcf04a5feb68e9c60b21c9625a54c2c0616e79b72b0fd87075a056ae1d1b\"\n\n[[package]]\nname = \"anstyle-parse\"\nversion = \"0.2.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c03a11a9034d92058ceb6ee011ce58af4a9bf61491aa7e1e59ecd24bd40d22d4\"\ndependencies = [\n \"utf8parse\",\n]\n\n[[package]]\nname = \"anstyle-query\"\nversion = \"1.0.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a64c907d4e79225ac72e2a354c9ce84d50ebb4586dee56c82b3ee73004f537f5\"\ndependencies = [\n \"windows-sys 0.52.0\",\n]\n\n[[package]]\nname = \"anstyle-wincon\"\nversion = \"3.0.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"61a38449feb7068f52bb06c12759005cf459ee52bb4adc1d5a7c4322d716fb19\"\ndependencies = [\n \"anstyle\",\n \"windows-sys 0.52.0\",\n]\n\n[[package]]\nname = \"anyhow\"\nversion = \"1.0.83\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"25bdb32cbbdce2b519a9cd7df3a678443100e265d5e25ca763b7572a5104f5f3\"\n\n[[package]]\nname = \"approx\"\nversion = \"0.5.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cab112f0a86d568ea0e627cc1d6be74a1e9cd55214684db5561995f6dad897c6\"\ndependencies = [\n \"num-traits\",\n]\n\n[[package]]\nname = \"aquamarine\"\nversion = \"0.3.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d1da02abba9f9063d786eab1509833ebb2fac0f966862ca59439c76b9c566760\"\ndependencies = [\n \"include_dir\",\n \"itertools\",\n \"proc-macro-error\",\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"array-bytes\"\nversion = \"6.2.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6f840fb7195bcfc5e17ea40c26e5ce6d5b9ce5d584466e17703209657e459ae0\"\n\n[[package]]\nname = \"arrayref\"\nversion = \"0.3.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6b4930d2cb77ce62f89ee5d5289b4ac049559b1c45539271f5ed4fdc7db34545\"\n\n[[package]]\nname = \"arrayvec\"\nversion = \"0.5.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"23b62fc65de8e4e7f52534fb52b0f3ed04746ae267519eef2a83941e8085068b\"\n\n[[package]]\nname = \"arrayvec\"\nversion = \"0.7.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"96d30a06541fbafbc7f82ed10c06164cfbd2c401138f6addd8404629c4b16711\"\n\n[[package]]\nname = \"async-trait\"\nversion = \"0.1.80\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c6fa2087f2753a7da8cc1c0dbfcf89579dd57458e36769de5ac750b4671737ca\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.61\",\n]\n\n[[package]]\nname = \"autocfg\"\nversion = \"1.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0c4b4d0bd25bd0b74681c0ad21497610ce1b7c91b1022cd21c80c6fbdd9476b0\"\n\n[[package]]\nname = \"backtrace\"\nversion = \"0.3.71\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"26b05800d2e817c8b3b4b54abd461726265fa9789ae34330622f2db9ee696f9d\"\ndependencies = [\n \"addr2line 0.21.0\",\n \"cc\",\n \"cfg-if\",\n \"libc\",\n \"miniz_oxide\",\n \"object 0.32.2\",\n \"rustc-demangle\",\n]\n\n[[package]]\nname = \"base16ct\"\nversion = \"0.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4c7f02d4ea65f2c1853089ffd8d2787bdbc63de2f0d29dedbcf8ccdfa0ccd4cf\"\n\n[[package]]\nname = \"base58\"\nversion = \"0.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6107fe1be6682a68940da878d9e9f5e90ca5745b3dec9fd1bb393c8777d4f581\"\n\n[[package]]\nname = \"base64\"\nversion = \"0.13.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9e1b586273c5702936fe7b7d6896644d8be71e6314cfe09d3167c95f712589e8\"\n\n[[package]]\nname = \"base64ct\"\nversion = \"1.6.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8c3c1a368f70d6cf7302d78f8f7093da241fb8e8807c05cc9e51a125895a6d5b\"\n\n[[package]]\nname = \"bincode\"\nversion = \"1.3.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b1f45e9417d87227c7a56d22e471c6206462cba514c7590c09aff4cf6d1ddcad\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"bitflags\"\nversion = \"1.3.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bef38d45163c2f1dde094a7dfd33ccf595c92905c8f8f4fdc18d06fb1037718a\"\n\n[[package]]\nname = \"bitflags\"\nversion = \"2.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cf4b9d6a944f767f8e5e0db018570623c85f3d925ac718db4e06d0187adb21c1\"\n\n[[package]]\nname = \"bitvec\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1bc2832c24239b0141d5674bb9174f9d68a8b5b3f2753311927c172ca46f7e9c\"\ndependencies = [\n \"funty\",\n \"radium\",\n \"tap\",\n \"wyz\",\n]\n\n[[package]]\nname = \"blake2\"\nversion = \"0.10.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"46502ad458c9a52b69d4d4d32775c788b7a1b85e8bc9d482d92250fc0e3f8efe\"\ndependencies = [\n \"digest 0.10.7\",\n]\n\n[[package]]\nname = \"blake2b_simd\"\nversion = \"1.0.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"23285ad32269793932e830392f2fe2f83e26488fd3ec778883a93c8323735780\"\ndependencies = [\n \"arrayref\",\n \"arrayvec 0.7.4\",\n \"constant_time_eq\",\n]\n\n[[package]]\nname = \"block-buffer\"\nversion = \"0.7.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c0940dc441f31689269e10ac70eb1002a3a1d3ad1390e030043662eb7fe4688b\"\ndependencies = [\n \"block-padding\",\n \"byte-tools\",\n \"byteorder\",\n \"generic-array 0.12.4\",\n]\n\n[[package]]\nname = \"block-buffer\"\nversion = \"0.9.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4152116fd6e9dadb291ae18fc1ec3575ed6d84c29642d97890f4b4a3417297e4\"\ndependencies = [\n \"generic-array 0.14.7\",\n]\n\n[[package]]\nname = \"block-buffer\"\nversion = \"0.10.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3078c7629b62d3f0439517fa394996acacc5cbc91c5a20d8c658e77abd503a71\"\ndependencies = [\n \"generic-array 0.14.7\",\n]\n\n[[package]]\nname = \"block-padding\"\nversion = \"0.1.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fa79dedbb091f449f1f39e53edf88d5dbe95f895dae6135a8d7b881fb5af73f5\"\ndependencies = [\n \"byte-tools\",\n]\n\n[[package]]\nname = \"bounded-collections\"\nversion = \"0.1.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ca548b6163b872067dc5eb82fd130c56881435e30367d2073594a3d9744120dd\"\ndependencies = [\n \"log\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"serde\",\n]\n\n[[package]]\nname = \"brownstone\"\nversion = \"1.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"030ea61398f34f1395ccbeb046fb68c87b631d1f34567fed0f0f11fa35d18d8d\"\ndependencies = [\n \"arrayvec 0.7.4\",\n]\n\n[[package]]\nname = \"bs58\"\nversion = \"0.5.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bf88ba1141d185c399bee5288d850d63b8369520c1eafc32a0430b5b6c287bf4\"\ndependencies = [\n \"tinyvec\",\n]\n\n[[package]]\nname = \"bumpalo\"\nversion = \"3.16.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"79296716171880943b8470b5f8d03aa55eb2e645a4874bdbb28adb49162e012c\"\n\n[[package]]\nname = \"byte-slice-cast\"\nversion = \"1.2.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c3ac9f8b63eca6fd385229b3675f6cc0dc5c8a5c8a54a59d4f52ffd670d87b0c\"\n\n[[package]]\nname = \"byte-tools\"\nversion = \"0.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e3b5ca7a04898ad4bcd41c90c5285445ff5b791899bb1b0abdd2a2aa791211d7\"\n\n[[package]]\nname = \"bytemuck\"\nversion = \"1.15.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5d6d68c57235a3a081186990eca2867354726650f42f7516ca50c28d6281fd15\"\n\n[[package]]\nname = \"byteorder\"\nversion = \"1.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1fd0f2584146f6f2ef48085050886acf353beff7305ebd1ae69500e27c67f64b\"\n\n[[package]]\nname = \"bytes\"\nversion = \"1.6.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"514de17de45fdb8dc022b1a7975556c53c86f9f0aa5f534b98977b171857c2c9\"\n\n[[package]]\nname = \"camino\"\nversion = \"1.1.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c59e92b5a388f549b863a7bea62612c09f24c8393560709a54558a9abdfb3b9c\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"cargo-platform\"\nversion = \"0.1.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"24b1f0365a6c6bb4020cd05806fd0d33c44d38046b8bd7f0e40814b9763cabfc\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"cargo_metadata\"\nversion = \"0.15.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"eee4243f1f26fc7a42710e7439c149e2b10b05472f88090acce52632f231a73a\"\ndependencies = [\n \"camino\",\n \"cargo-platform\",\n \"semver\",\n \"serde\",\n \"serde_json\",\n \"thiserror\",\n]\n\n[[package]]\nname = \"cargo_metadata\"\nversion = \"0.18.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2d886547e41f740c616ae73108f6eb70afe6d940c7bc697cb30f13daec073037\"\ndependencies = [\n \"camino\",\n \"cargo-platform\",\n \"semver\",\n \"serde\",\n \"serde_json\",\n \"thiserror\",\n]\n\n[[package]]\nname = \"cc\"\nversion = \"1.0.97\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"099a5357d84c4c61eb35fc8eafa9a79a902c2f76911e5747ced4e032edd8d9b4\"\ndependencies = [\n \"jobserver\",\n \"libc\",\n \"once_cell\",\n]\n\n[[package]]\nname = \"cfg-expr\"\nversion = \"0.15.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d067ad48b8650848b989a59a86c6c36a995d02d2bf778d45c3c5d57bc2718f02\"\ndependencies = [\n \"smallvec\",\n]\n\n[[package]]\nname = \"cfg-if\"\nversion = \"1.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd\"\n\n[[package]]\nname = \"chrono\"\nversion = \"0.4.38\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a21f936df1771bf62b77f047b726c4625ff2e8aa607c01ec06e5a05bd8463401\"\ndependencies = [\n \"android-tzdata\",\n \"iana-time-zone\",\n \"num-traits\",\n \"windows-targets 0.52.5\",\n]\n\n[[package]]\nname = \"clap\"\nversion = \"4.5.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"90bc066a67923782aa8515dbaea16946c5bcc5addbd668bb80af688e53e548a0\"\ndependencies = [\n \"clap_builder\",\n \"clap_derive\",\n]\n\n[[package]]\nname = \"clap_builder\"\nversion = \"4.5.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ae129e2e766ae0ec03484e609954119f123cc1fe650337e155d03b022f24f7b4\"\ndependencies = [\n \"anstream\",\n \"anstyle\",\n \"clap_lex\",\n \"strsim 0.11.1\",\n]\n\n[[package]]\nname = \"clap_derive\"\nversion = \"4.5.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"528131438037fd55894f62d6e9f068b8f45ac57ffa77517819645d10aed04f64\"\ndependencies = [\n \"heck 0.5.0\",\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.61\",\n]\n\n[[package]]\nname = \"clap_lex\"\nversion = \"0.7.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"98cc8fbded0c607b7ba9dd60cd98df59af97e84d24e49c8557331cfc26d301ce\"\n\n[[package]]\nname = \"codespan-reporting\"\nversion = \"0.11.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3538270d33cc669650c4b093848450d380def10c331d38c768e34cac80576e6e\"\ndependencies = [\n \"termcolor\",\n \"unicode-width\",\n]\n\n[[package]]\nname = \"colorchoice\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0b6a852b24ab71dffc585bcb46eaf7959d175cb865a7152e35b348d1b2960422\"\n\n[[package]]\nname = \"colored\"\nversion = \"2.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cbf2150cce219b664a8a70df7a1f933836724b503f8a413af9365b4dcc4d90b8\"\ndependencies = [\n \"lazy_static\",\n \"windows-sys 0.48.0\",\n]\n\n[[package]]\nname = \"common-path\"\nversion = \"1.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2382f75942f4b3be3690fe4f86365e9c853c1587d6ee58212cebf6e2a9ccd101\"\n\n[[package]]\nname = \"const-oid\"\nversion = \"0.9.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c2459377285ad874054d797f3ccebf984978aa39129f6eafde5cdc8315b612f8\"\n\n[[package]]\nname = \"const-random\"\nversion = \"0.1.18\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"87e00182fe74b066627d63b85fd550ac2998d4b0bd86bfed477a0ae4c7c71359\"\ndependencies = [\n \"const-random-macro\",\n]\n\n[[package]]\nname = \"const-random-macro\"\nversion = \"0.1.16\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f9d839f2a20b0aee515dc581a6172f2321f96cab76c1a38a4c584a194955390e\"\ndependencies = [\n \"getrandom 0.2.15\",\n \"once_cell\",\n \"tiny-keccak\",\n]\n\n[[package]]\nname = \"constant_time_eq\"\nversion = \"0.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f7144d30dcf0fafbce74250a3963025d8d52177934239851c917d29f1df280c2\"\n\n[[package]]\nname = \"contract-build\"\nversion = \"3.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ae1c9e0b024481d35d46e1043323ec8c1dc8b57f4a08c4ee5392c2aefb75859b\"\ndependencies = [\n \"anyhow\",\n \"blake2\",\n \"cargo_metadata 0.15.4\",\n \"clap\",\n \"colored\",\n \"contract-metadata\",\n \"duct\",\n \"heck 0.4.1\",\n \"hex\",\n \"impl-serde\",\n \"parity-scale-codec\",\n \"parity-wasm\",\n \"rustc_version\",\n \"semver\",\n \"serde\",\n \"serde_json\",\n \"strum\",\n \"tempfile\",\n \"term_size\",\n \"toml 0.7.8\",\n \"tracing\",\n \"url\",\n \"walkdir\",\n \"wasm-opt\",\n \"which\",\n \"zip\",\n]\n\n[[package]]\nname = \"contract-metadata\"\nversion = \"3.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"39a88f62795e84270742796456086ddeebfa4cbd4e56f02777f792192d666725\"\ndependencies = [\n \"anyhow\",\n \"impl-serde\",\n \"semver\",\n \"serde\",\n \"serde_json\",\n \"url\",\n]\n\n[[package]]\nname = \"contract-transcode\"\nversion = \"3.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"91279ca8e8a05dec90febb12a9529b310018c623adaebe691d9b2e8cc115a182\"\ndependencies = [\n \"anyhow\",\n \"base58\",\n \"blake2\",\n \"contract-metadata\",\n \"escape8259\",\n \"hex\",\n \"indexmap 1.9.3\",\n \"ink_env\",\n \"ink_metadata\",\n \"itertools\",\n \"nom\",\n \"nom-supreme\",\n \"parity-scale-codec\",\n \"primitive-types\",\n \"scale-info\",\n \"serde\",\n \"serde_json\",\n \"thiserror\",\n \"tracing\",\n]\n\n[[package]]\nname = \"convert_case\"\nversion = \"0.6.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ec182b0ca2f35d8fc196cf3404988fd8b8c739a4d270ff118a398feb0cbec1ca\"\ndependencies = [\n \"unicode-segmentation\",\n]\n\n[[package]]\nname = \"core-foundation-sys\"\nversion = \"0.8.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"06ea2b9bc92be3c2baa9334a323ebca2d6f074ff852cd1d7b11064035cd3868f\"\n\n[[package]]\nname = \"cpp_demangle\"\nversion = \"0.3.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"eeaa953eaad386a53111e47172c2fedba671e5684c8dd601a5f474f4f118710f\"\ndependencies = [\n \"cfg-if\",\n]\n\n[[package]]\nname = \"cpufeatures\"\nversion = \"0.2.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"53fe5e26ff1b7aef8bca9c6080520cfb8d9333c7568e1829cef191a9723e5504\"\ndependencies = [\n \"libc\",\n]\n\n[[package]]\nname = \"cranelift-entity\"\nversion = \"0.95.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"40099d38061b37e505e63f89bab52199037a72b931ad4868d9089ff7268660b0\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"crc32fast\"\nversion = \"1.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b3855a8a784b474f333699ef2bbca9db2c4a1f6d9088a90a2d25b1eb53111eaa\"\ndependencies = [\n \"cfg-if\",\n]\n\n[[package]]\nname = \"crossbeam-utils\"\nversion = \"0.8.19\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"248e3bacc7dc6baa3b21e405ee045c3047101a49145e7e9eca583ab4c2ca5345\"\n\n[[package]]\nname = \"crunchy\"\nversion = \"0.2.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7a81dae078cea95a014a339291cec439d2f232ebe854a9d672b796c6afafa9b7\"\n\n[[package]]\nname = \"crypto-bigint\"\nversion = \"0.5.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0dc92fb57ca44df6db8059111ab3af99a63d5d0f8375d9972e319a379c6bab76\"\ndependencies = [\n \"generic-array 0.14.7\",\n \"rand_core 0.6.4\",\n \"subtle\",\n \"zeroize\",\n]\n\n[[package]]\nname = \"crypto-common\"\nversion = \"0.1.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1bfb12502f3fc46cca1bb51ac28df9d618d813cdc3d2f25b9fe775a34af26bb3\"\ndependencies = [\n \"generic-array 0.14.7\",\n \"typenum\",\n]\n\n[[package]]\nname = \"crypto-mac\"\nversion = \"0.8.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b584a330336237c1eecd3e94266efb216c56ed91225d634cb2991c5f3fd1aeab\"\ndependencies = [\n \"generic-array 0.14.7\",\n \"subtle\",\n]\n\n[[package]]\nname = \"crypto-mac\"\nversion = \"0.11.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b1d1a86f49236c215f271d40892d5fc950490551400b02ef360692c29815c714\"\ndependencies = [\n \"generic-array 0.14.7\",\n \"subtle\",\n]\n\n[[package]]\nname = \"curve25519-dalek\"\nversion = \"2.1.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4a9b85542f99a2dfa2a1b8e192662741c9859a846b296bef1c92ef9b58b5a216\"\ndependencies = [\n \"byteorder\",\n \"digest 0.8.1\",\n \"rand_core 0.5.1\",\n \"subtle\",\n \"zeroize\",\n]\n\n[[package]]\nname = \"curve25519-dalek\"\nversion = \"3.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0b9fdf9972b2bd6af2d913799d9ebc165ea4d2e65878e329d9c6b372c4491b61\"\ndependencies = [\n \"byteorder\",\n \"digest 0.9.0\",\n \"rand_core 0.5.1\",\n \"subtle\",\n \"zeroize\",\n]\n\n[[package]]\nname = \"curve25519-dalek\"\nversion = \"4.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0a677b8922c94e01bdbb12126b0bc852f00447528dee1782229af9c720c3f348\"\ndependencies = [\n \"cfg-if\",\n \"cpufeatures\",\n \"curve25519-dalek-derive\",\n \"digest 0.10.7\",\n \"fiat-crypto\",\n \"platforms\",\n \"rustc_version\",\n \"subtle\",\n \"zeroize\",\n]\n\n[[package]]\nname = \"curve25519-dalek-derive\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f46882e17999c6cc590af592290432be3bce0428cb0d5f8b6715e4dc7b383eb3\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.61\",\n]\n\n[[package]]\nname = \"cxx\"\nversion = \"1.0.122\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bb497fad022245b29c2a0351df572e2d67c1046bcef2260ebc022aec81efea82\"\ndependencies = [\n \"cc\",\n \"cxxbridge-flags\",\n \"cxxbridge-macro\",\n \"link-cplusplus\",\n]\n\n[[package]]\nname = \"cxx-build\"\nversion = \"1.0.122\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9327c7f9fbd6329a200a5d4aa6f674c60ab256525ff0084b52a889d4e4c60cee\"\ndependencies = [\n \"cc\",\n \"codespan-reporting\",\n \"once_cell\",\n \"proc-macro2\",\n \"quote\",\n \"scratch\",\n \"syn 2.0.61\",\n]\n\n[[package]]\nname = \"cxxbridge-flags\"\nversion = \"1.0.122\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"688c799a4a846f1c0acb9f36bb9c6272d9b3d9457f3633c7753c6057270df13c\"\n\n[[package]]\nname = \"cxxbridge-macro\"\nversion = \"1.0.122\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"928bc249a7e3cd554fd2e8e08a426e9670c50bbfc9a621653cfa9accc9641783\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.61\",\n]\n\n[[package]]\nname = \"darling\"\nversion = \"0.14.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7b750cb3417fd1b327431a470f388520309479ab0bf5e323505daf0290cd3850\"\ndependencies = [\n \"darling_core\",\n \"darling_macro\",\n]\n\n[[package]]\nname = \"darling_core\"\nversion = \"0.14.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"109c1ca6e6b7f82cc233a97004ea8ed7ca123a9af07a8230878fcfda9b158bf0\"\ndependencies = [\n \"fnv\",\n \"ident_case\",\n \"proc-macro2\",\n \"quote\",\n \"strsim 0.10.0\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"darling_macro\"\nversion = \"0.14.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a4aab4dbc9f7611d8b55048a3a16d2d010c2c8334e46304b40ac1cc14bf3b48e\"\ndependencies = [\n \"darling_core\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"der\"\nversion = \"0.7.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f55bf8e7b65898637379c1b74eb1551107c8294ed26d855ceb9fd1a09cfc9bc0\"\ndependencies = [\n \"const-oid\",\n \"zeroize\",\n]\n\n[[package]]\nname = \"derive-syn-parse\"\nversion = \"0.1.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e79116f119dd1dba1abf1f3405f03b9b0e79a27a3883864bfebded8a3dc768cd\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"derive-syn-parse\"\nversion = \"0.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d65d7ce8132b7c0e54497a4d9a55a1c2a0912a0d786cf894472ba818fba45762\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.61\",\n]\n\n[[package]]\nname = \"derive_more\"\nversion = \"0.99.17\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4fb810d30a7c1953f91334de7244731fc3f3c10d7fe163338a35b9f640960321\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"digest\"\nversion = \"0.8.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f3d0c8c8752312f9713efd397ff63acb9f85585afbf179282e720e7704954dd5\"\ndependencies = [\n \"generic-array 0.12.4\",\n]\n\n[[package]]\nname = \"digest\"\nversion = \"0.9.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d3dd60d1080a57a05ab032377049e0591415d2b31afd7028356dbf3cc6dcb066\"\ndependencies = [\n \"generic-array 0.14.7\",\n]\n\n[[package]]\nname = \"digest\"\nversion = \"0.10.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9ed9a281f7bc9b7576e61468ba615a66a5c8cfdff42420a70aa82701a3b1e292\"\ndependencies = [\n \"block-buffer 0.10.4\",\n \"const-oid\",\n \"crypto-common\",\n \"subtle\",\n]\n\n[[package]]\nname = \"docify\"\nversion = \"0.2.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"43a2f138ad521dc4a2ced1a4576148a6a610b4c5923933b062a263130a6802ce\"\ndependencies = [\n \"docify_macros\",\n]\n\n[[package]]\nname = \"docify_macros\"\nversion = \"0.2.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1a081e51fb188742f5a7a1164ad752121abcb22874b21e2c3b0dd040c515fdad\"\ndependencies = [\n \"common-path\",\n \"derive-syn-parse 0.2.0\",\n \"once_cell\",\n \"proc-macro2\",\n \"quote\",\n \"regex\",\n \"syn 2.0.61\",\n \"termcolor\",\n \"toml 0.8.12\",\n \"walkdir\",\n]\n\n[[package]]\nname = \"downcast-rs\"\nversion = \"1.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"75b325c5dbd37f80359721ad39aca5a29fb04c89279657cffdda8736d0c0b9d2\"\n\n[[package]]\nname = \"drink\"\nversion = \"0.5.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bfe3eb863bc97a945ad04d9fa5e10b14143ed87c7a0f6750e7982367bfabc399\"\ndependencies = [\n \"contract-metadata\",\n \"contract-transcode\",\n \"drink-test-macro\",\n \"frame-metadata\",\n \"frame-support\",\n \"frame-system\",\n \"pallet-balances\",\n \"pallet-contracts-for-drink\",\n \"pallet-contracts-primitives\",\n \"pallet-timestamp\",\n \"parity-scale-codec\",\n \"parity-scale-codec-derive\",\n \"scale-info\",\n \"serde_json\",\n \"sp-externalities\",\n \"sp-io\",\n \"sp-runtime-interface\",\n \"thiserror\",\n \"wat\",\n]\n\n[[package]]\nname = \"drink-test-macro\"\nversion = \"0.5.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a50ca41a190300e1f6608587a8ca8824b973cc7e726a74364241f0b9eef3b8d6\"\ndependencies = [\n \"cargo_metadata 0.18.1\",\n \"contract-build\",\n \"contract-metadata\",\n \"convert_case\",\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.61\",\n]\n\n[[package]]\nname = \"drink_test\"\nversion = \"0.1.0\"\ndependencies = [\n \"drink\",\n \"parity-scale-codec\",\n \"serde\",\n \"serde_json\",\n]\n\n[[package]]\nname = \"duct\"\nversion = \"0.13.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e4ab5718d1224b63252cd0c6f74f6480f9ffeb117438a2e0f5cf6d9a4798929c\"\ndependencies = [\n \"libc\",\n \"once_cell\",\n \"os_pipe\",\n \"shared_child\",\n]\n\n[[package]]\nname = \"dyn-clonable\"\nversion = \"0.9.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4e9232f0e607a262ceb9bd5141a3dfb3e4db6994b31989bbfd845878cba59fd4\"\ndependencies = [\n \"dyn-clonable-impl\",\n \"dyn-clone\",\n]\n\n[[package]]\nname = \"dyn-clonable-impl\"\nversion = \"0.9.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"558e40ea573c374cf53507fd240b7ee2f5477df7cfebdb97323ec61c719399c5\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"dyn-clone\"\nversion = \"1.0.17\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0d6ef0072f8a535281e4876be788938b528e9a1d43900b82c2569af7da799125\"\n\n[[package]]\nname = \"ecdsa\"\nversion = \"0.16.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ee27f32b5c5292967d2d4a9d7f1e0b0aed2c15daded5a60300e4abb9d8020bca\"\ndependencies = [\n \"der\",\n \"digest 0.10.7\",\n \"elliptic-curve\",\n \"rfc6979\",\n \"signature\",\n \"spki\",\n]\n\n[[package]]\nname = \"ed25519\"\nversion = \"2.2.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"115531babc129696a58c64a4fef0a8bf9e9698629fb97e9e40767d235cfbcd53\"\ndependencies = [\n \"signature\",\n]\n\n[[package]]\nname = \"ed25519-dalek\"\nversion = \"2.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4a3daa8e81a3963a60642bcc1f90a670680bd4a77535faa384e9d1c79d620871\"\ndependencies = [\n \"curve25519-dalek 4.1.2\",\n \"ed25519\",\n \"sha2 0.10.8\",\n \"subtle\",\n]\n\n[[package]]\nname = \"ed25519-zebra\"\nversion = \"3.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7c24f403d068ad0b359e577a77f92392118be3f3c927538f2bb544a5ecd828c6\"\ndependencies = [\n \"curve25519-dalek 3.2.0\",\n \"hashbrown 0.12.3\",\n \"hex\",\n \"rand_core 0.6.4\",\n \"sha2 0.9.9\",\n \"zeroize\",\n]\n\n[[package]]\nname = \"either\"\nversion = \"1.11.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a47c1c47d2f5964e29c61246e81db715514cd532db6b5116a25ea3c03d6780a2\"\n\n[[package]]\nname = \"elliptic-curve\"\nversion = \"0.13.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b5e6043086bf7973472e0c7dff2142ea0b680d30e18d9cc40f267efbf222bd47\"\ndependencies = [\n \"base16ct\",\n \"crypto-bigint\",\n \"digest 0.10.7\",\n \"ff\",\n \"generic-array 0.14.7\",\n \"group\",\n \"pkcs8\",\n \"rand_core 0.6.4\",\n \"sec1\",\n \"subtle\",\n \"zeroize\",\n]\n\n[[package]]\nname = \"environmental\"\nversion = \"1.1.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e48c92028aaa870e83d51c64e5d4e0b6981b360c522198c23959f219a4e1b15b\"\n\n[[package]]\nname = \"equivalent\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5443807d6dff69373d433ab9ef5378ad8df50ca6298caf15de6e52e24aaf54d5\"\n\n[[package]]\nname = \"errno\"\nversion = \"0.3.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"534c5cf6194dfab3db3242765c03bbe257cf92f22b38f6bc0c58d59108a820ba\"\ndependencies = [\n \"libc\",\n \"windows-sys 0.52.0\",\n]\n\n[[package]]\nname = \"escape8259\"\nversion = \"0.5.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ba4f4911e3666fcd7826997b4745c8224295a6f3072f1418c3067b97a67557ee\"\ndependencies = [\n \"rustversion\",\n]\n\n[[package]]\nname = \"expander\"\nversion = \"2.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"00e83c02035136f1592a47964ea60c05a50e4ed8b5892cfac197063850898d4d\"\ndependencies = [\n \"blake2\",\n \"fs-err\",\n \"prettier-please\",\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.61\",\n]\n\n[[package]]\nname = \"fake-simd\"\nversion = \"0.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e88a8acf291dafb59c2d96e8f59828f3838bb1a70398823ade51a84de6a6deed\"\n\n[[package]]\nname = \"fallible-iterator\"\nversion = \"0.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4443176a9f2c162692bd3d352d745ef9413eec5782a80d8fd6f8a1ac692a07f7\"\n\n[[package]]\nname = \"fastrand\"\nversion = \"2.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9fc0510504f03c51ada170672ac806f1f105a88aa97a5281117e1ddc3368e51a\"\n\n[[package]]\nname = \"ff\"\nversion = \"0.13.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ded41244b729663b1e574f1b4fb731469f69f79c17667b5d776b16cda0479449\"\ndependencies = [\n \"rand_core 0.6.4\",\n \"subtle\",\n]\n\n[[package]]\nname = \"fiat-crypto\"\nversion = \"0.2.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"38793c55593b33412e3ae40c2c9781ffaa6f438f6f8c10f24e71846fbd7ae01e\"\n\n[[package]]\nname = \"fixed-hash\"\nversion = \"0.8.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"835c052cb0c08c1acf6ffd71c022172e18723949c8282f2b9f27efbc51e64534\"\ndependencies = [\n \"byteorder\",\n \"rand 0.8.5\",\n \"rustc-hex\",\n \"static_assertions\",\n]\n\n[[package]]\nname = \"fnv\"\nversion = \"1.0.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3f9eec918d3f24069decb9af1554cad7c880e2da24a9afd88aca000531ab82c1\"\n\n[[package]]\nname = \"form_urlencoded\"\nversion = \"1.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e13624c2627564efccf4934284bdd98cbaa14e79b0b5a141218e507b3a823456\"\ndependencies = [\n \"percent-encoding\",\n]\n\n[[package]]\nname = \"frame-benchmarking\"\nversion = \"23.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"949ba5b5c9d552c37d7ad39bd837394c1d21727281ef32882539bc2ec6687b2d\"\ndependencies = [\n \"frame-support\",\n \"frame-support-procedural\",\n \"frame-system\",\n \"linregress\",\n \"log\",\n \"parity-scale-codec\",\n \"paste\",\n \"scale-info\",\n \"serde\",\n \"sp-api\",\n \"sp-application-crypto\",\n \"sp-core\",\n \"sp-io\",\n \"sp-runtime\",\n \"sp-runtime-interface\",\n \"sp-std\",\n \"sp-storage\",\n \"static_assertions\",\n]\n\n[[package]]\nname = \"frame-metadata\"\nversion = \"16.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"87cf1549fba25a6fcac22785b61698317d958e96cac72a59102ea45b9ae64692\"\ndependencies = [\n \"cfg-if\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"serde\",\n]\n\n[[package]]\nname = \"frame-support\"\nversion = \"23.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"609125451f5ffb1675998e07e64e05e4b3dad330b1537952ace5897d6ed24f0a\"\ndependencies = [\n \"aquamarine\",\n \"bitflags 1.3.2\",\n \"docify\",\n \"environmental\",\n \"frame-metadata\",\n \"frame-support-procedural\",\n \"impl-trait-for-tuples\",\n \"k256\",\n \"log\",\n \"macro_magic\",\n \"parity-scale-codec\",\n \"paste\",\n \"scale-info\",\n \"serde\",\n \"serde_json\",\n \"smallvec\",\n \"sp-api\",\n \"sp-arithmetic\",\n \"sp-core\",\n \"sp-core-hashing-proc-macro\",\n \"sp-debug-derive\",\n \"sp-genesis-builder\",\n \"sp-inherents\",\n \"sp-io\",\n \"sp-metadata-ir\",\n \"sp-runtime\",\n \"sp-staking\",\n \"sp-state-machine\",\n \"sp-std\",\n \"sp-tracing\",\n \"sp-weights\",\n \"static_assertions\",\n \"tt-call\",\n]\n\n[[package]]\nname = \"frame-support-procedural\"\nversion = \"18.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cd22a1ed96e765ec763bbaef2089ed8bb5f8539df40181ddac57be7be74685c7\"\ndependencies = [\n \"Inflector\",\n \"cfg-expr\",\n \"derive-syn-parse 0.1.5\",\n \"expander\",\n \"frame-support-procedural-tools\",\n \"itertools\",\n \"macro_magic\",\n \"proc-macro-warning\",\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.61\",\n]\n\n[[package]]\nname = \"frame-support-procedural-tools\"\nversion = \"7.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"82858452d9332de312f5ff411fd8aecee2323a344b241078f565b8c3c2e47d38\"\ndependencies = [\n \"frame-support-procedural-tools-derive\",\n \"proc-macro-crate 1.3.1\",\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.61\",\n]\n\n[[package]]\nname = \"frame-support-procedural-tools-derive\"\nversion = \"8.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a4c7a09be6bd676fc01c5dd5ba057ba1f7e492e071d4a5fd7c579d99a96093d6\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.61\",\n]\n\n[[package]]\nname = \"frame-system\"\nversion = \"23.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"40dc2f4182ad4c05275b0d3f38e3e74bd1cd17231f28ce1e879177fd9829887c\"\ndependencies = [\n \"cfg-if\",\n \"frame-support\",\n \"log\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"serde\",\n \"sp-core\",\n \"sp-io\",\n \"sp-runtime\",\n \"sp-std\",\n \"sp-version\",\n \"sp-weights\",\n]\n\n[[package]]\nname = \"fs-err\"\nversion = \"2.11.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"88a41f105fe1d5b6b34b2055e3dc59bb79b46b48b2040b9e6c7b4b5de097aa41\"\ndependencies = [\n \"autocfg\",\n]\n\n[[package]]\nname = \"funty\"\nversion = \"2.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e6d5a32815ae3f33302d95fdcb2ce17862f8c65363dcfd29360480ba1001fc9c\"\n\n[[package]]\nname = \"futures\"\nversion = \"0.3.30\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"645c6916888f6cb6350d2550b80fb63e734897a8498abe35cfb732b6487804b0\"\ndependencies = [\n \"futures-channel\",\n \"futures-core\",\n \"futures-executor\",\n \"futures-io\",\n \"futures-sink\",\n \"futures-task\",\n \"futures-util\",\n]\n\n[[package]]\nname = \"futures-channel\"\nversion = \"0.3.30\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"eac8f7d7865dcb88bd4373ab671c8cf4508703796caa2b1985a9ca867b3fcb78\"\ndependencies = [\n \"futures-core\",\n \"futures-sink\",\n]\n\n[[package]]\nname = \"futures-core\"\nversion = \"0.3.30\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"dfc6580bb841c5a68e9ef15c77ccc837b40a7504914d52e47b8b0e9bbda25a1d\"\n\n[[package]]\nname = \"futures-executor\"\nversion = \"0.3.30\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a576fc72ae164fca6b9db127eaa9a9dda0d61316034f33a0a0d4eda41f02b01d\"\ndependencies = [\n \"futures-core\",\n \"futures-task\",\n \"futures-util\",\n \"num_cpus\",\n]\n\n[[package]]\nname = \"futures-io\"\nversion = \"0.3.30\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a44623e20b9681a318efdd71c299b6b222ed6f231972bfe2f224ebad6311f0c1\"\n\n[[package]]\nname = \"futures-macro\"\nversion = \"0.3.30\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"87750cf4b7a4c0625b1529e4c543c2182106e4dedc60a2a6455e00d212c489ac\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.61\",\n]\n\n[[package]]\nname = \"futures-sink\"\nversion = \"0.3.30\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9fb8e00e87438d937621c1c6269e53f536c14d3fbd6a042bb24879e57d474fb5\"\n\n[[package]]\nname = \"futures-task\"\nversion = \"0.3.30\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"38d84fa142264698cdce1a9f9172cf383a0c82de1bddcf3092901442c4097004\"\n\n[[package]]\nname = \"futures-util\"\nversion = \"0.3.30\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3d6401deb83407ab3da39eba7e33987a73c3df0c82b4bb5813ee871c19c41d48\"\ndependencies = [\n \"futures-channel\",\n \"futures-core\",\n \"futures-io\",\n \"futures-macro\",\n \"futures-sink\",\n \"futures-task\",\n \"memchr\",\n \"pin-project-lite\",\n \"pin-utils\",\n \"slab\",\n]\n\n[[package]]\nname = \"generic-array\"\nversion = \"0.12.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ffdf9f34f1447443d37393cc6c2b8313aebddcd96906caf34e54c68d8e57d7bd\"\ndependencies = [\n \"typenum\",\n]\n\n[[package]]\nname = \"generic-array\"\nversion = \"0.14.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"85649ca51fd72272d7821adaf274ad91c288277713d9c18820d8499a7ff69e9a\"\ndependencies = [\n \"typenum\",\n \"version_check\",\n \"zeroize\",\n]\n\n[[package]]\nname = \"getrandom\"\nversion = \"0.1.16\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8fc3cb4d91f53b50155bdcfd23f6a4c39ae1969c2ae85982b135750cccaf5fce\"\ndependencies = [\n \"cfg-if\",\n \"libc\",\n \"wasi 0.9.0+wasi-snapshot-preview1\",\n]\n\n[[package]]\nname = \"getrandom\"\nversion = \"0.2.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c4567c8db10ae91089c99af84c68c38da3ec2f087c3f82960bcdbf3656b6f4d7\"\ndependencies = [\n \"cfg-if\",\n \"libc\",\n \"wasi 0.11.0+wasi-snapshot-preview1\",\n]\n\n[[package]]\nname = \"getrandom_or_panic\"\nversion = \"0.0.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6ea1015b5a70616b688dc230cfe50c8af89d972cb132d5a622814d29773b10b9\"\ndependencies = [\n \"rand_core 0.6.4\",\n]\n\n[[package]]\nname = \"gimli\"\nversion = \"0.27.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b6c80984affa11d98d1b88b66ac8853f143217b399d3c74116778ff8fdb4ed2e\"\ndependencies = [\n \"fallible-iterator\",\n \"indexmap 1.9.3\",\n \"stable_deref_trait\",\n]\n\n[[package]]\nname = \"gimli\"\nversion = \"0.28.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4271d37baee1b8c7e4b708028c57d816cf9d2434acb33a549475f78c181f6253\"\n\n[[package]]\nname = \"group\"\nversion = \"0.13.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f0f9ef7462f7c099f518d754361858f86d8a07af53ba9af0fe635bbccb151a63\"\ndependencies = [\n \"ff\",\n \"rand_core 0.6.4\",\n \"subtle\",\n]\n\n[[package]]\nname = \"hash-db\"\nversion = \"0.16.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8e7d7786361d7425ae2fe4f9e407eb0efaa0840f5212d109cc018c40c35c6ab4\"\n\n[[package]]\nname = \"hash256-std-hasher\"\nversion = \"0.15.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"92c171d55b98633f4ed3860808f004099b36c1cc29c42cfc53aa8591b21efcf2\"\ndependencies = [\n \"crunchy\",\n]\n\n[[package]]\nname = \"hashbrown\"\nversion = \"0.12.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8a9ee70c43aaf417c914396645a0fa852624801b24ebb7ae78fe8272889ac888\"\ndependencies = [\n \"ahash 0.7.8\",\n]\n\n[[package]]\nname = \"hashbrown\"\nversion = \"0.13.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"43a3c133739dddd0d2990f9a4bdf8eb4b21ef50e4851ca85ab661199821d510e\"\ndependencies = [\n \"ahash 0.8.11\",\n]\n\n[[package]]\nname = \"hashbrown\"\nversion = \"0.14.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e5274423e17b7c9fc20b6e7e208532f9b19825d82dfd615708b70edd83df41f1\"\n\n[[package]]\nname = \"heck\"\nversion = \"0.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"95505c38b4572b2d910cecb0281560f54b440a19336cbbcb27bf6ce6adc6f5a8\"\n\n[[package]]\nname = \"heck\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2304e00983f87ffb38b55b444b5e3b60a884b5d30c0fca7d82fe33449bbe55ea\"\n\n[[package]]\nname = \"hermit-abi\"\nversion = \"0.3.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d231dfb89cfffdbc30e7fc41579ed6066ad03abda9e567ccafae602b97ec5024\"\n\n[[package]]\nname = \"hex\"\nversion = \"0.4.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7f24254aa9a54b5c858eaee2f5bccdb46aaf0e486a595ed5fd8f86ba55232a70\"\n\n[[package]]\nname = \"hmac\"\nversion = \"0.8.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"126888268dcc288495a26bf004b38c5fdbb31682f992c84ceb046a1f0fe38840\"\ndependencies = [\n \"crypto-mac 0.8.0\",\n \"digest 0.9.0\",\n]\n\n[[package]]\nname = \"hmac\"\nversion = \"0.11.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2a2a2320eb7ec0ebe8da8f744d7812d9fc4cb4d09344ac01898dbcb6a20ae69b\"\ndependencies = [\n \"crypto-mac 0.11.1\",\n \"digest 0.9.0\",\n]\n\n[[package]]\nname = \"hmac\"\nversion = \"0.12.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6c49c37c09c17a53d937dfbb742eb3a961d65a994e6bcdcf37e7399d0cc8ab5e\"\ndependencies = [\n \"digest 0.10.7\",\n]\n\n[[package]]\nname = \"hmac-drbg\"\nversion = \"0.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"17ea0a1394df5b6574da6e0c1ade9e78868c9fb0a4e5ef4428e32da4676b85b1\"\ndependencies = [\n \"digest 0.9.0\",\n \"generic-array 0.14.7\",\n \"hmac 0.8.1\",\n]\n\n[[package]]\nname = \"home\"\nversion = \"0.5.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e3d1354bf6b7235cb4a0576c2619fd4ed18183f689b12b006a0ee7329eeff9a5\"\ndependencies = [\n \"windows-sys 0.52.0\",\n]\n\n[[package]]\nname = \"iana-time-zone\"\nversion = \"0.1.60\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e7ffbb5a1b541ea2561f8c41c087286cc091e21e556a4f09a8f6cbf17b69b141\"\ndependencies = [\n \"android_system_properties\",\n \"core-foundation-sys\",\n \"iana-time-zone-haiku\",\n \"js-sys\",\n \"wasm-bindgen\",\n \"windows-core\",\n]\n\n[[package]]\nname = \"iana-time-zone-haiku\"\nversion = \"0.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f31827a206f56af32e590ba56d5d2d085f558508192593743f16b2306495269f\"\ndependencies = [\n \"cc\",\n]\n\n[[package]]\nname = \"ident_case\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b9e0384b61958566e926dc50660321d12159025e767c18e043daf26b70104c39\"\n\n[[package]]\nname = \"idna\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"634d9b1461af396cad843f47fdba5597a4f9e6ddd4bfb6ff5d85028c25cb12f6\"\ndependencies = [\n \"unicode-bidi\",\n \"unicode-normalization\",\n]\n\n[[package]]\nname = \"impl-codec\"\nversion = \"0.6.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ba6a270039626615617f3f36d15fc827041df3b78c439da2cadfa47455a77f2f\"\ndependencies = [\n \"parity-scale-codec\",\n]\n\n[[package]]\nname = \"impl-serde\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ebc88fc67028ae3db0c853baa36269d398d5f45b6982f95549ff5def78c935cd\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"impl-trait-for-tuples\"\nversion = \"0.2.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"11d7a9f6330b71fea57921c9b61c47ee6e84f72d394754eff6163ae67e7395eb\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"include_dir\"\nversion = \"0.7.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"18762faeff7122e89e0857b02f7ce6fcc0d101d5e9ad2ad7846cc01d61b7f19e\"\ndependencies = [\n \"include_dir_macros\",\n]\n\n[[package]]\nname = \"include_dir_macros\"\nversion = \"0.7.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b139284b5cf57ecfa712bcc66950bb635b31aff41c188e8a4cfc758eca374a3f\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n]\n\n[[package]]\nname = \"indent_write\"\nversion = \"2.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0cfe9645a18782869361d9c8732246be7b410ad4e919d3609ebabdac00ba12c3\"\n\n[[package]]\nname = \"indexmap\"\nversion = \"1.9.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bd070e393353796e801d209ad339e89596eb4c8d430d18ede6a1cced8fafbd99\"\ndependencies = [\n \"autocfg\",\n \"hashbrown 0.12.3\",\n \"serde\",\n]\n\n[[package]]\nname = \"indexmap\"\nversion = \"2.2.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"168fb715dda47215e360912c096649d23d58bf392ac62f73919e831745e40f26\"\ndependencies = [\n \"equivalent\",\n \"hashbrown 0.14.5\",\n]\n\n[[package]]\nname = \"indexmap-nostd\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8e04e2fd2b8188ea827b32ef11de88377086d690286ab35747ef7f9bf3ccb590\"\n\n[[package]]\nname = \"ink_allocator\"\nversion = \"4.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"870914970470fd77a3f42d3c5d1918b562817af127fd063ee8b1d9fbf59aa1fe\"\ndependencies = [\n \"cfg-if\",\n]\n\n[[package]]\nname = \"ink_engine\"\nversion = \"4.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"722ec3a5eb557124b001c60ff8f961079f6d566af643edea579f152b15822fe5\"\ndependencies = [\n \"blake2\",\n \"derive_more\",\n \"ink_primitives\",\n \"parity-scale-codec\",\n \"secp256k1 0.27.0\",\n \"sha2 0.10.8\",\n \"sha3\",\n]\n\n[[package]]\nname = \"ink_env\"\nversion = \"4.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"584e73bc0982f6f1a067bb63ebc75262f6dc54ed2a17060efa73eaba84dc9308\"\ndependencies = [\n \"arrayref\",\n \"blake2\",\n \"cfg-if\",\n \"derive_more\",\n \"ink_allocator\",\n \"ink_engine\",\n \"ink_prelude\",\n \"ink_primitives\",\n \"ink_storage_traits\",\n \"num-traits\",\n \"parity-scale-codec\",\n \"paste\",\n \"rlibc\",\n \"scale-decode\",\n \"scale-encode\",\n \"scale-info\",\n \"secp256k1 0.27.0\",\n \"sha2 0.10.8\",\n \"sha3\",\n \"static_assertions\",\n]\n\n[[package]]\nname = \"ink_metadata\"\nversion = \"4.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3fddff95ce3e01f42002fdaf96edda691dbccb08c9ae76d7101daa1fa634e601\"\ndependencies = [\n \"derive_more\",\n \"impl-serde\",\n \"ink_prelude\",\n \"ink_primitives\",\n \"scale-info\",\n \"serde\",\n]\n\n[[package]]\nname = \"ink_prelude\"\nversion = \"4.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d8cfdf91d2b442f08efb34dd3780fd6fbd3d033f63b42f62684fe47534948ef6\"\ndependencies = [\n \"cfg-if\",\n]\n\n[[package]]\nname = \"ink_primitives\"\nversion = \"4.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6414bcad12ebf0c3abbbb192a09e4d06e22f662cf3e19545204e1b0684be12a1\"\ndependencies = [\n \"derive_more\",\n \"ink_prelude\",\n \"parity-scale-codec\",\n \"scale-decode\",\n \"scale-encode\",\n \"scale-info\",\n \"xxhash-rust\",\n]\n\n[[package]]\nname = \"ink_storage_traits\"\nversion = \"4.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a8dcb50f70377ac35c28d63b06383a0a3cbb79542ea4cdc5b00e3e2b3de4a549\"\ndependencies = [\n \"ink_metadata\",\n \"ink_prelude\",\n \"ink_primitives\",\n \"parity-scale-codec\",\n \"scale-info\",\n]\n\n[[package]]\nname = \"integer-sqrt\"\nversion = \"0.1.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"276ec31bcb4a9ee45f58bec6f9ec700ae4cf4f4f8f2fa7e06cb406bd5ffdd770\"\ndependencies = [\n \"num-traits\",\n]\n\n[[package]]\nname = \"io-lifetimes\"\nversion = \"1.0.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"eae7b9aee968036d54dce06cebaefd919e4472e753296daccd6d344e3e2df0c2\"\ndependencies = [\n \"hermit-abi\",\n \"libc\",\n \"windows-sys 0.48.0\",\n]\n\n[[package]]\nname = \"is_terminal_polyfill\"\nversion = \"1.70.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f8478577c03552c21db0e2724ffb8986a5ce7af88107e6be5d2ee6e158c12800\"\n\n[[package]]\nname = \"itertools\"\nversion = \"0.10.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b0fd2260e829bddf4cb6ea802289de2f86d6a7a690192fbe91b3f46e0f2c8473\"\ndependencies = [\n \"either\",\n]\n\n[[package]]\nname = \"itoa\"\nversion = \"1.0.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"49f1f14873335454500d59611f1cf4a4b0f786f9ac11f4312a78e4cf2566695b\"\n\n[[package]]\nname = \"jobserver\"\nversion = \"0.1.31\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d2b099aaa34a9751c5bf0878add70444e1ed2dd73f347be99003d4577277de6e\"\ndependencies = [\n \"libc\",\n]\n\n[[package]]\nname = \"joinery\"\nversion = \"2.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"72167d68f5fce3b8655487b8038691a3c9984ee769590f93f2a631f4ad64e4f5\"\n\n[[package]]\nname = \"js-sys\"\nversion = \"0.3.69\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"29c15563dc2726973df627357ce0c9ddddbea194836909d655df6a75d2cf296d\"\ndependencies = [\n \"wasm-bindgen\",\n]\n\n[[package]]\nname = \"k256\"\nversion = \"0.13.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"956ff9b67e26e1a6a866cb758f12c6f8746208489e3e4a4b5580802f2f0a587b\"\ndependencies = [\n \"cfg-if\",\n \"ecdsa\",\n \"elliptic-curve\",\n \"once_cell\",\n \"sha2 0.10.8\",\n]\n\n[[package]]\nname = \"keccak\"\nversion = \"0.1.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ecc2af9a1119c51f12a14607e783cb977bde58bc069ff0c3da1095e635d70654\"\ndependencies = [\n \"cpufeatures\",\n]\n\n[[package]]\nname = \"lazy_static\"\nversion = \"1.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e2abad23fbc42b3700f2f279844dc832adb2b2eb069b2df918f455c4e18cc646\"\n\n[[package]]\nname = \"leb128\"\nversion = \"0.2.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"884e2677b40cc8c339eaefcb701c32ef1fd2493d71118dc0ca4b6a736c93bd67\"\n\n[[package]]\nname = \"libc\"\nversion = \"0.2.154\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ae743338b92ff9146ce83992f766a31066a91a8c84a45e0e9f21e7cf6de6d346\"\n\n[[package]]\nname = \"libm\"\nversion = \"0.2.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4ec2a862134d2a7d32d7983ddcdd1c4923530833c9f2ea1a44fc5fa473989058\"\n\n[[package]]\nname = \"libsecp256k1\"\nversion = \"0.7.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"95b09eff1b35ed3b33b877ced3a691fc7a481919c7e29c53c906226fcf55e2a1\"\ndependencies = [\n \"arrayref\",\n \"base64\",\n \"digest 0.9.0\",\n \"hmac-drbg\",\n \"libsecp256k1-core\",\n \"libsecp256k1-gen-ecmult\",\n \"libsecp256k1-gen-genmult\",\n \"rand 0.8.5\",\n \"serde\",\n \"sha2 0.9.9\",\n \"typenum\",\n]\n\n[[package]]\nname = \"libsecp256k1-core\"\nversion = \"0.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5be9b9bb642d8522a44d533eab56c16c738301965504753b03ad1de3425d5451\"\ndependencies = [\n \"crunchy\",\n \"digest 0.9.0\",\n \"subtle\",\n]\n\n[[package]]\nname = \"libsecp256k1-gen-ecmult\"\nversion = \"0.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3038c808c55c87e8a172643a7d87187fc6c4174468159cb3090659d55bcb4809\"\ndependencies = [\n \"libsecp256k1-core\",\n]\n\n[[package]]\nname = \"libsecp256k1-gen-genmult\"\nversion = \"0.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3db8d6ba2cec9eacc40e6e8ccc98931840301f1006e95647ceb2dd5c3aa06f7c\"\ndependencies = [\n \"libsecp256k1-core\",\n]\n\n[[package]]\nname = \"link-cplusplus\"\nversion = \"1.0.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9d240c6f7e1ba3a28b0249f774e6a9dd0175054b52dfbb61b16eb8505c3785c9\"\ndependencies = [\n \"cc\",\n]\n\n[[package]]\nname = \"linregress\"\nversion = \"0.5.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4de04dcecc58d366391f9920245b85ffa684558a5ef6e7736e754347c3aea9c2\"\ndependencies = [\n \"nalgebra\",\n]\n\n[[package]]\nname = \"linux-raw-sys\"\nversion = \"0.1.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f051f77a7c8e6957c0696eac88f26b0117e54f52d3fc682ab19397a8812846a4\"\n\n[[package]]\nname = \"linux-raw-sys\"\nversion = \"0.4.13\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"01cda141df6706de531b6c46c3a33ecca755538219bd484262fa09410c13539c\"\n\n[[package]]\nname = \"lock_api\"\nversion = \"0.4.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"07af8b9cdd281b7915f413fa73f29ebd5d55d0d3f0155584dade1ff18cea1b17\"\ndependencies = [\n \"autocfg\",\n \"scopeguard\",\n]\n\n[[package]]\nname = \"log\"\nversion = \"0.4.21\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"90ed8c1e510134f979dbc4f070f87d4313098b704861a105fe34231c70a3901c\"\n\n[[package]]\nname = \"mach\"\nversion = \"0.3.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b823e83b2affd8f40a9ee8c29dbc56404c1e34cd2710921f2801e2cf29527afa\"\ndependencies = [\n \"libc\",\n]\n\n[[package]]\nname = \"macro_magic\"\nversion = \"0.4.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"aee866bfee30d2d7e83835a4574aad5b45adba4cc807f2a3bbba974e5d4383c9\"\ndependencies = [\n \"macro_magic_core\",\n \"macro_magic_macros\",\n \"quote\",\n \"syn 2.0.61\",\n]\n\n[[package]]\nname = \"macro_magic_core\"\nversion = \"0.4.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7e766a20fd9c72bab3e1e64ed63f36bd08410e75803813df210d1ce297d7ad00\"\ndependencies = [\n \"const-random\",\n \"derive-syn-parse 0.1.5\",\n \"macro_magic_core_macros\",\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.61\",\n]\n\n[[package]]\nname = \"macro_magic_core_macros\"\nversion = \"0.4.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d710e1214dffbab3b5dacb21475dde7d6ed84c69ff722b3a47a782668d44fbac\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.61\",\n]\n\n[[package]]\nname = \"macro_magic_macros\"\nversion = \"0.4.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b8fb85ec1620619edf2984a7693497d4ec88a9665d8b87e942856884c92dbf2a\"\ndependencies = [\n \"macro_magic_core\",\n \"quote\",\n \"syn 2.0.61\",\n]\n\n[[package]]\nname = \"matchers\"\nversion = \"0.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f099785f7595cc4b4553a174ce30dd7589ef93391ff414dbb67f62392b9e0ce1\"\ndependencies = [\n \"regex-automata 0.1.10\",\n]\n\n[[package]]\nname = \"matrixmultiply\"\nversion = \"0.3.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7574c1cf36da4798ab73da5b215bbf444f50718207754cb522201d78d1cd0ff2\"\ndependencies = [\n \"autocfg\",\n \"rawpointer\",\n]\n\n[[package]]\nname = \"memchr\"\nversion = \"2.7.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6c8640c5d730cb13ebd907d8d04b52f55ac9a2eec55b440c8892f40d56c76c1d\"\n\n[[package]]\nname = \"memfd\"\nversion = \"0.6.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b2cffa4ad52c6f791f4f8b15f0c05f9824b2ced1160e88cc393d64fff9a8ac64\"\ndependencies = [\n \"rustix 0.38.34\",\n]\n\n[[package]]\nname = \"memoffset\"\nversion = \"0.8.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d61c719bcfbcf5d62b3a09efa6088de8c54bc0bfcd3ea7ae39fcc186108b8de1\"\ndependencies = [\n \"autocfg\",\n]\n\n[[package]]\nname = \"memory-db\"\nversion = \"0.32.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"808b50db46293432a45e63bc15ea51e0ab4c0a1647b8eb114e31a3e698dd6fbe\"\ndependencies = [\n \"hash-db\",\n]\n\n[[package]]\nname = \"merlin\"\nversion = \"2.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4e261cf0f8b3c42ded9f7d2bb59dea03aa52bc8a1cbc7482f9fc3fd1229d3b42\"\ndependencies = [\n \"byteorder\",\n \"keccak\",\n \"rand_core 0.5.1\",\n \"zeroize\",\n]\n\n[[package]]\nname = \"merlin\"\nversion = \"3.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"58c38e2799fc0978b65dfff8023ec7843e2330bb462f19198840b34b6582397d\"\ndependencies = [\n \"byteorder\",\n \"keccak\",\n \"rand_core 0.6.4\",\n \"zeroize\",\n]\n\n[[package]]\nname = \"minimal-lexical\"\nversion = \"0.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"68354c5c6bd36d73ff3feceb05efa59b6acb7626617f4962be322a825e61f79a\"\n\n[[package]]\nname = \"miniz_oxide\"\nversion = \"0.7.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9d811f3e15f28568be3407c8e7fdb6514c1cda3cb30683f15b6a1a1dc4ea14a7\"\ndependencies = [\n \"adler\",\n]\n\n[[package]]\nname = \"nalgebra\"\nversion = \"0.32.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3ea4908d4f23254adda3daa60ffef0f1ac7b8c3e9a864cf3cc154b251908a2ef\"\ndependencies = [\n \"approx\",\n \"matrixmultiply\",\n \"nalgebra-macros\",\n \"num-complex\",\n \"num-rational\",\n \"num-traits\",\n \"simba\",\n \"typenum\",\n]\n\n[[package]]\nname = \"nalgebra-macros\"\nversion = \"0.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"91761aed67d03ad966ef783ae962ef9bbaca728d2dd7ceb7939ec110fffad998\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"nohash-hasher\"\nversion = \"0.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2bf50223579dc7cdcfb3bfcacf7069ff68243f8c363f62ffa99cf000a6b9c451\"\n\n[[package]]\nname = \"nom\"\nversion = \"7.1.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d273983c5a657a70a3e8f2a01329822f3b8c8172b73826411a55751e404a0a4a\"\ndependencies = [\n \"memchr\",\n \"minimal-lexical\",\n]\n\n[[package]]\nname = \"nom-supreme\"\nversion = \"0.7.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2f909b25a8371ad5c054abc2c48205d677231e6a2dcbf83704ed57bb147f30e0\"\ndependencies = [\n \"brownstone\",\n \"indent_write\",\n \"joinery\",\n \"memchr\",\n \"nom\",\n]\n\n[[package]]\nname = \"num-complex\"\nversion = \"0.4.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"73f88a1307638156682bada9d7604135552957b7818057dcef22705b4d509495\"\ndependencies = [\n \"num-traits\",\n]\n\n[[package]]\nname = \"num-format\"\nversion = \"0.4.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a652d9771a63711fd3c3deb670acfbe5c30a4072e664d7a3bf5a9e1056ac72c3\"\ndependencies = [\n \"arrayvec 0.7.4\",\n \"itoa\",\n]\n\n[[package]]\nname = \"num-integer\"\nversion = \"0.1.46\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7969661fd2958a5cb096e56c8e1ad0444ac2bbcd0061bd28660485a44879858f\"\ndependencies = [\n \"num-traits\",\n]\n\n[[package]]\nname = \"num-rational\"\nversion = \"0.4.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f83d14da390562dca69fc84082e73e548e1ad308d24accdedd2720017cb37824\"\ndependencies = [\n \"num-integer\",\n \"num-traits\",\n]\n\n[[package]]\nname = \"num-traits\"\nversion = \"0.2.19\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"071dfc062690e90b734c0b2273ce72ad0ffa95f0c74596bc250dcfd960262841\"\ndependencies = [\n \"autocfg\",\n]\n\n[[package]]\nname = \"num_cpus\"\nversion = \"1.16.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4161fcb6d602d4d2081af7c3a45852d875a03dd337a6bfdd6e06407b61342a43\"\ndependencies = [\n \"hermit-abi\",\n \"libc\",\n]\n\n[[package]]\nname = \"object\"\nversion = \"0.30.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"03b4680b86d9cfafba8fc491dc9b6df26b68cf40e9e6cd73909194759a63c385\"\ndependencies = [\n \"crc32fast\",\n \"hashbrown 0.13.2\",\n \"indexmap 1.9.3\",\n \"memchr\",\n]\n\n[[package]]\nname = \"object\"\nversion = \"0.32.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a6a622008b6e321afc04970976f62ee297fdbaa6f95318ca343e3eebb9648441\"\ndependencies = [\n \"memchr\",\n]\n\n[[package]]\nname = \"once_cell\"\nversion = \"1.19.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3fdb12b2476b595f9358c5161aa467c2438859caa136dec86c26fdd2efe17b92\"\n\n[[package]]\nname = \"opaque-debug\"\nversion = \"0.2.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2839e79665f131bdb5782e51f2c6c9599c133c6098982a54c794358bf432529c\"\n\n[[package]]\nname = \"opaque-debug\"\nversion = \"0.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c08d65885ee38876c4f86fa503fb49d7b507c2b62552df7c70b2fce627e06381\"\n\n[[package]]\nname = \"os_pipe\"\nversion = \"1.1.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"57119c3b893986491ec9aa85056780d3a0f3cf4da7cc09dd3650dbd6c6738fb9\"\ndependencies = [\n \"libc\",\n \"windows-sys 0.52.0\",\n]\n\n[[package]]\nname = \"pallet-balances\"\nversion = \"23.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0486a52507072bd738dc851acf7b42def3645db10777f93dccdaa5933e41269b\"\ndependencies = [\n \"frame-benchmarking\",\n \"frame-support\",\n \"frame-system\",\n \"log\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"sp-runtime\",\n \"sp-std\",\n]\n\n[[package]]\nname = \"pallet-contracts-for-drink\"\nversion = \"22.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3f039ee77b4ff6ab8b4e427bab636dd23ba1257ed631616c98c0859a83a5e690\"\ndependencies = [\n \"bitflags 1.3.2\",\n \"environmental\",\n \"frame-benchmarking\",\n \"frame-support\",\n \"frame-system\",\n \"impl-trait-for-tuples\",\n \"log\",\n \"pallet-balances\",\n \"pallet-contracts-primitives\",\n \"pallet-contracts-proc-macro\",\n \"parity-scale-codec\",\n \"rand 0.8.5\",\n \"scale-info\",\n \"serde\",\n \"smallvec\",\n \"sp-api\",\n \"sp-core\",\n \"sp-io\",\n \"sp-runtime\",\n \"sp-std\",\n \"wasm-instrument\",\n \"wasmi\",\n]\n\n[[package]]\nname = \"pallet-contracts-primitives\"\nversion = \"26.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f5c5653fe8f09fe71530a09078feaa6296f9852428fe8e0a1c9dfc2729d01bf7\"\ndependencies = [\n \"bitflags 1.3.2\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"sp-runtime\",\n \"sp-std\",\n \"sp-weights\",\n]\n\n[[package]]\nname = \"pallet-contracts-proc-macro\"\nversion = \"14.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fac3eb6be2d450fb3ca242f60f7766f86141b50e37bb3759f2add3757734fbf6\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.61\",\n]\n\n[[package]]\nname = \"pallet-timestamp\"\nversion = \"22.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"924bc62e043df933e6067a2a70a71a16823253e46765e36800f0dc60a0a59018\"\ndependencies = [\n \"frame-benchmarking\",\n \"frame-support\",\n \"frame-system\",\n \"log\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"sp-inherents\",\n \"sp-io\",\n \"sp-runtime\",\n \"sp-std\",\n \"sp-storage\",\n \"sp-timestamp\",\n]\n\n[[package]]\nname = \"parity-scale-codec\"\nversion = \"3.6.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"306800abfa29c7f16596b5970a588435e3d5b3149683d00c12b699cc19f895ee\"\ndependencies = [\n \"arrayvec 0.7.4\",\n \"bitvec\",\n \"byte-slice-cast\",\n \"bytes\",\n \"impl-trait-for-tuples\",\n \"parity-scale-codec-derive\",\n \"serde\",\n]\n\n[[package]]\nname = \"parity-scale-codec-derive\"\nversion = \"3.6.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d830939c76d294956402033aee57a6da7b438f2294eb94864c37b0569053a42c\"\ndependencies = [\n \"proc-macro-crate 3.1.0\",\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"parity-wasm\"\nversion = \"0.45.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e1ad0aff30c1da14b1254fcb2af73e1fa9a28670e584a626f53a369d0e157304\"\n\n[[package]]\nname = \"parking_lot\"\nversion = \"0.12.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7e4af0ca4f6caed20e900d564c242b8e5d4903fdacf31d3daf527b66fe6f42fb\"\ndependencies = [\n \"lock_api\",\n \"parking_lot_core\",\n]\n\n[[package]]\nname = \"parking_lot_core\"\nversion = \"0.9.10\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1e401f977ab385c9e4e3ab30627d6f26d00e2c73eef317493c4ec6d468726cf8\"\ndependencies = [\n \"cfg-if\",\n \"libc\",\n \"redox_syscall\",\n \"smallvec\",\n \"windows-targets 0.52.5\",\n]\n\n[[package]]\nname = \"paste\"\nversion = \"1.0.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"57c0d7b74b563b49d38dae00a0c37d4d6de9b432382b2892f0574ddcae73fd0a\"\n\n[[package]]\nname = \"pbkdf2\"\nversion = \"0.8.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d95f5254224e617595d2cc3cc73ff0a5eaf2637519e25f03388154e9378b6ffa\"\ndependencies = [\n \"crypto-mac 0.11.1\",\n]\n\n[[package]]\nname = \"pbkdf2\"\nversion = \"0.11.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"83a0692ec44e4cf1ef28ca317f14f8f07da2d95ec3fa01f86e4467b725e60917\"\ndependencies = [\n \"digest 0.10.7\",\n]\n\n[[package]]\nname = \"percent-encoding\"\nversion = \"2.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e3148f5046208a5d56bcfc03053e3ca6334e51da8dfb19b6cdc8b306fae3283e\"\n\n[[package]]\nname = \"pin-project-lite\"\nversion = \"0.2.14\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bda66fc9667c18cb2758a2ac84d1167245054bcf85d5d1aaa6923f45801bdd02\"\n\n[[package]]\nname = \"pin-utils\"\nversion = \"0.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8b870d8c151b6f2fb93e84a13146138f05d02ed11c7e7c54f8826aaaf7c9f184\"\n\n[[package]]\nname = \"pkcs8\"\nversion = \"0.10.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f950b2377845cebe5cf8b5165cb3cc1a5e0fa5cfa3e1f7f55707d8fd82e0a7b7\"\ndependencies = [\n \"der\",\n \"spki\",\n]\n\n[[package]]\nname = \"platforms\"\nversion = \"3.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"db23d408679286588f4d4644f965003d056e3dd5abcaaa938116871d7ce2fee7\"\n\n[[package]]\nname = \"ppv-lite86\"\nversion = \"0.2.17\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5b40af805b3121feab8a3c29f04d8ad262fa8e0561883e7653e024ae4479e6de\"\n\n[[package]]\nname = \"prettier-please\"\nversion = \"0.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"22020dfcf177fcc7bf5deaf7440af371400c67c0de14c399938d8ed4fb4645d3\"\ndependencies = [\n \"proc-macro2\",\n \"syn 2.0.61\",\n]\n\n[[package]]\nname = \"primitive-types\"\nversion = \"0.12.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0b34d9fd68ae0b74a41b21c03c2f62847aa0ffea044eee893b4c140b37e244e2\"\ndependencies = [\n \"fixed-hash\",\n \"impl-codec\",\n \"impl-serde\",\n \"scale-info\",\n \"uint\",\n]\n\n[[package]]\nname = \"proc-macro-crate\"\nversion = \"1.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7f4c021e1093a56626774e81216a4ce732a735e5bad4868a03f3ed65ca0c3919\"\ndependencies = [\n \"once_cell\",\n \"toml_edit 0.19.15\",\n]\n\n[[package]]\nname = \"proc-macro-crate\"\nversion = \"3.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6d37c51ca738a55da99dc0c4a34860fd675453b8b36209178c2249bb13651284\"\ndependencies = [\n \"toml_edit 0.21.1\",\n]\n\n[[package]]\nname = \"proc-macro-error\"\nversion = \"1.0.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"da25490ff9892aab3fcf7c36f08cfb902dd3e71ca0f9f9517bea02a73a5ce38c\"\ndependencies = [\n \"proc-macro-error-attr\",\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n \"version_check\",\n]\n\n[[package]]\nname = \"proc-macro-error-attr\"\nversion = \"1.0.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a1be40180e52ecc98ad80b184934baf3d0d29f979574e439af5a55274b35f869\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"version_check\",\n]\n\n[[package]]\nname = \"proc-macro-warning\"\nversion = \"0.4.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3d1eaa7fa0aa1929ffdf7eeb6eac234dde6268914a14ad44d23521ab6a9b258e\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.61\",\n]\n\n[[package]]\nname = \"proc-macro2\"\nversion = \"1.0.82\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8ad3d49ab951a01fbaafe34f2ec74122942fe18a3f9814c3268f1bb72042131b\"\ndependencies = [\n \"unicode-ident\",\n]\n\n[[package]]\nname = \"psm\"\nversion = \"0.1.21\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5787f7cda34e3033a72192c018bc5883100330f362ef279a8cbccfce8bb4e874\"\ndependencies = [\n \"cc\",\n]\n\n[[package]]\nname = \"quote\"\nversion = \"1.0.36\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0fa76aaf39101c457836aec0ce2316dbdc3ab723cdda1c6bd4e6ad4208acaca7\"\ndependencies = [\n \"proc-macro2\",\n]\n\n[[package]]\nname = \"radium\"\nversion = \"0.7.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"dc33ff2d4973d518d823d61aa239014831e521c75da58e3df4840d3f47749d09\"\n\n[[package]]\nname = \"rand\"\nversion = \"0.7.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6a6b1679d49b24bbfe0c803429aa1874472f50d9b363131f0e89fc356b544d03\"\ndependencies = [\n \"getrandom 0.1.16\",\n \"libc\",\n \"rand_chacha 0.2.2\",\n \"rand_core 0.5.1\",\n \"rand_hc\",\n]\n\n[[package]]\nname = \"rand\"\nversion = \"0.8.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"34af8d1a0e25924bc5b7c43c079c942339d8f0a8b57c39049bef581b46327404\"\ndependencies = [\n \"libc\",\n \"rand_chacha 0.3.1\",\n \"rand_core 0.6.4\",\n]\n\n[[package]]\nname = \"rand_chacha\"\nversion = \"0.2.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f4c8ed856279c9737206bf725bf36935d8666ead7aa69b52be55af369d193402\"\ndependencies = [\n \"ppv-lite86\",\n \"rand_core 0.5.1\",\n]\n\n[[package]]\nname = \"rand_chacha\"\nversion = \"0.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e6c10a63a0fa32252be49d21e7709d4d4baf8d231c2dbce1eaa8141b9b127d88\"\ndependencies = [\n \"ppv-lite86\",\n \"rand_core 0.6.4\",\n]\n\n[[package]]\nname = \"rand_core\"\nversion = \"0.5.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"90bde5296fc891b0cef12a6d03ddccc162ce7b2aff54160af9338f8d40df6d19\"\ndependencies = [\n \"getrandom 0.1.16\",\n]\n\n[[package]]\nname = \"rand_core\"\nversion = \"0.6.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ec0be4795e2f6a28069bec0b5ff3e2ac9bafc99e6a9a7dc3547996c5c816922c\"\ndependencies = [\n \"getrandom 0.2.15\",\n]\n\n[[package]]\nname = \"rand_hc\"\nversion = \"0.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ca3129af7b92a17112d59ad498c6f81eaf463253766b90396d39ea7a39d6613c\"\ndependencies = [\n \"rand_core 0.5.1\",\n]\n\n[[package]]\nname = \"rawpointer\"\nversion = \"0.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"60a357793950651c4ed0f3f52338f53b2f809f32d83a07f72909fa13e4c6c1e3\"\n\n[[package]]\nname = \"redox_syscall\"\nversion = \"0.5.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"469052894dcb553421e483e4209ee581a45100d31b4018de03e5a7ad86374a7e\"\ndependencies = [\n \"bitflags 2.5.0\",\n]\n\n[[package]]\nname = \"ref-cast\"\nversion = \"1.0.23\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ccf0a6f84d5f1d581da8b41b47ec8600871962f2a528115b542b362d4b744931\"\ndependencies = [\n \"ref-cast-impl\",\n]\n\n[[package]]\nname = \"ref-cast-impl\"\nversion = \"1.0.23\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bcc303e793d3734489387d205e9b186fac9c6cfacedd98cbb2e8a5943595f3e6\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.61\",\n]\n\n[[package]]\nname = \"regex\"\nversion = \"1.10.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c117dbdfde9c8308975b6a18d71f3f385c89461f7b3fb054288ecf2a2058ba4c\"\ndependencies = [\n \"aho-corasick\",\n \"memchr\",\n \"regex-automata 0.4.6\",\n \"regex-syntax 0.8.3\",\n]\n\n[[package]]\nname = \"regex-automata\"\nversion = \"0.1.10\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6c230d73fb8d8c1b9c0b3135c5142a8acee3a0558fb8db5cf1cb65f8d7862132\"\ndependencies = [\n \"regex-syntax 0.6.29\",\n]\n\n[[package]]\nname = \"regex-automata\"\nversion = \"0.4.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"86b83b8b9847f9bf95ef68afb0b8e6cdb80f498442f5179a29fad448fcc1eaea\"\ndependencies = [\n \"aho-corasick\",\n \"memchr\",\n \"regex-syntax 0.8.3\",\n]\n\n[[package]]\nname = \"regex-syntax\"\nversion = \"0.6.29\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f162c6dd7b008981e4d40210aca20b4bd0f9b60ca9271061b07f78537722f2e1\"\n\n[[package]]\nname = \"regex-syntax\"\nversion = \"0.8.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"adad44e29e4c806119491a7f06f03de4d1af22c3a680dd47f1e6e179439d1f56\"\n\n[[package]]\nname = \"rfc6979\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f8dd2a808d456c4a54e300a23e9f5a67e122c3024119acbfd73e3bf664491cb2\"\ndependencies = [\n \"hmac 0.12.1\",\n \"subtle\",\n]\n\n[[package]]\nname = \"rlibc\"\nversion = \"1.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fc874b127765f014d792f16763a81245ab80500e2ad921ed4ee9e82481ee08fe\"\n\n[[package]]\nname = \"rustc-demangle\"\nversion = \"0.1.24\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"719b953e2095829ee67db738b3bfa9fa368c94900df327b3f07fe6e794d2fe1f\"\n\n[[package]]\nname = \"rustc-hash\"\nversion = \"1.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"08d43f7aa6b08d49f382cde6a7982047c3426db949b1424bc4b7ec9ae12c6ce2\"\n\n[[package]]\nname = \"rustc-hex\"\nversion = \"2.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3e75f6a532d0fd9f7f13144f392b6ad56a32696bfcd9c78f797f16bbb6f072d6\"\n\n[[package]]\nname = \"rustc_version\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bfa0f585226d2e68097d4f95d113b15b83a82e819ab25717ec0590d9584ef366\"\ndependencies = [\n \"semver\",\n]\n\n[[package]]\nname = \"rustix\"\nversion = \"0.36.17\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"305efbd14fde4139eb501df5f136994bb520b033fa9fbdce287507dc23b8c7ed\"\ndependencies = [\n \"bitflags 1.3.2\",\n \"errno\",\n \"io-lifetimes\",\n \"libc\",\n \"linux-raw-sys 0.1.4\",\n \"windows-sys 0.45.0\",\n]\n\n[[package]]\nname = \"rustix\"\nversion = \"0.38.34\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"70dc5ec042f7a43c4a73241207cecc9873a06d45debb38b329f8541d85c2730f\"\ndependencies = [\n \"bitflags 2.5.0\",\n \"errno\",\n \"libc\",\n \"linux-raw-sys 0.4.13\",\n \"windows-sys 0.52.0\",\n]\n\n[[package]]\nname = \"rustversion\"\nversion = \"1.0.16\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"092474d1a01ea8278f69e6a358998405fae5b8b963ddaeb2b0b04a128bf1dfb0\"\n\n[[package]]\nname = \"ryu\"\nversion = \"1.0.18\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f3cb5ba0dc43242ce17de99c180e96db90b235b8a9fdc9543c96d2209116bd9f\"\n\n[[package]]\nname = \"safe_arch\"\nversion = \"0.7.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f398075ce1e6a179b46f51bd88d0598b92b00d3551f1a2d4ac49e771b56ac354\"\ndependencies = [\n \"bytemuck\",\n]\n\n[[package]]\nname = \"same-file\"\nversion = \"1.0.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"93fc1dc3aaa9bfed95e02e6eadabb4baf7e3078b0bd1b4d7b6b0b68378900502\"\ndependencies = [\n \"winapi-util\",\n]\n\n[[package]]\nname = \"scale-bits\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"036575c29af9b6e4866ffb7fa055dbf623fe7a9cc159b33786de6013a6969d89\"\ndependencies = [\n \"parity-scale-codec\",\n \"scale-info\",\n]\n\n[[package]]\nname = \"scale-decode\"\nversion = \"0.9.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7789f5728e4e954aaa20cadcc370b99096fb8645fca3c9333ace44bb18f30095\"\ndependencies = [\n \"derive_more\",\n \"parity-scale-codec\",\n \"scale-bits\",\n \"scale-decode-derive\",\n \"scale-info\",\n \"smallvec\",\n]\n\n[[package]]\nname = \"scale-decode-derive\"\nversion = \"0.9.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"27873eb6005868f8cc72dcfe109fae664cf51223d35387bc2f28be4c28d94c47\"\ndependencies = [\n \"darling\",\n \"proc-macro-crate 1.3.1\",\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"scale-encode\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6d70cb4b29360105483fac1ed567ff95d65224a14dd275b6303ed0a654c78de5\"\ndependencies = [\n \"derive_more\",\n \"parity-scale-codec\",\n \"scale-encode-derive\",\n \"scale-info\",\n \"smallvec\",\n]\n\n[[package]]\nname = \"scale-encode-derive\"\nversion = \"0.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"995491f110efdc6bea96d6a746140e32bfceb4ea47510750a5467295a4707a25\"\ndependencies = [\n \"darling\",\n \"proc-macro-crate 1.3.1\",\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"scale-info\"\nversion = \"2.11.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"eca070c12893629e2cc820a9761bedf6ce1dcddc9852984d1dc734b8bd9bd024\"\ndependencies = [\n \"bitvec\",\n \"cfg-if\",\n \"derive_more\",\n \"parity-scale-codec\",\n \"scale-info-derive\",\n \"serde\",\n]\n\n[[package]]\nname = \"scale-info-derive\"\nversion = \"2.11.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2d35494501194174bda522a32605929eefc9ecf7e0a326c26db1fdd85881eb62\"\ndependencies = [\n \"proc-macro-crate 3.1.0\",\n \"proc-macro2\",\n \"quote\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"schnellru\"\nversion = \"0.2.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6b0cf7da6fc4477944d5529807234f66802fcb618fc62b9c05bedca7f9be6c43\"\ndependencies = [\n \"ahash 0.8.11\",\n \"cfg-if\",\n \"hashbrown 0.13.2\",\n]\n\n[[package]]\nname = \"schnorrkel\"\nversion = \"0.9.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"021b403afe70d81eea68f6ea12f6b3c9588e5d536a94c3bf80f15e7faa267862\"\ndependencies = [\n \"arrayref\",\n \"arrayvec 0.5.2\",\n \"curve25519-dalek 2.1.3\",\n \"getrandom 0.1.16\",\n \"merlin 2.0.1\",\n \"rand 0.7.3\",\n \"rand_core 0.5.1\",\n \"sha2 0.8.2\",\n \"subtle\",\n \"zeroize\",\n]\n\n[[package]]\nname = \"schnorrkel\"\nversion = \"0.11.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8de18f6d8ba0aad7045f5feae07ec29899c1112584a38509a84ad7b04451eaa0\"\ndependencies = [\n \"arrayref\",\n \"arrayvec 0.7.4\",\n \"curve25519-dalek 4.1.2\",\n \"getrandom_or_panic\",\n \"merlin 3.0.0\",\n \"rand_core 0.6.4\",\n \"sha2 0.10.8\",\n \"subtle\",\n \"zeroize\",\n]\n\n[[package]]\nname = \"scopeguard\"\nversion = \"1.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"94143f37725109f92c262ed2cf5e59bce7498c01bcc1502d7b9afe439a4e9f49\"\n\n[[package]]\nname = \"scratch\"\nversion = \"1.0.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a3cf7c11c38cb994f3d40e8a8cde3bbd1f72a435e4c49e85d6553d8312306152\"\n\n[[package]]\nname = \"sec1\"\nversion = \"0.7.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d3e97a565f76233a6003f9f5c54be1d9c5bdfa3eccfb189469f11ec4901c47dc\"\ndependencies = [\n \"base16ct\",\n \"der\",\n \"generic-array 0.14.7\",\n \"pkcs8\",\n \"subtle\",\n \"zeroize\",\n]\n\n[[package]]\nname = \"secp256k1\"\nversion = \"0.24.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6b1629c9c557ef9b293568b338dddfc8208c98a18c59d722a9d53f859d9c9b62\"\ndependencies = [\n \"secp256k1-sys 0.6.1\",\n]\n\n[[package]]\nname = \"secp256k1\"\nversion = \"0.27.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"25996b82292a7a57ed3508f052cfff8640d38d32018784acd714758b43da9c8f\"\ndependencies = [\n \"secp256k1-sys 0.8.1\",\n]\n\n[[package]]\nname = \"secp256k1-sys\"\nversion = \"0.6.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"83080e2c2fc1006e625be82e5d1eb6a43b7fd9578b617fcc55814daf286bba4b\"\ndependencies = [\n \"cc\",\n]\n\n[[package]]\nname = \"secp256k1-sys\"\nversion = \"0.8.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"70a129b9e9efbfb223753b9163c4ab3b13cff7fd9c7f010fbac25ab4099fa07e\"\ndependencies = [\n \"cc\",\n]\n\n[[package]]\nname = \"secrecy\"\nversion = \"0.8.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9bd1c54ea06cfd2f6b63219704de0b9b4f72dcc2b8fdef820be6cd799780e91e\"\ndependencies = [\n \"zeroize\",\n]\n\n[[package]]\nname = \"semver\"\nversion = \"1.0.23\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"61697e0a1c7e512e84a621326239844a24d8207b4669b41bc18b32ea5cbf988b\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"serde\"\nversion = \"1.0.201\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"780f1cebed1629e4753a1a38a3c72d30b97ec044f0aef68cb26650a3c5cf363c\"\ndependencies = [\n \"serde_derive\",\n]\n\n[[package]]\nname = \"serde_derive\"\nversion = \"1.0.201\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c5e405930b9796f1c00bee880d03fc7e0bb4b9a11afc776885ffe84320da2865\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.61\",\n]\n\n[[package]]\nname = \"serde_json\"\nversion = \"1.0.117\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"455182ea6142b14f93f4bc5320a2b31c1f266b66a4a5c858b013302a5d8cbfc3\"\ndependencies = [\n \"itoa\",\n \"ryu\",\n \"serde\",\n]\n\n[[package]]\nname = \"serde_spanned\"\nversion = \"0.6.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"eb3622f419d1296904700073ea6cc23ad690adbd66f13ea683df73298736f0c1\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"sha2\"\nversion = \"0.8.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a256f46ea78a0c0d9ff00077504903ac881a1dafdc20da66545699e7776b3e69\"\ndependencies = [\n \"block-buffer 0.7.3\",\n \"digest 0.8.1\",\n \"fake-simd\",\n \"opaque-debug 0.2.3\",\n]\n\n[[package]]\nname = \"sha2\"\nversion = \"0.9.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4d58a1e1bf39749807d89cf2d98ac2dfa0ff1cb3faa38fbb64dd88ac8013d800\"\ndependencies = [\n \"block-buffer 0.9.0\",\n \"cfg-if\",\n \"cpufeatures\",\n \"digest 0.9.0\",\n \"opaque-debug 0.3.1\",\n]\n\n[[package]]\nname = \"sha2\"\nversion = \"0.10.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"793db75ad2bcafc3ffa7c68b215fee268f537982cd901d132f89c6343f3a3dc8\"\ndependencies = [\n \"cfg-if\",\n \"cpufeatures\",\n \"digest 0.10.7\",\n]\n\n[[package]]\nname = \"sha3\"\nversion = \"0.10.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"75872d278a8f37ef87fa0ddbda7802605cb18344497949862c0d4dcb291eba60\"\ndependencies = [\n \"digest 0.10.7\",\n \"keccak\",\n]\n\n[[package]]\nname = \"sharded-slab\"\nversion = \"0.1.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f40ca3c46823713e0d4209592e8d6e826aa57e928f09752619fc696c499637f6\"\ndependencies = [\n \"lazy_static\",\n]\n\n[[package]]\nname = \"shared_child\"\nversion = \"1.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b0d94659ad3c2137fef23ae75b03d5241d633f8acded53d672decfa0e6e0caef\"\ndependencies = [\n \"libc\",\n \"winapi\",\n]\n\n[[package]]\nname = \"signature\"\nversion = \"2.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"77549399552de45a898a580c1b41d445bf730df867cc44e6c0233bbc4b8329de\"\ndependencies = [\n \"digest 0.10.7\",\n \"rand_core 0.6.4\",\n]\n\n[[package]]\nname = \"simba\"\nversion = \"0.8.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"061507c94fc6ab4ba1c9a0305018408e312e17c041eb63bef8aa726fa33aceae\"\ndependencies = [\n \"approx\",\n \"num-complex\",\n \"num-traits\",\n \"paste\",\n \"wide\",\n]\n\n[[package]]\nname = \"slab\"\nversion = \"0.4.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8f92a496fb766b417c996b9c5e57daf2f7ad3b0bebe1ccfca4856390e3d3bb67\"\ndependencies = [\n \"autocfg\",\n]\n\n[[package]]\nname = \"smallvec\"\nversion = \"1.13.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3c5e1a9a646d36c3599cd173a41282daf47c44583ad367b8e6837255952e5c67\"\n\n[[package]]\nname = \"sp-api\"\nversion = \"21.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"86901915aaf9c73f9a8588fae10072c6082e7bf169edae175950410b77ad8103\"\ndependencies = [\n \"hash-db\",\n \"log\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"sp-api-proc-macro\",\n \"sp-core\",\n \"sp-externalities\",\n \"sp-metadata-ir\",\n \"sp-runtime\",\n \"sp-state-machine\",\n \"sp-std\",\n \"sp-trie\",\n \"sp-version\",\n \"thiserror\",\n]\n\n[[package]]\nname = \"sp-api-proc-macro\"\nversion = \"10.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"972809a3e3a583423bca2ee6d08eb5397814ef6b265abf43e888c4ed9916ff83\"\ndependencies = [\n \"Inflector\",\n \"blake2\",\n \"expander\",\n \"proc-macro-crate 1.3.1\",\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.61\",\n]\n\n[[package]]\nname = \"sp-application-crypto\"\nversion = \"25.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7fa730e4f3a2aec3f4ee777410599a86eb17067ee5410c58ab496e88d7bb840c\"\ndependencies = [\n \"parity-scale-codec\",\n \"scale-info\",\n \"serde\",\n \"sp-core\",\n \"sp-io\",\n \"sp-std\",\n]\n\n[[package]]\nname = \"sp-arithmetic\"\nversion = \"18.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2d3d3ff6d6d717d7563659e9e47e958d33ebd2d0b3d8b1a9961cf9832944375e\"\ndependencies = [\n \"integer-sqrt\",\n \"num-traits\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"serde\",\n \"sp-std\",\n \"static_assertions\",\n]\n\n[[package]]\nname = \"sp-core\"\nversion = \"23.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"412e2ec53b1bc63778e2d70c347224e6cd2e25c4bacb509585db85f0788747b7\"\ndependencies = [\n \"array-bytes\",\n \"arrayvec 0.7.4\",\n \"bitflags 1.3.2\",\n \"blake2\",\n \"bounded-collections\",\n \"bs58\",\n \"dyn-clonable\",\n \"ed25519-zebra\",\n \"futures\",\n \"hash-db\",\n \"hash256-std-hasher\",\n \"impl-serde\",\n \"lazy_static\",\n \"libsecp256k1\",\n \"log\",\n \"merlin 2.0.1\",\n \"parity-scale-codec\",\n \"parking_lot\",\n \"paste\",\n \"primitive-types\",\n \"rand 0.8.5\",\n \"regex\",\n \"scale-info\",\n \"schnorrkel 0.9.1\",\n \"secp256k1 0.24.3\",\n \"secrecy\",\n \"serde\",\n \"sp-core-hashing\",\n \"sp-debug-derive\",\n \"sp-externalities\",\n \"sp-runtime-interface\",\n \"sp-std\",\n \"sp-storage\",\n \"ss58-registry\",\n \"substrate-bip39\",\n \"thiserror\",\n \"tiny-bip39\",\n \"tracing\",\n \"zeroize\",\n]\n\n[[package]]\nname = \"sp-core-hashing\"\nversion = \"11.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"558116d02341b6f28b033c19a2a5fa555afa3c52628639170087e7685d51e743\"\ndependencies = [\n \"blake2b_simd\",\n \"byteorder\",\n \"digest 0.10.7\",\n \"sha2 0.10.8\",\n \"sha3\",\n \"twox-hash\",\n]\n\n[[package]]\nname = \"sp-core-hashing-proc-macro\"\nversion = \"11.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5d8681fa136cf504ba2b722fcb10d78df147c15d201b997e06c4c8c72258001a\"\ndependencies = [\n \"quote\",\n \"sp-core-hashing\",\n \"syn 2.0.61\",\n]\n\n[[package]]\nname = \"sp-debug-derive\"\nversion = \"10.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b4b235a0ad7124d58e6f0a728c8354da5b185b77bcf18b131b3a480cdaa23d95\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.61\",\n]\n\n[[package]]\nname = \"sp-externalities\"\nversion = \"0.21.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"588cf40c36de918f545d712ad1a70631ae71653e4a321506dfcd8fa6fd26453c\"\ndependencies = [\n \"environmental\",\n \"parity-scale-codec\",\n \"sp-std\",\n \"sp-storage\",\n]\n\n[[package]]\nname = \"sp-genesis-builder\"\nversion = \"0.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1ae51f8a24e1be6593be94581f3465a10d7c86ce403cbf9dcf703d14f35309d1\"\ndependencies = [\n \"serde_json\",\n \"sp-api\",\n \"sp-runtime\",\n \"sp-std\",\n]\n\n[[package]]\nname = \"sp-inherents\"\nversion = \"21.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4355b6a68001ff5308a09fe069c778c184030ee3b95271dd44841d056ecadf13\"\ndependencies = [\n \"async-trait\",\n \"impl-trait-for-tuples\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"sp-runtime\",\n \"sp-std\",\n \"thiserror\",\n]\n\n[[package]]\nname = \"sp-io\"\nversion = \"25.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e9926dba7d67d87e40f49e18ff6cfc01373d5be13e3d373f02182bb5ec8ab37b\"\ndependencies = [\n \"bytes\",\n \"ed25519-dalek\",\n \"libsecp256k1\",\n \"log\",\n \"parity-scale-codec\",\n \"rustversion\",\n \"secp256k1 0.24.3\",\n \"sp-core\",\n \"sp-externalities\",\n \"sp-keystore\",\n \"sp-runtime-interface\",\n \"sp-state-machine\",\n \"sp-std\",\n \"sp-tracing\",\n \"sp-trie\",\n \"tracing\",\n \"tracing-core\",\n]\n\n[[package]]\nname = \"sp-keystore\"\nversion = \"0.29.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"44f0f9546dd151881c60e75355806f1cbbc893f64aa465fc5bf87a47de59467b\"\ndependencies = [\n \"parity-scale-codec\",\n \"parking_lot\",\n \"sp-core\",\n \"sp-externalities\",\n \"thiserror\",\n]\n\n[[package]]\nname = \"sp-metadata-ir\"\nversion = \"0.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9d493f8324241f20d80cbc920fa0ab7a173907d0bf1a10812098a924cdff48d7\"\ndependencies = [\n \"frame-metadata\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"sp-std\",\n]\n\n[[package]]\nname = \"sp-panic-handler\"\nversion = \"10.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"261572cc0db4b41cf7587b4f7bdc15b8f83f748f17ae1c3c2f56a3e8e62ee913\"\ndependencies = [\n \"backtrace\",\n \"lazy_static\",\n \"regex\",\n]\n\n[[package]]\nname = \"sp-runtime\"\nversion = \"26.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f645e9e2c82d052ea48ed987a8789daca1c03f9b5ed1aa49cd080092eda85330\"\ndependencies = [\n \"either\",\n \"hash256-std-hasher\",\n \"impl-trait-for-tuples\",\n \"log\",\n \"parity-scale-codec\",\n \"paste\",\n \"rand 0.8.5\",\n \"scale-info\",\n \"serde\",\n \"sp-application-crypto\",\n \"sp-arithmetic\",\n \"sp-core\",\n \"sp-io\",\n \"sp-std\",\n \"sp-weights\",\n]\n\n[[package]]\nname = \"sp-runtime-interface\"\nversion = \"19.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6ef767d6e400ee54a420bcbc570030741420c2d938a6e379d21cab9875a339c5\"\ndependencies = [\n \"bytes\",\n \"impl-trait-for-tuples\",\n \"parity-scale-codec\",\n \"primitive-types\",\n \"sp-externalities\",\n \"sp-runtime-interface-proc-macro\",\n \"sp-std\",\n \"sp-storage\",\n \"sp-tracing\",\n \"sp-wasm-interface\",\n \"static_assertions\",\n]\n\n[[package]]\nname = \"sp-runtime-interface-proc-macro\"\nversion = \"13.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"fdd795a4a2205b64d95da897f85b7c83a0044f30df22b0ea282f8387dc6ca428\"\ndependencies = [\n \"Inflector\",\n \"proc-macro-crate 1.3.1\",\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.61\",\n]\n\n[[package]]\nname = \"sp-staking\"\nversion = \"21.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8acb11c6a7765d2df277110fe25bba075f697aba999b29a6c9b55eb2b95401b0\"\ndependencies = [\n \"impl-trait-for-tuples\",\n \"parity-scale-codec\",\n \"scale-info\",\n \"serde\",\n \"sp-core\",\n \"sp-runtime\",\n \"sp-std\",\n]\n\n[[package]]\nname = \"sp-state-machine\"\nversion = \"0.30.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"771dce7d78335718ab8475984b6dbc1f374777049ed1c308186679e611333be2\"\ndependencies = [\n \"hash-db\",\n \"log\",\n \"parity-scale-codec\",\n \"parking_lot\",\n \"rand 0.8.5\",\n \"smallvec\",\n \"sp-core\",\n \"sp-externalities\",\n \"sp-panic-handler\",\n \"sp-std\",\n \"sp-trie\",\n \"thiserror\",\n \"tracing\",\n \"trie-db\",\n]\n\n[[package]]\nname = \"sp-std\"\nversion = \"10.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3ed09ef1760e8be9b64b7f739f1cf9a94528130be475d8e4f2d1be1e690c9f9c\"\n\n[[package]]\nname = \"sp-storage\"\nversion = \"15.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c20f503280c004d94033a32cb84274ede30ef0b4b634770b1e7d595f8245bda4\"\ndependencies = [\n \"impl-serde\",\n \"parity-scale-codec\",\n \"ref-cast\",\n \"serde\",\n \"sp-debug-derive\",\n \"sp-std\",\n]\n\n[[package]]\nname = \"sp-timestamp\"\nversion = \"21.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"00d60953f7fc9b4f51bbcbac8f0cd8d6e6266a7cc18f661330308bbcec1eb053\"\ndependencies = [\n \"async-trait\",\n \"parity-scale-codec\",\n \"sp-inherents\",\n \"sp-runtime\",\n \"sp-std\",\n \"thiserror\",\n]\n\n[[package]]\nname = \"sp-tracing\"\nversion = \"12.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ebabec43485ebdb2fdb5c6f9b388590d4797a3888024d74724ada2f16b2113b8\"\ndependencies = [\n \"parity-scale-codec\",\n \"sp-std\",\n \"tracing\",\n \"tracing-core\",\n \"tracing-subscriber\",\n]\n\n[[package]]\nname = \"sp-trie\"\nversion = \"24.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e78585a84d02d1c71e8eb8c00ed586c22a46ad4e773d9ff65c8ed3b8e98b9f51\"\ndependencies = [\n \"ahash 0.8.11\",\n \"hash-db\",\n \"hashbrown 0.13.2\",\n \"lazy_static\",\n \"memory-db\",\n \"nohash-hasher\",\n \"parity-scale-codec\",\n \"parking_lot\",\n \"scale-info\",\n \"schnellru\",\n \"sp-core\",\n \"sp-std\",\n \"thiserror\",\n \"tracing\",\n \"trie-db\",\n \"trie-root\",\n]\n\n[[package]]\nname = \"sp-version\"\nversion = \"24.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"68a8d11b816cd2c68467c697aecca868ab5828af02ef093681a88554d045b878\"\ndependencies = [\n \"impl-serde\",\n \"parity-scale-codec\",\n \"parity-wasm\",\n \"scale-info\",\n \"serde\",\n \"sp-core-hashing-proc-macro\",\n \"sp-runtime\",\n \"sp-std\",\n \"sp-version-proc-macro\",\n \"thiserror\",\n]\n\n[[package]]\nname = \"sp-version-proc-macro\"\nversion = \"10.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6de7bbf860de93bb9b0ccd8e4a74e0dc40089e7192c397bac2b357d4da74e20c\"\ndependencies = [\n \"parity-scale-codec\",\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.61\",\n]\n\n[[package]]\nname = \"sp-wasm-interface\"\nversion = \"16.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ee009ac79098027f5990984e0c5ee2fd4883b16bbd6ab97931f28c2148aaa3ea\"\ndependencies = [\n \"anyhow\",\n \"impl-trait-for-tuples\",\n \"log\",\n \"parity-scale-codec\",\n \"sp-std\",\n \"wasmtime\",\n]\n\n[[package]]\nname = \"sp-weights\"\nversion = \"22.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"86566cae93412e40bea0db9e6b110a7379105412a9aed1af73b5d2fb69cb7000\"\ndependencies = [\n \"parity-scale-codec\",\n \"scale-info\",\n \"serde\",\n \"smallvec\",\n \"sp-arithmetic\",\n \"sp-core\",\n \"sp-debug-derive\",\n \"sp-std\",\n]\n\n[[package]]\nname = \"spin\"\nversion = \"0.9.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6980e8d7511241f8acf4aebddbb1ff938df5eebe98691418c4468d0b72a96a67\"\n\n[[package]]\nname = \"spki\"\nversion = \"0.7.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d91ed6c858b01f942cd56b37a94b3e0a1798290327d1236e4d9cf4eaca44d29d\"\ndependencies = [\n \"base64ct\",\n \"der\",\n]\n\n[[package]]\nname = \"ss58-registry\"\nversion = \"1.47.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4743ce898933fbff7bbf414f497c459a782d496269644b3d650a398ae6a487ba\"\ndependencies = [\n \"Inflector\",\n \"num-format\",\n \"proc-macro2\",\n \"quote\",\n \"serde\",\n \"serde_json\",\n \"unicode-xid\",\n]\n\n[[package]]\nname = \"stable_deref_trait\"\nversion = \"1.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a8f112729512f8e442d81f95a8a7ddf2b7c6b8a1a6f509a95864142b30cab2d3\"\n\n[[package]]\nname = \"static_assertions\"\nversion = \"1.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a2eb9349b6444b326872e140eb1cf5e7c522154d69e7a0ffb0fb81c06b37543f\"\n\n[[package]]\nname = \"strsim\"\nversion = \"0.10.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"73473c0e59e6d5812c5dfe2a064a6444949f089e20eec9a2e5506596494e4623\"\n\n[[package]]\nname = \"strsim\"\nversion = \"0.11.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7da8b5736845d9f2fcb837ea5d9e2628564b3b043a70948a3f0b778838c5fb4f\"\n\n[[package]]\nname = \"strum\"\nversion = \"0.24.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"063e6045c0e62079840579a7e47a355ae92f60eb74daaf156fb1e84ba164e63f\"\ndependencies = [\n \"strum_macros\",\n]\n\n[[package]]\nname = \"strum_macros\"\nversion = \"0.24.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1e385be0d24f186b4ce2f9982191e7101bb737312ad61c1f2f984f34bcf85d59\"\ndependencies = [\n \"heck 0.4.1\",\n \"proc-macro2\",\n \"quote\",\n \"rustversion\",\n \"syn 1.0.109\",\n]\n\n[[package]]\nname = \"substrate-bip39\"\nversion = \"0.4.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6a7590dc041b9bc2825e52ce5af8416c73dbe9d0654402bfd4b4941938b94d8f\"\ndependencies = [\n \"hmac 0.11.0\",\n \"pbkdf2 0.8.0\",\n \"schnorrkel 0.11.4\",\n \"sha2 0.9.9\",\n \"zeroize\",\n]\n\n[[package]]\nname = \"subtle\"\nversion = \"2.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6bdef32e8150c2a081110b42772ffe7d7c9032b606bc226c8260fd97e0976601\"\n\n[[package]]\nname = \"syn\"\nversion = \"1.0.109\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"72b64191b275b66ffe2469e8af2c1cfe3bafa67b529ead792a6d0160888b4237\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"unicode-ident\",\n]\n\n[[package]]\nname = \"syn\"\nversion = \"2.0.61\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c993ed8ccba56ae856363b1845da7266a7cb78e1d146c8a32d54b45a8b831fc9\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"unicode-ident\",\n]\n\n[[package]]\nname = \"tap\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"55937e1799185b12863d447f42597ed69d9928686b8d88a1df17376a097d8369\"\n\n[[package]]\nname = \"target-lexicon\"\nversion = \"0.12.14\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e1fc403891a21bcfb7c37834ba66a547a8f402146eba7265b5a6d88059c9ff2f\"\n\n[[package]]\nname = \"tempfile\"\nversion = \"3.10.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"85b77fafb263dd9d05cbeac119526425676db3784113aa9295c88498cbf8bff1\"\ndependencies = [\n \"cfg-if\",\n \"fastrand\",\n \"rustix 0.38.34\",\n \"windows-sys 0.52.0\",\n]\n\n[[package]]\nname = \"term_size\"\nversion = \"0.3.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1e4129646ca0ed8f45d09b929036bafad5377103edd06e50bf574b353d2b08d9\"\ndependencies = [\n \"libc\",\n \"winapi\",\n]\n\n[[package]]\nname = \"termcolor\"\nversion = \"1.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"06794f8f6c5c898b3275aebefa6b8a1cb24cd2c6c79397ab15774837a0bc5755\"\ndependencies = [\n \"winapi-util\",\n]\n\n[[package]]\nname = \"thiserror\"\nversion = \"1.0.60\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"579e9083ca58dd9dcf91a9923bb9054071b9ebbd800b342194c9feb0ee89fc18\"\ndependencies = [\n \"thiserror-impl\",\n]\n\n[[package]]\nname = \"thiserror-impl\"\nversion = \"1.0.60\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e2470041c06ec3ac1ab38d0356a6119054dedaea53e12fbefc0de730a1c08524\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.61\",\n]\n\n[[package]]\nname = \"thread_local\"\nversion = \"1.1.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8b9ef9bad013ada3808854ceac7b46812a6465ba368859a37e2100283d2d719c\"\ndependencies = [\n \"cfg-if\",\n \"once_cell\",\n]\n\n[[package]]\nname = \"tiny-bip39\"\nversion = \"1.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"62cc94d358b5a1e84a5cb9109f559aa3c4d634d2b1b4de3d0fa4adc7c78e2861\"\ndependencies = [\n \"anyhow\",\n \"hmac 0.12.1\",\n \"once_cell\",\n \"pbkdf2 0.11.0\",\n \"rand 0.8.5\",\n \"rustc-hash\",\n \"sha2 0.10.8\",\n \"thiserror\",\n \"unicode-normalization\",\n \"wasm-bindgen\",\n \"zeroize\",\n]\n\n[[package]]\nname = \"tiny-keccak\"\nversion = \"2.0.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2c9d3793400a45f954c52e73d068316d76b6f4e36977e3fcebb13a2721e80237\"\ndependencies = [\n \"crunchy\",\n]\n\n[[package]]\nname = \"tinyvec\"\nversion = \"1.6.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"87cc5ceb3875bb20c2890005a4e226a4651264a5c75edb2421b52861a0a0cb50\"\ndependencies = [\n \"tinyvec_macros\",\n]\n\n[[package]]\nname = \"tinyvec_macros\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1f3ccbac311fea05f86f61904b462b55fb3df8837a366dfc601a0161d0532f20\"\n\n[[package]]\nname = \"toml\"\nversion = \"0.7.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"dd79e69d3b627db300ff956027cc6c3798cef26d22526befdfcd12feeb6d2257\"\ndependencies = [\n \"serde\",\n \"serde_spanned\",\n \"toml_datetime\",\n \"toml_edit 0.19.15\",\n]\n\n[[package]]\nname = \"toml\"\nversion = \"0.8.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e9dd1545e8208b4a5af1aa9bbd0b4cf7e9ea08fabc5d0a5c67fcaafa17433aa3\"\ndependencies = [\n \"serde\",\n \"serde_spanned\",\n \"toml_datetime\",\n \"toml_edit 0.22.12\",\n]\n\n[[package]]\nname = \"toml_datetime\"\nversion = \"0.6.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3550f4e9685620ac18a50ed434eb3aec30db8ba93b0287467bca5826ea25baf1\"\ndependencies = [\n \"serde\",\n]\n\n[[package]]\nname = \"toml_edit\"\nversion = \"0.19.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1b5bb770da30e5cbfde35a2d7b9b8a2c4b8ef89548a7a6aeab5c9a576e3e7421\"\ndependencies = [\n \"indexmap 2.2.6\",\n \"serde\",\n \"serde_spanned\",\n \"toml_datetime\",\n \"winnow 0.5.40\",\n]\n\n[[package]]\nname = \"toml_edit\"\nversion = \"0.21.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6a8534fd7f78b5405e860340ad6575217ce99f38d4d5c8f2442cb5ecb50090e1\"\ndependencies = [\n \"indexmap 2.2.6\",\n \"toml_datetime\",\n \"winnow 0.5.40\",\n]\n\n[[package]]\nname = \"toml_edit\"\nversion = \"0.22.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d3328d4f68a705b2a4498da1d580585d39a6510f98318a2cec3018a7ec61ddef\"\ndependencies = [\n \"indexmap 2.2.6\",\n \"serde\",\n \"serde_spanned\",\n \"toml_datetime\",\n \"winnow 0.6.8\",\n]\n\n[[package]]\nname = \"tracing\"\nversion = \"0.1.40\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c3523ab5a71916ccf420eebdf5521fcef02141234bbc0b8a49f2fdc4544364ef\"\ndependencies = [\n \"pin-project-lite\",\n \"tracing-attributes\",\n \"tracing-core\",\n]\n\n[[package]]\nname = \"tracing-attributes\"\nversion = \"0.1.27\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"34704c8d6ebcbc939824180af020566b01a7c01f80641264eba0999f6c2b6be7\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.61\",\n]\n\n[[package]]\nname = \"tracing-core\"\nversion = \"0.1.32\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c06d3da6113f116aaee68e4d601191614c9053067f9ab7f6edbcb161237daa54\"\ndependencies = [\n \"once_cell\",\n \"valuable\",\n]\n\n[[package]]\nname = \"tracing-log\"\nversion = \"0.1.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f751112709b4e791d8ce53e32c4ed2d353565a795ce84da2285393f41557bdf2\"\ndependencies = [\n \"log\",\n \"once_cell\",\n \"tracing-core\",\n]\n\n[[package]]\nname = \"tracing-serde\"\nversion = \"0.1.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bc6b213177105856957181934e4920de57730fc69bf42c37ee5bb664d406d9e1\"\ndependencies = [\n \"serde\",\n \"tracing-core\",\n]\n\n[[package]]\nname = \"tracing-subscriber\"\nversion = \"0.2.25\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0e0d2eaa99c3c2e41547cfa109e910a68ea03823cccad4a0525dcbc9b01e8c71\"\ndependencies = [\n \"ansi_term\",\n \"chrono\",\n \"lazy_static\",\n \"matchers\",\n \"regex\",\n \"serde\",\n \"serde_json\",\n \"sharded-slab\",\n \"smallvec\",\n \"thread_local\",\n \"tracing\",\n \"tracing-core\",\n \"tracing-log\",\n \"tracing-serde\",\n]\n\n[[package]]\nname = \"trie-db\"\nversion = \"0.27.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"767abe6ffed88a1889671a102c2861ae742726f52e0a5a425b92c9fbfa7e9c85\"\ndependencies = [\n \"hash-db\",\n \"hashbrown 0.13.2\",\n \"log\",\n \"rustc-hex\",\n \"smallvec\",\n]\n\n[[package]]\nname = \"trie-root\"\nversion = \"0.18.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d4ed310ef5ab98f5fa467900ed906cb9232dd5376597e00fd4cba2a449d06c0b\"\ndependencies = [\n \"hash-db\",\n]\n\n[[package]]\nname = \"tt-call\"\nversion = \"1.0.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f4f195fd851901624eee5a58c4bb2b4f06399148fcd0ed336e6f1cb60a9881df\"\n\n[[package]]\nname = \"twox-hash\"\nversion = \"1.6.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"97fee6b57c6a41524a810daee9286c02d7752c4253064d0b05472833a438f675\"\ndependencies = [\n \"cfg-if\",\n \"digest 0.10.7\",\n \"rand 0.8.5\",\n \"static_assertions\",\n]\n\n[[package]]\nname = \"typenum\"\nversion = \"1.17.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"42ff0bf0c66b8238c6f3b578df37d0b7848e55df8577b3f74f92a69acceeb825\"\n\n[[package]]\nname = \"uint\"\nversion = \"0.9.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"76f64bba2c53b04fcab63c01a7d7427eadc821e3bc48c34dc9ba29c501164b52\"\ndependencies = [\n \"byteorder\",\n \"crunchy\",\n \"hex\",\n \"static_assertions\",\n]\n\n[[package]]\nname = \"unicode-bidi\"\nversion = \"0.3.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"08f95100a766bf4f8f28f90d77e0a5461bbdb219042e7679bebe79004fed8d75\"\n\n[[package]]\nname = \"unicode-ident\"\nversion = \"1.0.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3354b9ac3fae1ff6755cb6db53683adb661634f67557942dea4facebec0fee4b\"\n\n[[package]]\nname = \"unicode-normalization\"\nversion = \"0.1.23\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a56d1686db2308d901306f92a263857ef59ea39678a5458e7cb17f01415101f5\"\ndependencies = [\n \"tinyvec\",\n]\n\n[[package]]\nname = \"unicode-segmentation\"\nversion = \"1.11.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d4c87d22b6e3f4a18d4d40ef354e97c90fcb14dd91d7dc0aa9d8a1172ebf7202\"\n\n[[package]]\nname = \"unicode-width\"\nversion = \"0.1.12\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"68f5e5f3158ecfd4b8ff6fe086db7c8467a2dfdac97fe420f2b7c4aa97af66d6\"\n\n[[package]]\nname = \"unicode-xid\"\nversion = \"0.2.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f962df74c8c05a667b5ee8bcf162993134c104e96440b663c8daa176dc772d8c\"\n\n[[package]]\nname = \"url\"\nversion = \"2.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"31e6302e3bb753d46e83516cae55ae196fc0c309407cf11ab35cc51a4c2a4633\"\ndependencies = [\n \"form_urlencoded\",\n \"idna\",\n \"percent-encoding\",\n \"serde\",\n]\n\n[[package]]\nname = \"utf8parse\"\nversion = \"0.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"711b9620af191e0cdc7468a8d14e709c3dcdb115b36f838e601583af800a370a\"\n\n[[package]]\nname = \"valuable\"\nversion = \"0.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"830b7e5d4d90034032940e4ace0d9a9a057e7a45cd94e6c007832e39edb82f6d\"\n\n[[package]]\nname = \"version_check\"\nversion = \"0.9.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"49874b5167b65d7193b8aba1567f5c7d93d001cafc34600cee003eda787e483f\"\n\n[[package]]\nname = \"walkdir\"\nversion = \"2.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"29790946404f91d9c5d06f9874efddea1dc06c5efe94541a7d6863108e3a5e4b\"\ndependencies = [\n \"same-file\",\n \"winapi-util\",\n]\n\n[[package]]\nname = \"wasi\"\nversion = \"0.9.0+wasi-snapshot-preview1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cccddf32554fecc6acb585f82a32a72e28b48f8c4c1883ddfeeeaa96f7d8e519\"\n\n[[package]]\nname = \"wasi\"\nversion = \"0.11.0+wasi-snapshot-preview1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9c8d87e72b64a3b4db28d11ce29237c246188f4f51057d65a7eab63b7987e423\"\n\n[[package]]\nname = \"wasm-bindgen\"\nversion = \"0.2.92\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4be2531df63900aeb2bca0daaaddec08491ee64ceecbee5076636a3b026795a8\"\ndependencies = [\n \"cfg-if\",\n \"wasm-bindgen-macro\",\n]\n\n[[package]]\nname = \"wasm-bindgen-backend\"\nversion = \"0.2.92\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"614d787b966d3989fa7bb98a654e369c762374fd3213d212cfc0251257e747da\"\ndependencies = [\n \"bumpalo\",\n \"log\",\n \"once_cell\",\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.61\",\n \"wasm-bindgen-shared\",\n]\n\n[[package]]\nname = \"wasm-bindgen-macro\"\nversion = \"0.2.92\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a1f8823de937b71b9460c0c34e25f3da88250760bec0ebac694b49997550d726\"\ndependencies = [\n \"quote\",\n \"wasm-bindgen-macro-support\",\n]\n\n[[package]]\nname = \"wasm-bindgen-macro-support\"\nversion = \"0.2.92\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e94f17b526d0a461a191c78ea52bbce64071ed5c04c9ffe424dcb38f74171bb7\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.61\",\n \"wasm-bindgen-backend\",\n \"wasm-bindgen-shared\",\n]\n\n[[package]]\nname = \"wasm-bindgen-shared\"\nversion = \"0.2.92\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"af190c94f2773fdb3729c55b007a722abb5384da03bc0986df4c289bf5567e96\"\n\n[[package]]\nname = \"wasm-encoder\"\nversion = \"0.207.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d996306fb3aeaee0d9157adbe2f670df0236caf19f6728b221e92d0f27b3fe17\"\ndependencies = [\n \"leb128\",\n]\n\n[[package]]\nname = \"wasm-instrument\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2a47ecb37b9734d1085eaa5ae1a81e60801fd8c28d4cabdd8aedb982021918bc\"\ndependencies = [\n \"parity-wasm\",\n]\n\n[[package]]\nname = \"wasm-opt\"\nversion = \"0.113.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"65a2799e08026234b07b44da6363703974e75be21430cef00756bbc438c8ff8a\"\ndependencies = [\n \"anyhow\",\n \"libc\",\n \"strum\",\n \"strum_macros\",\n \"tempfile\",\n \"thiserror\",\n \"wasm-opt-cxx-sys\",\n \"wasm-opt-sys\",\n]\n\n[[package]]\nname = \"wasm-opt-cxx-sys\"\nversion = \"0.113.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c8d26f86d1132245e8bcea8fac7f02b10fb885b6696799969c94d7d3c14db5e1\"\ndependencies = [\n \"anyhow\",\n \"cxx\",\n \"cxx-build\",\n \"wasm-opt-sys\",\n]\n\n[[package]]\nname = \"wasm-opt-sys\"\nversion = \"0.113.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"497d069cd3420cdd52154a320b901114a20946878e2de62c670f9d906e472370\"\ndependencies = [\n \"anyhow\",\n \"cc\",\n \"cxx\",\n \"cxx-build\",\n]\n\n[[package]]\nname = \"wasmi\"\nversion = \"0.31.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"77a8281d1d660cdf54c76a3efa9ddd0c270cada1383a995db3ccb43d166456c7\"\ndependencies = [\n \"smallvec\",\n \"spin\",\n \"wasmi_arena\",\n \"wasmi_core\",\n \"wasmparser-nostd\",\n]\n\n[[package]]\nname = \"wasmi_arena\"\nversion = \"0.4.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"104a7f73be44570cac297b3035d76b169d6599637631cf37a1703326a0727073\"\n\n[[package]]\nname = \"wasmi_core\"\nversion = \"0.13.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"dcf1a7db34bff95b85c261002720c00c3a6168256dcb93041d3fa2054d19856a\"\ndependencies = [\n \"downcast-rs\",\n \"libm\",\n \"num-traits\",\n \"paste\",\n]\n\n[[package]]\nname = \"wasmparser\"\nversion = \"0.102.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"48134de3d7598219ab9eaf6b91b15d8e50d31da76b8519fe4ecfcec2cf35104b\"\ndependencies = [\n \"indexmap 1.9.3\",\n \"url\",\n]\n\n[[package]]\nname = \"wasmparser-nostd\"\nversion = \"0.100.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d5a015fe95f3504a94bb1462c717aae75253e39b9dd6c3fb1062c934535c64aa\"\ndependencies = [\n \"indexmap-nostd\",\n]\n\n[[package]]\nname = \"wasmtime\"\nversion = \"8.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f907fdead3153cb9bfb7a93bbd5b62629472dc06dee83605358c64c52ed3dda9\"\ndependencies = [\n \"anyhow\",\n \"bincode\",\n \"cfg-if\",\n \"indexmap 1.9.3\",\n \"libc\",\n \"log\",\n \"object 0.30.4\",\n \"once_cell\",\n \"paste\",\n \"psm\",\n \"serde\",\n \"target-lexicon\",\n \"wasmparser\",\n \"wasmtime-environ\",\n \"wasmtime-jit\",\n \"wasmtime-runtime\",\n \"windows-sys 0.45.0\",\n]\n\n[[package]]\nname = \"wasmtime-asm-macros\"\nversion = \"8.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d3b9daa7c14cd4fa3edbf69de994408d5f4b7b0959ac13fa69d465f6597f810d\"\ndependencies = [\n \"cfg-if\",\n]\n\n[[package]]\nname = \"wasmtime-environ\"\nversion = \"8.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a990198cee4197423045235bf89d3359e69bd2ea031005f4c2d901125955c949\"\ndependencies = [\n \"anyhow\",\n \"cranelift-entity\",\n \"gimli 0.27.3\",\n \"indexmap 1.9.3\",\n \"log\",\n \"object 0.30.4\",\n \"serde\",\n \"target-lexicon\",\n \"thiserror\",\n \"wasmparser\",\n \"wasmtime-types\",\n]\n\n[[package]]\nname = \"wasmtime-jit\"\nversion = \"8.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0de48df552cfca1c9b750002d3e07b45772dd033b0b206d5c0968496abf31244\"\ndependencies = [\n \"addr2line 0.19.0\",\n \"anyhow\",\n \"bincode\",\n \"cfg-if\",\n \"cpp_demangle\",\n \"gimli 0.27.3\",\n \"log\",\n \"object 0.30.4\",\n \"rustc-demangle\",\n \"serde\",\n \"target-lexicon\",\n \"wasmtime-environ\",\n \"wasmtime-jit-icache-coherence\",\n \"wasmtime-runtime\",\n \"windows-sys 0.45.0\",\n]\n\n[[package]]\nname = \"wasmtime-jit-debug\"\nversion = \"8.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6e0554b84c15a27d76281d06838aed94e13a77d7bf604bbbaf548aa20eb93846\"\ndependencies = [\n \"once_cell\",\n]\n\n[[package]]\nname = \"wasmtime-jit-icache-coherence\"\nversion = \"8.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"aecae978b13f7f67efb23bd827373ace4578f2137ec110bbf6a4a7cde4121bbd\"\ndependencies = [\n \"cfg-if\",\n \"libc\",\n \"windows-sys 0.45.0\",\n]\n\n[[package]]\nname = \"wasmtime-runtime\"\nversion = \"8.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"658cf6f325232b6760e202e5255d823da5e348fdea827eff0a2a22319000b441\"\ndependencies = [\n \"anyhow\",\n \"cc\",\n \"cfg-if\",\n \"indexmap 1.9.3\",\n \"libc\",\n \"log\",\n \"mach\",\n \"memfd\",\n \"memoffset\",\n \"paste\",\n \"rand 0.8.5\",\n \"rustix 0.36.17\",\n \"wasmtime-asm-macros\",\n \"wasmtime-environ\",\n \"wasmtime-jit-debug\",\n \"windows-sys 0.45.0\",\n]\n\n[[package]]\nname = \"wasmtime-types\"\nversion = \"8.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a4f6fffd2a1011887d57f07654dd112791e872e3ff4a2e626aee8059ee17f06f\"\ndependencies = [\n \"cranelift-entity\",\n \"serde\",\n \"thiserror\",\n \"wasmparser\",\n]\n\n[[package]]\nname = \"wast\"\nversion = \"207.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0e40be9fd494bfa501309487d2dc0b3f229be6842464ecbdc54eac2679c84c93\"\ndependencies = [\n \"bumpalo\",\n \"leb128\",\n \"memchr\",\n \"unicode-width\",\n \"wasm-encoder\",\n]\n\n[[package]]\nname = \"wat\"\nversion = \"1.207.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8eb2b15e2d5f300f5e1209e7dc237f2549edbd4203655b6c6cab5cf180561ee7\"\ndependencies = [\n \"wast\",\n]\n\n[[package]]\nname = \"which\"\nversion = \"4.4.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"87ba24419a2078cd2b0f2ede2691b6c66d8e47836da3b6db8265ebad47afbfc7\"\ndependencies = [\n \"either\",\n \"home\",\n \"once_cell\",\n \"rustix 0.38.34\",\n]\n\n[[package]]\nname = \"wide\"\nversion = \"0.7.17\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0f0e39d2c603fdc0504b12b458cf1f34e0b937ed2f4f2dc20796e3e86f34e11f\"\ndependencies = [\n \"bytemuck\",\n \"safe_arch\",\n]\n\n[[package]]\nname = \"winapi\"\nversion = \"0.3.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5c839a674fcd7a98952e593242ea400abe93992746761e38641405d28b00f419\"\ndependencies = [\n \"winapi-i686-pc-windows-gnu\",\n \"winapi-x86_64-pc-windows-gnu\",\n]\n\n[[package]]\nname = \"winapi-i686-pc-windows-gnu\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ac3b87c63620426dd9b991e5ce0329eff545bccbbb34f3be09ff6fb6ab51b7b6\"\n\n[[package]]\nname = \"winapi-util\"\nversion = \"0.1.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4d4cc384e1e73b93bafa6fb4f1df8c41695c8a91cf9c4c64358067d15a7b6c6b\"\ndependencies = [\n \"windows-sys 0.52.0\",\n]\n\n[[package]]\nname = \"winapi-x86_64-pc-windows-gnu\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f\"\n\n[[package]]\nname = \"windows-core\"\nversion = \"0.52.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"33ab640c8d7e35bf8ba19b884ba838ceb4fba93a4e8c65a9059d08afcfc683d9\"\ndependencies = [\n \"windows-targets 0.52.5\",\n]\n\n[[package]]\nname = \"windows-sys\"\nversion = \"0.45.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"75283be5efb2831d37ea142365f009c02ec203cd29a3ebecbc093d52315b66d0\"\ndependencies = [\n \"windows-targets 0.42.2\",\n]\n\n[[package]]\nname = \"windows-sys\"\nversion = \"0.48.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"677d2418bec65e3338edb076e806bc1ec15693c5d0104683f2efe857f61056a9\"\ndependencies = [\n \"windows-targets 0.48.5\",\n]\n\n[[package]]\nname = \"windows-sys\"\nversion = \"0.52.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"282be5f36a8ce781fad8c8ae18fa3f9beff57ec1b52cb3de0789201425d9a33d\"\ndependencies = [\n \"windows-targets 0.52.5\",\n]\n\n[[package]]\nname = \"windows-targets\"\nversion = \"0.42.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8e5180c00cd44c9b1c88adb3693291f1cd93605ded80c250a75d472756b4d071\"\ndependencies = [\n \"windows_aarch64_gnullvm 0.42.2\",\n \"windows_aarch64_msvc 0.42.2\",\n \"windows_i686_gnu 0.42.2\",\n \"windows_i686_msvc 0.42.2\",\n \"windows_x86_64_gnu 0.42.2\",\n \"windows_x86_64_gnullvm 0.42.2\",\n \"windows_x86_64_msvc 0.42.2\",\n]\n\n[[package]]\nname = \"windows-targets\"\nversion = \"0.48.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9a2fa6e2155d7247be68c096456083145c183cbbbc2764150dda45a87197940c\"\ndependencies = [\n \"windows_aarch64_gnullvm 0.48.5\",\n \"windows_aarch64_msvc 0.48.5\",\n \"windows_i686_gnu 0.48.5\",\n \"windows_i686_msvc 0.48.5\",\n \"windows_x86_64_gnu 0.48.5\",\n \"windows_x86_64_gnullvm 0.48.5\",\n \"windows_x86_64_msvc 0.48.5\",\n]\n\n[[package]]\nname = \"windows-targets\"\nversion = \"0.52.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6f0713a46559409d202e70e28227288446bf7841d3211583a4b53e3f6d96e7eb\"\ndependencies = [\n \"windows_aarch64_gnullvm 0.52.5\",\n \"windows_aarch64_msvc 0.52.5\",\n \"windows_i686_gnu 0.52.5\",\n \"windows_i686_gnullvm\",\n \"windows_i686_msvc 0.52.5\",\n \"windows_x86_64_gnu 0.52.5\",\n \"windows_x86_64_gnullvm 0.52.5\",\n \"windows_x86_64_msvc 0.52.5\",\n]\n\n[[package]]\nname = \"windows_aarch64_gnullvm\"\nversion = \"0.42.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"597a5118570b68bc08d8d59125332c54f1ba9d9adeedeef5b99b02ba2b0698f8\"\n\n[[package]]\nname = \"windows_aarch64_gnullvm\"\nversion = \"0.48.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2b38e32f0abccf9987a4e3079dfb67dcd799fb61361e53e2882c3cbaf0d905d8\"\n\n[[package]]\nname = \"windows_aarch64_gnullvm\"\nversion = \"0.52.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7088eed71e8b8dda258ecc8bac5fb1153c5cffaf2578fc8ff5d61e23578d3263\"\n\n[[package]]\nname = \"windows_aarch64_msvc\"\nversion = \"0.42.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e08e8864a60f06ef0d0ff4ba04124db8b0fb3be5776a5cd47641e942e58c4d43\"\n\n[[package]]\nname = \"windows_aarch64_msvc\"\nversion = \"0.48.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"dc35310971f3b2dbbf3f0690a219f40e2d9afcf64f9ab7cc1be722937c26b4bc\"\n\n[[package]]\nname = \"windows_aarch64_msvc\"\nversion = \"0.52.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9985fd1504e250c615ca5f281c3f7a6da76213ebd5ccc9561496568a2752afb6\"\n\n[[package]]\nname = \"windows_i686_gnu\"\nversion = \"0.42.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c61d927d8da41da96a81f029489353e68739737d3beca43145c8afec9a31a84f\"\n\n[[package]]\nname = \"windows_i686_gnu\"\nversion = \"0.48.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a75915e7def60c94dcef72200b9a8e58e5091744960da64ec734a6c6e9b3743e\"\n\n[[package]]\nname = \"windows_i686_gnu\"\nversion = \"0.52.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"88ba073cf16d5372720ec942a8ccbf61626074c6d4dd2e745299726ce8b89670\"\n\n[[package]]\nname = \"windows_i686_gnullvm\"\nversion = \"0.52.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"87f4261229030a858f36b459e748ae97545d6f1ec60e5e0d6a3d32e0dc232ee9\"\n\n[[package]]\nname = \"windows_i686_msvc\"\nversion = \"0.42.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"44d840b6ec649f480a41c8d80f9c65108b92d89345dd94027bfe06ac444d1060\"\n\n[[package]]\nname = \"windows_i686_msvc\"\nversion = \"0.48.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8f55c233f70c4b27f66c523580f78f1004e8b5a8b659e05a4eb49d4166cca406\"\n\n[[package]]\nname = \"windows_i686_msvc\"\nversion = \"0.52.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"db3c2bf3d13d5b658be73463284eaf12830ac9a26a90c717b7f771dfe97487bf\"\n\n[[package]]\nname = \"windows_x86_64_gnu\"\nversion = \"0.42.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8de912b8b8feb55c064867cf047dda097f92d51efad5b491dfb98f6bbb70cb36\"\n\n[[package]]\nname = \"windows_x86_64_gnu\"\nversion = \"0.48.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"53d40abd2583d23e4718fddf1ebec84dbff8381c07cae67ff7768bbf19c6718e\"\n\n[[package]]\nname = \"windows_x86_64_gnu\"\nversion = \"0.52.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4e4246f76bdeff09eb48875a0fd3e2af6aada79d409d33011886d3e1581517d9\"\n\n[[package]]\nname = \"windows_x86_64_gnullvm\"\nversion = \"0.42.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"26d41b46a36d453748aedef1486d5c7a85db22e56aff34643984ea85514e94a3\"\n\n[[package]]\nname = \"windows_x86_64_gnullvm\"\nversion = \"0.48.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0b7b52767868a23d5bab768e390dc5f5c55825b6d30b86c844ff2dc7414044cc\"\n\n[[package]]\nname = \"windows_x86_64_gnullvm\"\nversion = \"0.52.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"852298e482cd67c356ddd9570386e2862b5673c85bd5f88df9ab6802b334c596\"\n\n[[package]]\nname = \"windows_x86_64_msvc\"\nversion = \"0.42.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9aec5da331524158c6d1a4ac0ab1541149c0b9505fde06423b02f5ef0106b9f0\"\n\n[[package]]\nname = \"windows_x86_64_msvc\"\nversion = \"0.48.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ed94fce61571a4006852b7389a063ab983c02eb1bb37b47f8272ce92d06d9538\"\n\n[[package]]\nname = \"windows_x86_64_msvc\"\nversion = \"0.52.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"bec47e5bfd1bff0eeaf6d8b485cc1074891a197ab4225d504cb7a1ab88b02bf0\"\n\n[[package]]\nname = \"winnow\"\nversion = \"0.5.40\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f593a95398737aeed53e489c785df13f3618e41dbcd6718c6addbf1395aa6876\"\ndependencies = [\n \"memchr\",\n]\n\n[[package]]\nname = \"winnow\"\nversion = \"0.6.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c3c52e9c97a68071b23e836c9380edae937f17b9c4667bd021973efc689f618d\"\ndependencies = [\n \"memchr\",\n]\n\n[[package]]\nname = \"wyz\"\nversion = \"0.5.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"05f360fc0b24296329c78fda852a1e9ae82de9cf7b27dae4b7f62f118f77b9ed\"\ndependencies = [\n \"tap\",\n]\n\n[[package]]\nname = \"xxhash-rust\"\nversion = \"0.8.10\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"927da81e25be1e1a2901d59b81b37dd2efd1fc9c9345a55007f09bf5a2d3ee03\"\n\n[[package]]\nname = \"zerocopy\"\nversion = \"0.7.34\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ae87e3fcd617500e5d106f0380cf7b77f3c6092aae37191433159dda23cfb087\"\ndependencies = [\n \"zerocopy-derive\",\n]\n\n[[package]]\nname = \"zerocopy-derive\"\nversion = \"0.7.34\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"15e934569e47891f7d9411f1a451d947a60e000ab3bd24fbb970f000387d1b3b\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.61\",\n]\n\n[[package]]\nname = \"zeroize\"\nversion = \"1.7.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"525b4ec142c6b68a2d10f01f7bbf6755599ca3f81ea53b8431b7dd348f5fdb2d\"\ndependencies = [\n \"zeroize_derive\",\n]\n\n[[package]]\nname = \"zeroize_derive\"\nversion = \"1.4.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ce36e65b0d2999d2aafac989fb249189a141aee1f53c612c1f37d72631959f69\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn 2.0.61\",\n]\n\n[[package]]\nname = \"zip\"\nversion = \"0.6.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"760394e246e4c28189f19d488c058bf16f564016aefac5d32bb1f3b51d5e9261\"\ndependencies = [\n \"byteorder\",\n \"crc32fast\",\n \"crossbeam-utils\",\n]\n",
        "drink_tests/Cargo.toml":"[package]\nname = \"drink_test\"\nversion = \"0.1.0\"\nedition = \"2021\"\npublish = false\n\n[dependencies]\ndrink = { version = \"=0.5.4\", features = [\"session\"] }\nscale = { package = \"parity-scale-codec\", version = \"3\", default-features = false, features = [\n    \"derive\",\n] }\nserde = \"1.0.193\"\nserde_json = \"1.0.108\"\n\n[lib]\nname = \"drink_test\"\npath = \"lib.rs\"\n",
        "drink_tests/helpers.rs":"use drink::{\n    chain_api::ChainApi,\n    runtime::MinimalRuntime,\n    session::{contract_transcode::ContractMessageTranscoder, Session, NO_ARGS},\n    AccountId32,\n};\nuse std::{error::Error, rc::Rc};\n\n// Publicize all sources module methods (hash_*, transcoder_*, bytes_*)\npub use crate::sources::*;\n\npub const SECOND: u64 = 1_000;\npub const DAY: u64 = 86400 * SECOND;\npub const YEAR: u64 = DAY * 365_25 / 100; // https://docs.alephzero.org/aleph-zero/use/stake/staking-rewards\npub const BIPS: u128 = 10000;\n\n#[derive(Debug, scale::Decode)]\npub struct Agent {\n    pub address: AccountId32,\n    pub weight: u128,\n    pub disabled: bool,\n}\n\n#[derive(Debug, scale::Decode, scale::Encode, serde::Deserialize, serde::Serialize)]\npub struct WeightUpdate {\n    pub agent: AccountId32,\n    pub weight: u128,\n    pub increase: bool,\n}\n\npub fn update_days(\n    mut sess: Session<MinimalRuntime>,\n    days: u64,\n) -> Session<MinimalRuntime> {\n    let current_time = sess.chain_api().get_timestamp();\n    let time_update = days * DAY;\n    sess.chain_api().set_timestamp(current_time + time_update);\n    sess\n}\npub fn update_in_milliseconds(\n    mut sess: Session<MinimalRuntime>,\n    milliseconds: u64,\n) -> Session<MinimalRuntime> {\n    let current_time = sess.chain_api().get_timestamp();\n    sess.chain_api().set_timestamp(current_time + milliseconds);\n    sess\n}\n\npub fn call_add_agent(\n    sess: Session<MinimalRuntime>,\n    registry: &AccountId32,\n    sender: &AccountId32,\n    admin: &AccountId32,\n    validator: &AccountId32,\n    pool_create_amount: u128,\n) -> Result<(AccountId32, Session<MinimalRuntime>), Box<dyn Error>> {\n    let sess: Session<MinimalRuntime> = call_function(\n        sess,\n        &registry,\n        &sender,\n        String::from(\"IRegistry::add_agent\"),\n        Some([\n            admin.to_string(),\n            validator.to_string(),\n        ].to_vec()),\n        Some(pool_create_amount),\n        transcoder_registry(),\n    )?;\n\n    let (_, agents, sess) = get_agents(sess, &registry)?;\n\n    Ok((agents[agents.len() - 1].address.clone(), sess))\n}\npub fn call_update_agents(\n    sess: Session<MinimalRuntime>,\n    registry: &AccountId32,\n    sender: &AccountId32,\n    updates: Vec<WeightUpdate>,\n) -> Result<Session<MinimalRuntime>, Box<dyn Error>> {\n    let sess: Session<MinimalRuntime> = call_function(\n        sess,\n        &registry,\n        &sender,\n        String::from(\"IRegistry::update_agents\"),\n        Some(vec![serde_json::to_string(&updates).unwrap()]),\n        None,\n        transcoder_registry(),\n    )?;\n    Ok(sess)\n}\npub fn call_disable_agent(\n    sess: Session<MinimalRuntime>,\n    registry: &AccountId32,\n    sender: &AccountId32,\n    agent: &AccountId32,\n) -> Result<Session<MinimalRuntime>, Box<dyn Error>> {\n    let sess: Session<MinimalRuntime> = call_function(\n        sess,\n        &registry,\n        &sender,\n        String::from(\"IRegistry::disable_agent\"),\n        Some([agent.to_string()].to_vec()),\n        None,\n        transcoder_registry(),\n    )?;\n    Ok(sess)\n}\npub fn call_remove_agent(\n    sess: Session<MinimalRuntime>,\n    registry: &AccountId32,\n    sender: &AccountId32,\n    agent: &AccountId32,\n) -> Result<Session<MinimalRuntime>, Box<dyn Error>> {\n    let sess: Session<MinimalRuntime> = call_function(\n        sess,\n        &registry,\n        &sender,\n        String::from(\"IRegistry::remove_agent\"),\n        Some([agent.to_string()].to_vec()),\n        None,\n        transcoder_registry(),\n    )?;\n    Ok(sess)\n}\npub fn call_stake(\n    sess: Session<MinimalRuntime>,\n    vault: &AccountId32,\n    token: &AccountId32,\n    sender: &AccountId32,\n    amount: u128,\n) -> Result<(u128, Session<MinimalRuntime>), Box<dyn Error>> {\n    let mut sess: Session<MinimalRuntime> = call_function(\n        sess,\n        &vault,\n        &sender,\n        String::from(\"IVault::stake\"),\n        None,\n        Some(amount),\n        transcoder_vault(),\n    )?;\n\n    sess.set_actor(sender.clone());\n    sess.set_transcoder(token.clone(), &transcoder_share_token().unwrap());\n    let _res2 = sess\n        .call_with_address(\n            token.clone(),\n            \"PSP22::balance_of\",\n            &[sender.to_string()],\n            None,\n        )\n        .unwrap();\n    let balance: Result<u128, drink::errors::LangError> = sess.last_call_return().unwrap();\n    Ok((balance.unwrap(), sess))\n}\npub fn call_request_unlock(\n    mut sess: Session<MinimalRuntime>,\n    vault: &AccountId32,\n    token: &AccountId32,\n    sender: &AccountId32,\n    amount: u128,\n) -> Result<(u128, Session<MinimalRuntime>), Box<dyn Error>> {\n    sess.set_transcoder(token.clone(), &transcoder_share_token().unwrap());\n    sess.set_actor(sender.clone());\n\n    sess.chain_api().add_tokens(sender.clone(), 1000000);\n\n    sess.set_transcoder(vault.clone(), &transcoder_vault().unwrap());\n\n    println!(\"Calling: request_unlock()\");\n    sess.call_with_address(vault.clone(), \"IVault::request_unlock\", &[amount.to_string()], None)?;\n\n    sess.set_transcoder(token.clone(), &transcoder_share_token().unwrap());\n    sess.call_with_address(\n        token.clone(),\n        \"PSP22::balance_of\",\n        &[sender.to_string()],\n        None,\n    )\n    .unwrap();\n    let balance: Result<u128, drink::errors::LangError> = sess.last_call_return().unwrap();\n    Ok((balance.unwrap(), sess))\n}\n\n#[allow(dead_code)]\npub enum RoleType {\n    AddAgent,\n    UpdateAgents,\n    DisableAgent,\n    RemoveAgent,\n    SetCodeHash,\n}\npub fn get_role(\n    mut sess: Session<MinimalRuntime>,\n    registry: &AccountId32,\n    role_type: &RoleType,\n) -> Result<(AccountId32, Session<MinimalRuntime>), Box<dyn Error>> {\n    let role_string = match role_type {\n        RoleType::AddAgent => \"AddAgent\",\n        RoleType::UpdateAgents => \"UpdateAgents\",\n        RoleType::DisableAgent => \"DisableAgent\",\n        RoleType::RemoveAgent => \"RemoveAgent\",\n        RoleType::SetCodeHash => \"SetCodeHash\",\n    };\n    sess.call_with_address(registry.clone(), \"IRegistry::get_role\", &[role_string], None)?;\n\n    let role: Result<AccountId32, drink::errors::LangError> = sess.last_call_return().unwrap();\n    Ok((role.unwrap(), sess))\n}\npub fn get_role_admin(\n    mut sess: Session<MinimalRuntime>,\n    registry: &AccountId32,\n    role_type: &RoleType,\n) -> Result<(AccountId32, Session<MinimalRuntime>), Box<dyn Error>> {\n    let role_string = match role_type {\n        RoleType::AddAgent => \"AddAgent\",\n        RoleType::UpdateAgents => \"UpdateAgents\",\n        RoleType::DisableAgent => \"DisableAgent\",\n        RoleType::RemoveAgent => \"RemoveAgent\",\n        RoleType::SetCodeHash => \"SetCodeHash\",\n    };\n    sess.call_with_address(registry.clone(), \"IRegistry::get_role_admin\", &[role_string], None)?;\n\n    let admin: Result<AccountId32, drink::errors::LangError> = sess.last_call_return().unwrap();\n    Ok((admin.unwrap(), sess))\n}\npub fn transfer_role(\n    sess: Session<MinimalRuntime>,\n    registry: &AccountId32,\n    sender: &AccountId32,\n    role_type: &RoleType,\n    new_account: &AccountId32,\n) -> Result<Session<MinimalRuntime>, Box<dyn Error>> {\n    let role_string = match role_type {\n        RoleType::AddAgent => \"AddAgent\",\n        RoleType::UpdateAgents => \"UpdateAgents\",\n        RoleType::DisableAgent => \"DisableAgent\",\n        RoleType::RemoveAgent => \"RemoveAgent\",\n        RoleType::SetCodeHash => \"SetCodeHash\",\n    };\n    let sess = call_function(\n        sess,\n        &registry,\n        &sender,\n        String::from(\"IRegistry::transfer_role\"),\n        Some([role_string.to_string(), new_account.to_string()].to_vec()),\n        None,\n        transcoder_registry(),\n    )?;\n    Ok(sess)\n}\npub fn transfer_role_admin(\n    sess: Session<MinimalRuntime>,\n    registry: &AccountId32,\n    sender: &AccountId32,\n    role_type: &RoleType,\n    new_account: &AccountId32,\n) -> Result<Session<MinimalRuntime>, Box<dyn Error>> {\n    let role_string = match role_type {\n        RoleType::AddAgent => \"AddAgent\",\n        RoleType::UpdateAgents => \"UpdateAgents\",\n        RoleType::DisableAgent => \"DisableAgent\",\n        RoleType::RemoveAgent => \"RemoveAgent\",\n        RoleType::SetCodeHash => \"SetCodeHash\",\n    };\n    let sess = call_function(\n        sess,\n        &registry,\n        &sender,\n        String::from(\"IRegistry::transfer_role_admin\"),\n        Some([role_string.to_string(), new_account.to_string()].to_vec()),\n        None,\n        transcoder_registry(),\n    )?;\n    Ok(sess)\n}\npub fn get_role_adjust_fee(\n    mut sess: Session<MinimalRuntime>,\n    vault: &AccountId32,\n) -> Result<(AccountId32, Session<MinimalRuntime>), Box<dyn Error>> {\n    sess.call_with_address(vault.clone(), \"IVault::get_role_adjust_fee\", NO_ARGS, None)?;\n\n    let adjust_fee: Result<AccountId32, drink::errors::LangError> = sess.last_call_return().unwrap();\n    Ok((adjust_fee.unwrap(), sess))\n}\npub fn get_role_fee_to(\n    mut sess: Session<MinimalRuntime>,\n    vault: &AccountId32,\n) -> Result<(AccountId32, Session<MinimalRuntime>), Box<dyn Error>> {\n    sess.call_with_address(vault.clone(), \"IVault::get_role_fee_to\", NO_ARGS, None)?;\n\n    let fee_to: Result<AccountId32, drink::errors::LangError> = sess.last_call_return().unwrap();\n    Ok((fee_to.unwrap(), sess))\n}\npub fn get_role_set_code(\n    mut sess: Session<MinimalRuntime>,\n    vault: &AccountId32,\n) -> Result<(Option<AccountId32>, Session<MinimalRuntime>), Box<dyn Error>> {\n    sess.call_with_address(vault.clone(), \"IVault::get_role_set_code\", NO_ARGS, None)?;\n\n    let set_code: Result<Option<AccountId32>, drink::errors::LangError> = sess.last_call_return().unwrap();\n    Ok((set_code.unwrap(), sess))\n}\npub fn get_agents(\n    mut sess: Session<MinimalRuntime>,\n    registry: &AccountId32,\n) -> Result<(u128, Vec<Agent>, Session<MinimalRuntime>), Box<dyn Error>> {\n    sess.call_with_address(registry.clone(), \"IRegistry::get_agents\", NO_ARGS, None)?;\n\n    let result: Result<(u128, Vec<Agent>), drink::errors::LangError> = sess.last_call_return().unwrap();\n    let (total_weight, agents) = result.unwrap();\n\n    Ok((total_weight, agents, sess))\n}\npub fn get_current_virtual_shares(\n    sess: Session<MinimalRuntime>,\n    vault: &AccountId32,\n) -> Result<(u128, Session<MinimalRuntime>), Box<dyn Error>> {\n    let sess: Session<MinimalRuntime> = call_function(\n        sess,\n        vault,\n        &AccountId32::new([1u8; 32]),\n        String::from(\"IVault::get_current_virtual_shares\"),\n        None,\n        None,\n        transcoder_vault(),\n    )\n    .unwrap();\n    let virtual_shares: Result<u128, drink::errors::LangError> = sess.last_call_return().unwrap();\n    Ok((virtual_shares.unwrap(), sess))\n}\npub fn get_azero_from_shares(\n    sess: Session<MinimalRuntime>,\n    vault: &AccountId32,\n    shares: u128,\n) -> Result<(u128, Session<MinimalRuntime>), Box<dyn Error>> {\n    let sess: Session<MinimalRuntime> = call_function(\n        sess,\n        vault,\n        &AccountId32::new([1u8; 32]),\n        String::from(\"IVault::get_azero_from_shares\"),\n        Some([shares.clone().to_string()].to_vec()),\n        None,\n        transcoder_vault(),\n    )\n        .unwrap();\n    let azero: Result<u128, drink::errors::LangError> = sess.last_call_return().unwrap();\n    Ok((azero.unwrap(), sess))\n}\npub fn get_total_pooled(\n    sess: Session<MinimalRuntime>,\n    vault: &AccountId32,\n) -> Result<(u128, Session<MinimalRuntime>), Box<dyn Error>> {\n    let sess: Session<MinimalRuntime> = call_function(\n        sess,\n        vault,\n        &AccountId32::new([1u8; 32]),\n        String::from(\"IVault::get_total_pooled\"),\n        None,\n        None,\n        transcoder_vault(),\n    )\n    .unwrap();\n    let total_pooled: Result<u128, drink::errors::LangError> = sess.last_call_return().unwrap();\n    Ok((total_pooled.unwrap(), sess))\n}\npub fn query_nominator_balance(\n    sess: Session<MinimalRuntime>,\n    nominator: &AccountId32,\n) -> Result<(u128, u128, Session<MinimalRuntime>), Box<dyn Error>> {\n    let sess = call_function(\n        sess,\n        &nominator,\n        &AccountId32::new([1u8; 32]),\n        String::from(\"INominationAgent::get_unbonding_value\"),\n        None,\n        None,\n        transcoder_nominator(),\n    )\n    .unwrap();\n    let unbonded: Result<u128, drink::errors::LangError> = sess.last_call_return().unwrap();\n    let unbond = unbonded.unwrap();\n    let sess = call_function(\n        sess,\n        &nominator,\n        &AccountId32::new([1u8; 32]),\n        String::from(\"INominationAgent::get_staked_value\"),\n        None,\n        None,\n        transcoder_nominator(),\n    )\n    .unwrap();\n    let staked: Result<u128, drink::errors::LangError> = sess.last_call_return().unwrap();\n    let stake = staked.unwrap();\n\n    Ok((stake, unbond, sess))\n}\npub fn query_token_balance(\n    mut sess: Session<MinimalRuntime>,\n    token: &AccountId32,\n    user: &AccountId32,\n) -> Result<(u128, Session<MinimalRuntime>), Box<dyn Error>> {\n    sess.set_transcoder(token.clone(), &transcoder_share_token().unwrap());\n    sess.call_with_address(\n        token.clone(),\n        \"PSP22::balance_of\",\n        &[user.to_string()],\n        None,\n    )?;\n\n    let balance: Result<u128, drink::errors::LangError> = sess.last_call_return().unwrap();\n    Ok((balance.unwrap(), sess))\n}\npub fn call_redeem(\n    mut sess: Session<MinimalRuntime>,\n    vault: &AccountId32,\n    sender: &AccountId32,\n    index: u64,\n) -> Result<(u128, Session<MinimalRuntime>), Box<dyn Error>> {\n    let prev_balance = sess.chain_api().balance(&sender);\n\n    let mut sess = call_function(\n        sess,\n        &vault,\n        &sender,\n        String::from(\"IVault::redeem\"),\n        Some([sender.clone().to_string(), index.to_string()].to_vec()),\n        None,\n        transcoder_vault(),\n    )?;\n\n    let updated_balance = sess.chain_api().balance(&sender);\n    let gained = updated_balance - prev_balance;\n\n    Ok((gained, sess))\n}\n\npub fn call_redeem_with_withdraw(\n    mut sess: Session<MinimalRuntime>,\n    vault: &AccountId32,\n    sender: &AccountId32,\n    index: u64,\n) -> Result<(u128, Session<MinimalRuntime>), Box<dyn Error>> {\n    let prev_balance = sess.chain_api().balance(&sender);\n\n    let mut sess = call_function(\n        sess,\n        &vault,\n        &sender,\n        String::from(\"IVault::redeem_with_withdraw\"),\n        Some([sender.clone().to_string(), index.to_string()].to_vec()),\n        None,\n        transcoder_vault(),\n    )?;\n\n    let updated_balance = sess.chain_api().balance(&sender);\n    let gained = updated_balance - prev_balance;\n\n    Ok((gained, sess))\n}\n\npub fn call_withdraw_fees(\n    sess: Session<MinimalRuntime>,\n    vault: &AccountId32,\n    sender: &AccountId32,\n) -> Result<Session<MinimalRuntime>, Box<dyn Error>> {\n    let sess = call_function(\n        sess,\n        &vault,\n        &sender,\n        String::from(\"IVault::withdraw_fees\"),\n        None,\n        None,\n        transcoder_vault(),\n    )?;\n    Ok(sess)\n}\n\npub fn call_function(\n    mut sess: Session<MinimalRuntime>,\n    contract: &AccountId32,\n    sender: &AccountId32,\n    func_name: String,\n    args: Option<Vec<String>>,\n    value: Option<u128>,\n    transcoder: Option<Rc<ContractMessageTranscoder>>,\n) -> Result<Session<MinimalRuntime>, Box<dyn Error>> {\n    println!(\"Calling: {}()\", func_name);\n    if let Some(args) = args {\n        sess.set_actor(sender.clone());\n        sess.set_transcoder(contract.clone(), &transcoder.unwrap());\n        sess.call_with_address(contract.clone(), &func_name, &args, value)?;\n    } else {\n        sess.set_actor(sender.clone());\n        sess.set_transcoder(contract.clone(), &transcoder.unwrap());\n        sess.call_with_address(contract.clone(), &func_name, NO_ARGS, value)?;\n    }\n\n    // Print debug logs\n    let encoded = &sess.last_call_result().unwrap().debug_message;\n    let decoded = encoded.iter().map(|b| *b as char).collect::<String>();\n    let messages: Vec<String> = decoded.split('\\n').map(|s| s.to_string()).collect();\n    for line in messages {\n        if line.len() > 0 {\n            println!(\"LOG: {}\", line);\n        }\n    }\n\n    Ok(sess)\n}\n",
        "drink_tests/lib.rs":"#[cfg(test)]\nmod helpers;\n\n#[cfg(test)]\nmod sources;\n\n#[cfg(test)]\nmod tests {\n    use crate::helpers;\n\n    use drink::{\n        chain_api::ChainApi,\n        runtime::MinimalRuntime,\n        session::Session,\n        AccountId32,\n        Weight,\n    };\n    use std::error::Error;\n\n    struct TestContext {\n        sess: Session<MinimalRuntime>,\n        registry: AccountId32,\n        share_token: AccountId32,\n        vault: AccountId32,\n        nominators: Vec<AccountId32>,\n        validators: Vec<AccountId32>,\n        max_agents: usize,\n        alice: AccountId32,\n        bob: AccountId32,\n        charlie: AccountId32,\n        dave: AccountId32,\n        ed: AccountId32,\n    }\n\n    // Initial validator count\n    const VALIDATOR_COUNT: usize = 30;\n\n    fn setup(validator_count: usize) -> Result<TestContext, Box<dyn Error>> {\n        let bob = AccountId32::new([1u8; 32]);\n        let alice = AccountId32::new([2u8; 32]);\n        let charlie = AccountId32::new([3u8; 32]);\n        let dave = AccountId32::new([4u8; 32]);\n        let ed = AccountId32::new([5u8; 32]);\n\n        // Gas weights taken from mainnet api.const.system.blockWeights > perClass.normal.maxExtrinsic\n        let mut sess: Session<MinimalRuntime> = Session::<MinimalRuntime>::new().unwrap();\n        sess.set_gas_limit(Weight::from_parts(355_875_586_000u64, 16_417_602_225_601_500_938u64));\n\n        // FUND DEFAULT ACCOUNTS\n        sess.chain_api().add_tokens(alice.clone(), 100_000_000e12 as u128);\n        sess.chain_api().add_tokens(bob.clone(), 100_000_000e12 as u128);\n        sess.chain_api().add_tokens(charlie.clone(), 100_000_000e12 as u128);\n        sess.chain_api().add_tokens(dave.clone(), 100_000_000e12 as u128);\n        sess.chain_api().add_tokens(ed.clone(), 100_000_000e12 as u128);\n\n        sess.upload(helpers::bytes_registry()).expect(\"Session should upload registry bytes\");\n        sess.upload(helpers::bytes_share_token()).expect(\"Session should upload token bytes\");\n        sess.upload(helpers::bytes_nominator()).expect(\"Session should upload nominator bytes\");\n\n        let vault = sess.deploy(\n            helpers::bytes_vault(),\n            \"new\",\n            &[\n                helpers::hash_share_token(),\n                helpers::hash_registry(),\n                helpers::hash_nominator(),\n                helpers::DAY.to_string(),\n            ],\n            vec![1],\n            None,\n            &helpers::transcoder_vault().unwrap(),\n        )?;\n        sess.set_transcoder(vault.clone(), &helpers::transcoder_vault().unwrap());\n\n        let mut sess = helpers::call_function(\n            sess,\n            &vault,\n            &bob,\n            String::from(\"IVault::get_registry_contract\"),\n            None,\n            None,\n            helpers::transcoder_vault(),\n        )\n            .unwrap();\n        let rr: Result<AccountId32, drink::errors::LangError> = sess.last_call_return().unwrap();\n        let registry = rr.unwrap();\n        sess.set_transcoder(registry.clone(), &helpers::transcoder_registry().unwrap());\n\n        let sess = helpers::call_function(\n            sess,\n            &registry,\n            &bob,\n            String::from(\"IRegistry::get_max_agents\"),\n            None,\n            None,\n            helpers::transcoder_registry(),\n        )\n            .unwrap();\n        let get_max_agents_result: Result<u32, drink::errors::LangError> = sess.last_call_return().unwrap();\n        let max_agents = get_max_agents_result.unwrap() as usize;\n\n        let mut sess = helpers::call_function(\n            sess,\n            &vault,\n            &bob,\n            String::from(\"IVault::get_share_token_contract\"),\n            None,\n            None,\n            helpers::transcoder_vault(),\n        )\n            .unwrap();\n        let ss: Result<AccountId32, drink::errors::LangError> = sess.last_call_return().unwrap();\n        let share_token = ss.unwrap();\n        sess.set_transcoder(share_token.clone(), &helpers::transcoder_share_token().unwrap());\n\n        sess.set_actor(bob.clone());\n\n        // ADD AGENTS\n        let mut validators: Vec<AccountId32> = Vec::default();\n        while validators.len() < validator_count {\n            let validator = AccountId32::new([101u8 + validators.len() as u8; 32]);\n            (_, sess) = helpers::call_add_agent(\n                sess,\n                &registry,\n                &bob,\n                &bob,\n                &validator,\n                100e12 as u128,\n            )?;\n            validators.push(validator);\n        }\n\n        let (_, agents, sess) = helpers::get_agents(sess, &registry)?;\n\n        // Set all weights from 0 -> 100\n        let sess = helpers::call_update_agents(\n            sess,\n            &registry,\n            &bob,\n            agents.iter().map(|a| helpers::WeightUpdate {\n                agent: a.address.clone(),\n                weight: 100,\n                increase: true,\n            }).collect(),\n        )?;\n\n        Ok(TestContext {\n            sess,\n            registry,\n            share_token,\n            vault,\n            nominators: agents.iter().map(|a| a.address.clone()).collect(),\n            validators,\n            max_agents,\n            alice,\n            bob,\n            charlie,\n            dave,\n            ed,\n        })\n    }\n\n    #[test]\n    fn test_fees_flow_multiple_stakes_success() -> Result<(), Box<dyn Error>> {\n        let ctx: TestContext = setup(VALIDATOR_COUNT).unwrap();\n        const STAKE_AMOUNT: u128 = 100e12 as u128;\n        const INTERVALS: u64 = 5;\n\n        let (_, sess) = helpers::call_stake(ctx.sess, &ctx.vault, &ctx.share_token, &ctx.bob, STAKE_AMOUNT).unwrap();\n        let sess = helpers::update_in_milliseconds(sess, helpers::YEAR / INTERVALS);\n        let (fees, sess) = helpers::get_current_virtual_shares(sess, &ctx.vault).unwrap();\n        assert_eq!(fees, 40e10 as u128);\n\n        let (_, sess) = helpers::call_stake(sess, &ctx.vault, &ctx.share_token, &ctx.alice, STAKE_AMOUNT).unwrap();\n        let sess = helpers::update_in_milliseconds(sess, helpers::YEAR / INTERVALS);\n        let (fees, sess) = helpers::get_current_virtual_shares(sess, &ctx.vault).unwrap();\n        assert_eq!(fees, 1203200000000u128);\n\n        let (_, sess) = helpers::call_stake(sess, &ctx.vault, &ctx.share_token, &ctx.charlie, STAKE_AMOUNT).unwrap();\n        let sess = helpers::update_in_milliseconds(sess, helpers::YEAR / INTERVALS);\n        let (fees, sess) = helpers::get_current_virtual_shares(sess, &ctx.vault).unwrap();\n        assert_eq!(fees, 2412819200000u128);\n\n        let (_, sess) = helpers::call_stake(sess, &ctx.vault, &ctx.share_token, &ctx.dave, STAKE_AMOUNT).unwrap();\n        let sess = helpers::update_in_milliseconds(sess, helpers::YEAR / INTERVALS);\n        let (fees, sess) = helpers::get_current_virtual_shares(sess, &ctx.vault).unwrap();\n        assert_eq!(fees, 4032096102400u128);\n\n        let (_, sess) = helpers::call_stake(sess, &ctx.vault, &ctx.share_token, &ctx.ed, STAKE_AMOUNT).unwrap();\n        let sess = helpers::update_in_milliseconds(sess, helpers::YEAR / INTERVALS);\n        let (fees, sess) = helpers::get_current_virtual_shares(sess, &ctx.vault).unwrap();\n        assert_eq!(fees, 6064288614912u128);\n\n        let (total_pooled, sess) = helpers::get_total_pooled(sess, &ctx.vault).unwrap();\n        assert_eq!(total_pooled, STAKE_AMOUNT * INTERVALS as u128);\n\n        let (shares_before, sess) = helpers::query_token_balance(sess, &ctx.share_token, &ctx.bob).unwrap();\n        let sess = helpers::call_withdraw_fees(sess, &ctx.vault, &ctx.bob).unwrap();\n        let (shares_after, sess) = helpers::query_token_balance(sess, &ctx.share_token, &ctx.bob).unwrap();\n        assert_eq!(shares_after - shares_before, fees);\n\n        let (fees, _sess) = helpers::get_current_virtual_shares(sess, &ctx.vault).unwrap();\n        assert_eq!(fees, 0);\n\n        Ok(())\n    }\n    #[test]\n    fn test_minimum_stake_panic_because_below_threshold() {\n        let ctx: TestContext = setup(VALIDATOR_COUNT).unwrap();\n        let sess = ctx.sess;\n\n        let minimum_stake = 1_000_000;\n\n        match helpers::call_stake(sess, &ctx.vault, &ctx.share_token, &ctx.alice, minimum_stake - 100) {\n            Ok(_) => panic!(\"Should panic because stake is insufficient\"),\n            Err(_) => (),\n        };\n    }\n    #[test]\n    fn test_staking_redeem_flow() -> Result<(), Box<dyn Error>> {\n        let ctx = setup(2 as usize).unwrap();\n\n        // Verify nominators\n        let (staked, unbonded, sess) = helpers::query_nominator_balance(ctx.sess, &ctx.nominators[0]).unwrap();\n        assert_eq!(staked, 0, \"Nominator #1 should have no staked AZERO\");\n        assert_eq!(unbonded, 0, \"Nominator #1 should have no unbonded AZERO\");\n        let (staked, unbonded, sess) = helpers::query_nominator_balance(sess, &ctx.nominators[1]).unwrap();\n        assert_eq!(staked, 0, \"Nominator #2 should have no staked AZERO\");\n        assert_eq!(unbonded, 0, \"Nominator #2 should have no unbonded AZERO\");\n\n        // Staking of 50k AZERO\n        let (_, sess) = helpers::call_stake(sess, &ctx.vault, &ctx.share_token, &ctx.alice, 10_000e12 as u128).unwrap();\n        let (_, sess) = helpers::call_stake(sess, &ctx.vault, &ctx.share_token, &ctx.bob, 10_000e12 as u128).unwrap();\n        let (_, sess) = helpers::call_stake(sess, &ctx.vault, &ctx.share_token, &ctx.charlie, 10_000e12 as u128).unwrap();\n        let (_, sess) = helpers::call_stake(sess, &ctx.vault, &ctx.share_token, &ctx.dave, 10_000e12 as u128).unwrap();\n        let (_, sess) = helpers::call_stake(sess, &ctx.vault, &ctx.share_token, &ctx.ed, 10_000e12 as u128).unwrap();\n\n        let (staked, unbonded, sess) = helpers::query_nominator_balance(sess, &ctx.nominators[0]).unwrap();\n        assert_eq!(\n            staked, 25_000e12 as u128,\n            \"Nominator #1 should have half AZERO staked\"\n        );\n        assert_eq!(unbonded, 0, \"Nominator #1 should have no unbonded AZERO\");\n        let (_, _, sess) = helpers::query_nominator_balance(sess, &ctx.nominators[1]).unwrap();\n        assert_eq!(\n            staked, 25_000e12 as u128,\n            \"Nominator #2 should have half AZERO staked\"\n        );\n        assert_eq!(unbonded, 0, \"Nominator #2 should have no unbonded AZERO\");\n\n        // Allow fees to accumulate\n        let sess = helpers::update_days(sess, 2);\n\n        // Unlock requests of 500 AZERO\n        let (_, sess) = helpers::call_request_unlock(sess, &ctx.vault, &ctx.share_token, &ctx.alice, 100e12 as u128).unwrap();\n        let (_, sess) = helpers::call_request_unlock(sess, &ctx.vault, &ctx.share_token, &ctx.bob, 100e12 as u128).unwrap();\n        let (_, sess) = helpers::call_request_unlock(sess, &ctx.vault, &ctx.share_token, &ctx.charlie, 100e12 as u128).unwrap();\n        let (_, sess) = helpers::call_request_unlock(sess, &ctx.vault, &ctx.share_token, &ctx.dave, 100e12 as u128).unwrap();\n        let (_, sess) = helpers::call_request_unlock(sess, &ctx.vault, &ctx.share_token, &ctx.ed, 100e12 as u128).unwrap();\n\n        let fees_500_staked_2_days_shares = (500e12 as u128) * (2 * helpers::DAY as u128) / helpers::YEAR as u128 * 200 / helpers::BIPS;\n        let (fees_500_staked_2_days_azero, sess) = helpers::get_azero_from_shares(sess, &ctx.vault, fees_500_staked_2_days_shares).unwrap();\n\n        // Verify nominators\n        let (staked, unbonded, sess) = helpers::query_nominator_balance(sess, &ctx.nominators[0]).unwrap();\n        assert_eq!(staked, (25_000e12 - 250e12) as u128 + (fees_500_staked_2_days_azero / 2) + 2);\n        assert_eq!(unbonded, 250e12 as u128 - (fees_500_staked_2_days_azero / 2) - 2);\n        let (staked, unbonded, sess) = helpers::query_nominator_balance(sess, &ctx.nominators[1]).unwrap();\n        assert_eq!(staked, (25_000e12 - 250e12) as u128 + (fees_500_staked_2_days_azero / 2) + 2);\n        assert_eq!(unbonded, 250e12 as u128 - (fees_500_staked_2_days_azero / 2) - 2);\n\n        // Wait for cooldown period to complete\n        let sess = helpers::update_days(sess, 14);\n\n        // Redeem AZERO minus fees\n        let (redeemed, sess) = helpers::call_redeem_with_withdraw(sess, &ctx.vault, &ctx.alice, 0).unwrap();\n        assert_eq!(redeemed, 100e12 as u128 + 22 - fees_500_staked_2_days_azero / 5);\n        let (redeemed, sess) = helpers::call_redeem(sess, &ctx.vault, &ctx.bob, 0).unwrap();\n        assert_eq!(redeemed, 100e12 as u128 + 23 - fees_500_staked_2_days_azero / 5);\n        let (redeemed, sess) = helpers::call_redeem(sess, &ctx.vault, &ctx.charlie, 0).unwrap();\n        assert_eq!(redeemed, 100e12 as u128 + 23 - fees_500_staked_2_days_azero / 5);\n        let (redeemed, sess) = helpers::call_redeem(sess, &ctx.vault, &ctx.dave, 0).unwrap();\n        assert_eq!(redeemed, 100e12 as u128 + 23 - fees_500_staked_2_days_azero / 5);\n        let (redeemed, sess) = helpers::call_redeem(sess, &ctx.vault, &ctx.ed, 0).unwrap();\n        assert_eq!(redeemed, 100e12 as u128 + 23 - fees_500_staked_2_days_azero / 5);\n\n        let (claimable_fees, sess) = helpers::get_current_virtual_shares(sess, &ctx.vault).unwrap();\n        assert_eq!(claimable_fees, 43426511146997);\n\n        let (shares_before, sess) = helpers::query_token_balance(sess, &ctx.share_token, &ctx.bob).unwrap();\n        let sess = helpers::call_withdraw_fees(sess, &ctx.vault, &ctx.bob).unwrap();\n        let (shares_after, _sess) = helpers::query_token_balance(sess, &ctx.share_token, &ctx.bob).unwrap();\n        assert_eq!(shares_after - shares_before, claimable_fees);\n\n        Ok(())\n    }\n    #[test]\n    fn test_gas_cost_of_staking_redeem_flow_with_many_agents() -> Result<(), Box<dyn Error>> {\n        let ctx = setup(VALIDATOR_COUNT).unwrap();\n        let sess = ctx.sess;\n\n        // Staking of 5m AZERO\n        let (_, sess) = helpers::call_stake(sess, &ctx.vault, &ctx.share_token, &ctx.alice, 1_000_000e12 as u128).unwrap();\n        let (_, sess) = helpers::call_stake(sess, &ctx.vault, &ctx.share_token, &ctx.bob, 1_000_000e12 as u128).unwrap();\n        let (_, sess) = helpers::call_stake(sess, &ctx.vault, &ctx.share_token, &ctx.charlie, 1_000_000e12 as u128).unwrap();\n        let (_, sess) = helpers::call_stake(sess, &ctx.vault, &ctx.share_token, &ctx.dave, 1_000_000e12 as u128).unwrap();\n        let (_, sess) = helpers::call_stake(sess, &ctx.vault, &ctx.share_token, &ctx.ed, 1_000_000e12 as u128).unwrap();\n\n        // Allow fees to accumulate\n        let sess = helpers::update_days(sess, 2);\n\n        // Unlock requests of 50k AZERO\n        let (_, sess) = helpers::call_request_unlock(sess, &ctx.vault, &ctx.share_token, &ctx.alice, 10_000e12 as u128).unwrap();\n        let (_, sess) = helpers::call_request_unlock(sess, &ctx.vault, &ctx.share_token, &ctx.bob, 10_000e12 as u128).unwrap();\n        let (_, sess) = helpers::call_request_unlock(sess, &ctx.vault, &ctx.share_token, &ctx.charlie, 10_000e12 as u128).unwrap();\n        let (_, sess) = helpers::call_request_unlock(sess, &ctx.vault, &ctx.share_token, &ctx.dave, 10_000e12 as u128).unwrap();\n        let (_, sess) = helpers::call_request_unlock(sess, &ctx.vault, &ctx.share_token, &ctx.ed, 10_000e12 as u128).unwrap();\n\n        // Wait for cooldown period to complete\n        let sess = helpers::update_days(sess, 14);\n\n        // Redeem AZERO minus fees\n        let (_, sess) = helpers::call_redeem_with_withdraw(sess, &ctx.vault, &ctx.alice, 0).unwrap();\n        let (_, sess) = helpers::call_redeem(sess, &ctx.vault, &ctx.bob, 0).unwrap();\n        let (_, sess) = helpers::call_redeem(sess, &ctx.vault, &ctx.charlie, 0).unwrap();\n        let (_, sess) = helpers::call_redeem(sess, &ctx.vault, &ctx.dave, 0).unwrap();\n        let (_, sess) = helpers::call_redeem(sess, &ctx.vault, &ctx.ed, 0).unwrap();\n        helpers::call_withdraw_fees(sess, &ctx.vault, &ctx.bob).unwrap();\n\n        Ok(())\n    }\n    #[test]\n    fn test_fee_adjustment_success() {\n        let ctx = setup(VALIDATOR_COUNT).unwrap();\n        let sess = helpers::call_function(\n            ctx.sess,\n            &ctx.vault,\n            &ctx.bob,\n            String::from(\"IVault::adjust_fee\"),\n            Some(vec![String::from(\"1000\")]),\n            None,\n            helpers::transcoder_vault(),\n        )\n        .unwrap();\n        let sess = helpers::call_function(\n            sess,\n            &ctx.vault,\n            &ctx.bob,\n            String::from(\"IVault::get_fee_percentage\"),\n            None,\n            None,\n            helpers::transcoder_vault(),\n        )\n        .unwrap();\n        let res: Result<u16, drink::errors::LangError> = sess.last_call_return().unwrap();\n        assert_eq!(res.unwrap(), 1000)\n    }\n    #[test]\n    fn test_fee_adjustment_panic_because_caller_restricted() {\n        let ctx = setup(VALIDATOR_COUNT).unwrap();\n        match helpers::call_function(\n            ctx.sess,\n            &ctx.vault,\n            &ctx.ed, // not bob\n            String::from(\"IVault::adjust_fee\"),\n            Some(vec![String::from(\"1234\")]),\n            None,\n            helpers::transcoder_vault(),\n        ) {\n            Ok(_) => panic!(\"Should panic because caller does not have adjust fees role (Bob)\"),\n            Err(_) => (),\n        }\n    }\n    #[test]\n    fn test_fee_adjustment_panic_because_overflow() {\n        let ctx = setup(VALIDATOR_COUNT).unwrap();\n        match helpers::call_function(\n            ctx.sess,\n            &ctx.vault,\n            &ctx.alice,\n            String::from(\"IVault::adjust_fee\"),\n            Some(vec![String::from(\"10000\")]), // equal to BIPS\n            None,\n            helpers::transcoder_vault(),\n        ) {\n            Ok(_) => panic!(\"Should panic because new fee is too large\"),\n            Err(_) => (),\n        };\n    }\n    #[test]\n    fn test_withdraw_fees_after_one_second_success() {\n        let ctx = setup(VALIDATOR_COUNT).unwrap();\n\n        const STAKE_AMOUNT: u128 = 100e12 as u128;\n\n        // default annualized fee of 2%\n        const EXPECTED_FEES: u128 = STAKE_AMOUNT * (helpers::SECOND as u128) / (helpers::YEAR as u128) * 200 / helpers::BIPS;\n\n        // Stake 100 AZERO\n        let (_, sess) = helpers::call_stake(ctx.sess, &ctx.vault, &ctx.share_token, &ctx.bob, STAKE_AMOUNT).unwrap();\n\n        let sess = helpers::update_in_milliseconds(sess, helpers::SECOND);\n\n        // Verify claimable fees\n        let (shares_before, sess) = helpers::query_token_balance(sess, &ctx.share_token, &ctx.bob).unwrap();\n        let (claimable_fees, sess) = helpers::get_current_virtual_shares(sess, &ctx.vault).unwrap();\n        assert_eq!(claimable_fees, EXPECTED_FEES);\n\n        // Withdraw fees\n        let sess = helpers::call_withdraw_fees(sess, &ctx.vault, &ctx.bob).unwrap();\n\n        // Verify shares\n        let (shares_after, _sess) = helpers::query_token_balance(sess, &ctx.share_token, &ctx.bob).unwrap();\n        assert_eq!(shares_after - shares_before, EXPECTED_FEES);\n    }\n    #[test]\n    fn test_withdraw_fees_after_one_day_success() {\n        let ctx = setup(VALIDATOR_COUNT).unwrap();\n\n        const STAKE_AMOUNT: u128 = 100e12 as u128;\n        const EXPECTED_FEES: u128 = STAKE_AMOUNT * (helpers::DAY as u128) / (helpers::YEAR as u128) * 200 / helpers::BIPS;\n\n        // Stake 100 AZERO\n        let (_, sess) = helpers::call_stake(ctx.sess, &ctx.vault, &ctx.share_token, &ctx.bob, STAKE_AMOUNT).unwrap();\n\n        let sess = helpers::update_days(sess, 1);\n\n        // Verify claimable fees\n        let (shares_before, sess) = helpers::query_token_balance(sess, &ctx.share_token, &ctx.bob).unwrap();\n        let (claimable_fees, sess) = helpers::get_current_virtual_shares(sess, &ctx.vault).unwrap();\n        assert_eq!(claimable_fees, EXPECTED_FEES);\n\n        // Withdraw fees\n        let sess = helpers::call_withdraw_fees(sess, &ctx.vault, &ctx.bob).unwrap();\n\n        // Verify shares\n        let (shares_after, _sess) = helpers::query_token_balance(sess, &ctx.share_token, &ctx.bob).unwrap();\n        assert_eq!(shares_after - shares_before, EXPECTED_FEES); // annualized fee of 2%\n    }\n    #[test]\n    fn test_withdraw_fees_after_one_year_success() {\n        let ctx = setup(VALIDATOR_COUNT).unwrap();\n\n        const STAKE_AMOUNT: u128 = 100e12 as u128;\n        const EXPECTED_FEES: u128 = STAKE_AMOUNT * 200 / helpers::BIPS;\n\n        // Stake 100 AZERO\n        let (_, sess) = helpers::call_stake(ctx.sess, &ctx.vault, &ctx.share_token, &ctx.bob, STAKE_AMOUNT).unwrap();\n\n        // Verify claimable fees\n        let (claimable_fees, sess) = helpers::get_current_virtual_shares(sess, &ctx.vault).unwrap();\n        assert_eq!(claimable_fees, 0);\n\n        let sess = helpers::update_in_milliseconds(sess, helpers::YEAR);\n\n        // Verify claimable fees\n        let (shares_before, sess) = helpers::query_token_balance(sess, &ctx.share_token, &ctx.bob).unwrap();\n        let (claimable_fees, sess) = helpers::get_current_virtual_shares(sess, &ctx.vault).unwrap();\n        assert_eq!(claimable_fees, EXPECTED_FEES);\n\n        // Withdraw fees\n        let sess = helpers::call_withdraw_fees(sess, &ctx.vault, &ctx.bob).unwrap();\n\n        // Verify shares\n        let (shares_after, _sess) = helpers::query_token_balance(sess, &ctx.share_token, &ctx.bob).unwrap();\n        assert_eq!(shares_after - shares_before, EXPECTED_FEES);\n    }\n    #[test]\n    fn test_withdraw_fees_after_adjusted_fee() {\n        const STAKE: u128 = 100e12 as u128;\n        const ONE_DAY_FEE_2_PERCENT: u128 = STAKE * helpers::DAY as u128 / helpers::YEAR as u128 * 2_00 / helpers::BIPS;\n        const ONE_DAY_FEE_4_PERCENT: u128 = STAKE * helpers::DAY as u128 / helpers::YEAR as u128 * 4_00 / helpers::BIPS;\n\n        let ctx = setup(VALIDATOR_COUNT).unwrap();\n\n        // Initial stake\n        let (_, sess) = helpers::call_stake(ctx.sess, &ctx.vault, &ctx.share_token, &ctx.bob, STAKE).unwrap();\n\n        // 2% fee for 1 day\n        let sess = helpers::update_days(sess, 1);\n        let (expected_fees, sess) = helpers::get_current_virtual_shares(sess, &ctx.vault).unwrap();\n        assert_eq!(\n            expected_fees, ONE_DAY_FEE_2_PERCENT,\n            \"Should have 2% fee for 1 day\"\n        );\n\n        // Adjust fee to 4%\n        let sess = helpers::call_function(\n            sess,\n            &ctx.vault,\n            &ctx.bob,\n            String::from(\"IVault::adjust_fee\"),\n            Some(vec![String::from(\"400\")]), // 4% in helpers::BIPS\n            None,\n            helpers::transcoder_vault(),\n        )\n        .unwrap();\n\n        // 4% fee for 1 day\n        let sess = helpers::update_days(sess, 1);\n        let (expected_fees, sess) = helpers::get_current_virtual_shares(sess, &ctx.vault).unwrap();\n        assert_eq!(\n            expected_fees,\n            ONE_DAY_FEE_2_PERCENT + ONE_DAY_FEE_4_PERCENT + 599666, // compounding\n            \"Should show 2% fee for 1 day and 4% fee for 1 day\",\n        );\n\n        let (shares_before, sess) = helpers::query_token_balance(sess, &ctx.share_token, &ctx.bob).unwrap();\n        let sess = helpers::call_withdraw_fees(sess, &ctx.vault, &ctx.bob).unwrap();\n        let (shares_after, _sess) = helpers::query_token_balance(sess, &ctx.share_token, &ctx.bob).unwrap();\n        assert_eq!(\n            shares_after - shares_before,\n            ONE_DAY_FEE_2_PERCENT + ONE_DAY_FEE_4_PERCENT + 599666, // compounding,\n            \"Should withdraw 2% fee for 1 day and 4% fee for 1 day\"\n        );\n    }\n    #[test]\n    fn test_withdraw_fees_panic_because_caller_restricted() {\n        let ctx = setup(VALIDATOR_COUNT).unwrap();\n        let (_, sess) = helpers::call_stake(ctx.sess, &ctx.vault, &ctx.share_token, &ctx.bob, 1_000_000e12 as u128).unwrap();\n        let sess = helpers::update_days(sess, 365);\n        match helpers::call_withdraw_fees(\n            sess,\n            &ctx.vault,\n            &ctx.ed, // not bob\n        ) {\n            Ok(_) => panic!(\"Should panic because caller does not have the fee to role (Bob)\"),\n            Err(_) => (),\n        };\n    }\n    #[test]\n    fn test_vault_transfer_role_adjust_fee_panic_because_caller_restricted() {\n        let ctx = setup(VALIDATOR_COUNT).unwrap();\n        match helpers::call_function(\n            ctx.sess,\n            &ctx.vault,\n            &ctx.alice, // not bob\n            String::from(\"IVault::transfer_role_adjust_fee\"),\n            Some([ctx.charlie.to_string()].to_vec()),\n            None,\n            helpers::transcoder_vault(),\n        ) {\n            Ok(_) => panic!(\"Should panic because caller is restricted\"),\n            Err(_) => (),\n        };\n    }\n    #[test]\n    fn test_vault_transfer_role_adjust_fee_flow() {\n        let ctx = setup(VALIDATOR_COUNT).unwrap();\n\n        let (adjust_fee, sess) = helpers::get_role_adjust_fee(ctx.sess, &ctx.vault).unwrap();\n        assert_eq!(adjust_fee, ctx.bob);\n\n        // Transfer role to Charlie\n        let sess = helpers::call_function(\n            sess,\n            &ctx.vault,\n            &adjust_fee,\n            String::from(\"IVault::transfer_role_adjust_fee\"),\n            Some([ctx.charlie.to_string()].to_vec()),\n            None,\n            helpers::transcoder_vault(),\n        )\n            .unwrap();\n\n        let (adjust_fee, _sess) = helpers::get_role_adjust_fee(sess, &ctx.vault).unwrap();\n        assert_eq!(adjust_fee, ctx.charlie);\n    }\n    #[test]\n    fn test_vault_transfer_role_fee_to_panic_because_caller_restricted() {\n        let ctx = setup(VALIDATOR_COUNT).unwrap();\n        match helpers::call_function(\n            ctx.sess,\n            &ctx.vault,\n            &ctx.alice, // not bob\n            String::from(\"IVault::transfer_role_fee_to\"),\n            Some([ctx.charlie.to_string()].to_vec()),\n            None,\n            helpers::transcoder_vault(),\n        ) {\n            Ok(_) => panic!(\"Should panic because caller is restricted\"),\n            Err(_) => (),\n        };\n    }\n    #[test]\n    fn test_vault_transfer_role_fee_to_flow() {\n        let ctx = setup(VALIDATOR_COUNT).unwrap();\n\n        let (fee_to, sess) = helpers::get_role_fee_to(ctx.sess, &ctx.vault).unwrap();\n        assert_eq!(fee_to, ctx.bob);\n\n        // Transfer role to Charlie\n        let sess = helpers::call_function(\n            sess,\n            &ctx.vault,\n            &fee_to,\n            String::from(\"IVault::transfer_role_fee_to\"),\n            Some([ctx.charlie.to_string()].to_vec()),\n            None,\n            helpers::transcoder_vault(),\n        )\n            .unwrap();\n\n        let (fee_to, _sess) = helpers::get_role_fee_to(sess, &ctx.vault).unwrap();\n        assert_eq!(fee_to, ctx.charlie);\n    }\n    #[test]\n    fn test_vault_transfer_role_set_code_panic_because_caller_restricted() {\n        let ctx = setup(VALIDATOR_COUNT).unwrap();\n        match helpers::call_function(\n            ctx.sess,\n            &ctx.vault,\n            &ctx.alice, // not bob\n            String::from(\"IVault::transfer_role_set_code\"),\n            Some([ctx.charlie.to_string()].to_vec()),\n            None,\n            helpers::transcoder_vault(),\n        ) {\n            Ok(_) => panic!(\"Should panic because caller is restricted\"),\n            Err(_) => (),\n        };\n    }\n    #[test]\n    fn test_vault_disable_set_code_flow() {\n        let ctx = setup(VALIDATOR_COUNT).unwrap();\n\n        let (set_code, sess) = helpers::get_role_set_code(ctx.sess, &ctx.vault).unwrap();\n        assert_eq!(set_code, Some(ctx.bob.clone()));\n\n        let sess = helpers::call_function(\n            sess,\n            &ctx.vault,\n            &ctx.bob,\n            String::from(\"IVault::disable_set_code\"),\n            None,\n            None,\n            helpers::transcoder_vault(),\n        ).unwrap();\n\n        let (set_code, sess) = helpers::get_role_set_code(sess, &ctx.vault).unwrap();\n        assert_eq!(set_code, None);\n\n        match helpers::call_function(\n            sess,\n            &ctx.vault,\n            &ctx.bob,\n            String::from(\"IVault::transfer_role_set_code\"),\n            Some([ctx.charlie.to_string()].to_vec()),\n            None,\n            helpers::transcoder_vault(),\n        ) {\n            Ok(_) => panic!(\"Should panic because role is disabled\"),\n            Err(_) => (),\n        };\n    }\n    #[test]\n    fn test_vault_transfer_role_set_code_flow() {\n        let ctx = setup(VALIDATOR_COUNT).unwrap();\n\n        let (set_code, sess) = helpers::get_role_set_code(ctx.sess, &ctx.vault).unwrap();\n        assert_eq!(set_code, Some(ctx.bob.clone()));\n\n        // Transfer role to Charlie\n        let sess = helpers::call_function(\n            sess,\n            &ctx.vault,\n            &set_code.unwrap(),\n            String::from(\"IVault::transfer_role_set_code\"),\n            Some([ctx.charlie.to_string()].to_vec()),\n            None,\n            helpers::transcoder_vault(),\n        )\n            .unwrap();\n\n        let (set_code, _sess) = helpers::get_role_set_code(sess, &ctx.vault).unwrap();\n        assert_eq!(set_code, Some(ctx.charlie.clone()));\n    }\n    #[test]\n    fn test_nominator_add_agent_role_flow() {\n        let ctx = setup(VALIDATOR_COUNT).unwrap();\n\n        // Check roles\n        let (role, sess) = helpers::get_role(ctx.sess, &ctx.registry, &helpers::RoleType::AddAgent).unwrap();\n        assert_eq!(role, ctx.bob);\n        let (admin, sess) = helpers::get_role_admin(sess, &ctx.registry, &helpers::RoleType::AddAgent).unwrap();\n        assert_eq!(admin, ctx.bob);\n\n        // Bob (admin) transfers role to Charlie\n        let sess = helpers::transfer_role(sess, &ctx.registry, &admin, &helpers::RoleType::AddAgent, &ctx.charlie).unwrap();\n        // Bob (admin) transfers admin to Charlie\n        let sess = helpers::transfer_role_admin(sess, &ctx.registry, &admin, &helpers::RoleType::AddAgent, &ctx.charlie).unwrap();\n\n        // Check roles\n        let (role, sess) = helpers::get_role(sess, &ctx.registry, &helpers::RoleType::AddAgent).unwrap();\n        assert_eq!(role, ctx.charlie);\n        let (admin, _sess) = helpers::get_role_admin(sess, &ctx.registry, &helpers::RoleType::AddAgent).unwrap();\n        assert_eq!(admin, ctx.charlie);\n    }\n    #[test]\n    fn test_nominator_add_agent_role_panic_on_transfer_role_because_caller_not_admin() {\n        let ctx = setup(VALIDATOR_COUNT).unwrap();\n\n        // Charlie (not admin) cannot transfer role\n        match helpers::transfer_role(ctx.sess, &ctx.registry, &ctx.charlie, &helpers::RoleType::AddAgent, &ctx.dave) {\n            Ok(_) => panic!(\"Should panic because caller is restricted\"),\n            Err(_) => (),\n        };\n    }\n    #[test]\n    fn test_nominator_add_agent_role_panic_on_transfer_admin_because_caller_not_admin() {\n        let ctx = setup(VALIDATOR_COUNT).unwrap();\n\n        // Charlie (not admin) cannot transfer admin\n        match helpers::transfer_role_admin(ctx.sess, &ctx.registry, &ctx.charlie, &helpers::RoleType::AddAgent, &ctx.dave) {\n            Ok(_) => panic!(\"Should panic because caller is restricted\"),\n            Err(_) => (),\n        };\n    }\n    #[test]\n    fn test_nominator_update_agents_role_flow() {\n        let ctx = setup(VALIDATOR_COUNT).unwrap();\n\n        // Check roles\n        let (role, sess) = helpers::get_role(ctx.sess, &ctx.registry, &helpers::RoleType::UpdateAgents).unwrap();\n        assert_eq!(role, ctx.bob);\n        let (admin, sess) = helpers::get_role_admin(sess, &ctx.registry, &helpers::RoleType::UpdateAgents).unwrap();\n        assert_eq!(admin, ctx.bob);\n\n        // Bob (admin) transfers role to Charlie\n        let sess = helpers::transfer_role(sess, &ctx.registry, &admin, &helpers::RoleType::UpdateAgents, &ctx.charlie).unwrap();\n        // Bob (admin) transfers admin to Charlie\n        let sess = helpers::transfer_role_admin(sess, &ctx.registry, &admin, &helpers::RoleType::UpdateAgents, &ctx.charlie).unwrap();\n\n        // Check roles\n        let (role, sess) = helpers::get_role(sess, &ctx.registry, &helpers::RoleType::UpdateAgents).unwrap();\n        assert_eq!(role, ctx.charlie);\n        let (admin, _sess) = helpers::get_role_admin(sess, &ctx.registry, &helpers::RoleType::UpdateAgents).unwrap();\n        assert_eq!(admin, ctx.charlie);\n    }\n    #[test]\n    fn test_nominator_update_agents_role_panic_on_transfer_role_because_caller_not_admin() {\n        let ctx = setup(VALIDATOR_COUNT).unwrap();\n\n        // Charlie (not admin) cannot transfer role\n        match helpers::transfer_role(ctx.sess, &ctx.registry, &ctx.charlie, &helpers::RoleType::UpdateAgents, &ctx.dave) {\n            Ok(_) => panic!(\"Should panic because caller is restricted\"),\n            Err(_) => (),\n        };\n    }\n    #[test]\n    fn test_nominator_update_agents_role_panic_on_transfer_admin_because_caller_not_admin() {\n        let ctx = setup(VALIDATOR_COUNT).unwrap();\n\n        // Charlie (not admin) cannot transfer admin\n        match helpers::transfer_role_admin(ctx.sess, &ctx.registry, &ctx.charlie, &helpers::RoleType::UpdateAgents, &ctx.dave) {\n            Ok(_) => panic!(\"Should panic because caller is restricted\"),\n            Err(_) => (),\n        };\n    }\n    #[test]\n    fn test_nominator_remove_agent_role_flow() {\n        let ctx = setup(VALIDATOR_COUNT).unwrap();\n\n        // Check roles\n        let (role, sess) = helpers::get_role(ctx.sess, &ctx.registry, &helpers::RoleType::RemoveAgent).unwrap();\n        assert_eq!(role, ctx.bob);\n        let (admin, sess) = helpers::get_role_admin(sess, &ctx.registry, &helpers::RoleType::RemoveAgent).unwrap();\n        assert_eq!(admin, ctx.bob);\n\n        // Bob (admin) transfers role to Charlie\n        let sess = helpers::transfer_role(sess, &ctx.registry, &admin, &helpers::RoleType::RemoveAgent, &ctx.charlie).unwrap();\n        // Bob (admin) transfers admin to Charlie\n        let sess = helpers::transfer_role_admin(sess, &ctx.registry, &admin, &helpers::RoleType::RemoveAgent, &ctx.charlie).unwrap();\n\n        // Check roles\n        let (role, sess) = helpers::get_role(sess, &ctx.registry, &helpers::RoleType::RemoveAgent).unwrap();\n        assert_eq!(role, ctx.charlie);\n        let (admin, _sess) = helpers::get_role_admin(sess, &ctx.registry, &helpers::RoleType::RemoveAgent).unwrap();\n        assert_eq!(admin, ctx.charlie);\n    }\n    #[test]\n    fn test_nominator_disable_agent_role_panic_on_transfer_role_because_caller_not_admin() {\n        let ctx = setup(VALIDATOR_COUNT).unwrap();\n\n        // Charlie (not admin) cannot transfer role\n        match helpers::transfer_role(ctx.sess, &ctx.registry, &ctx.charlie, &helpers::RoleType::DisableAgent, &ctx.dave) {\n            Ok(_) => panic!(\"Should panic because caller is restricted\"),\n            Err(_) => (),\n        };\n    }\n    #[test]\n    fn test_nominator_disable_agent_role_panic_on_transfer_admin_because_caller_not_admin() {\n        let ctx = setup(VALIDATOR_COUNT).unwrap();\n\n        // Charlie (not admin) cannot transfer admin\n        match helpers::transfer_role_admin(ctx.sess, &ctx.registry, &ctx.charlie, &helpers::RoleType::DisableAgent, &ctx.dave) {\n            Ok(_) => panic!(\"Should panic because caller is restricted\"),\n            Err(_) => (),\n        };\n    }\n    #[test]\n    fn test_nominator_remove_agent_role_panic_on_transfer_role_because_caller_not_admin() {\n        let ctx = setup(VALIDATOR_COUNT).unwrap();\n\n        // Charlie (not admin) cannot transfer role\n        match helpers::transfer_role(ctx.sess, &ctx.registry, &ctx.charlie, &helpers::RoleType::AddAgent, &ctx.dave) {\n            Ok(_) => panic!(\"Should panic because caller is restricted\"),\n            Err(_) => (),\n        };\n    }\n    #[test]\n    fn test_nominator_remove_agent_role_panic_on_transfer_admin_because_caller_not_admin() {\n        let ctx = setup(VALIDATOR_COUNT).unwrap();\n\n        // Charlie (not admin) cannot transfer admin\n        match helpers::transfer_role_admin(ctx.sess, &ctx.registry, &ctx.charlie, &helpers::RoleType::AddAgent, &ctx.dave) {\n            Ok(_) => panic!(\"Should panic because caller is restricted\"),\n            Err(_) => (),\n        };\n    }\n    #[test]\n    fn test_nominator_addition_panic_because_caller_restricted() {\n        let ctx = setup(2 as usize).unwrap();\n\n        match helpers::call_add_agent(\n            ctx.sess,\n            &ctx.registry,\n            &ctx.charlie, // does not have `helpers::RoleType::AddAgent`\n            &ctx.charlie,\n            &ctx.validators[ctx.validators.len() - 1],\n            100e12 as u128,\n        ) {\n            Ok(_) => panic!(\"Should panic because caller is restricted\"),\n            Err(_) => (),\n        };\n    }\n    #[test]\n    fn test_nominator_addition_panic_because_too_many_agents() {\n        let ctx = setup(VALIDATOR_COUNT).unwrap();\n\n        let (_, agents_before, mut sess) = helpers::get_agents(ctx.sess, &ctx.registry).unwrap();\n        let prior_agent_count = agents_before.len();\n\n        for i in prior_agent_count..ctx.max_agents {\n            (_, sess) = helpers::call_add_agent(\n                sess,\n                &ctx.registry,\n                &ctx.bob,\n                &ctx.charlie,\n                &AccountId32::new([i as u8; 32]),\n                100e12 as u128,\n            ).unwrap();\n        }\n\n        let (_, agents_after, sess) = helpers::get_agents(sess, &ctx.registry).unwrap();\n        assert_eq!(agents_after.len(), ctx.max_agents);\n\n        match helpers::call_add_agent(\n            sess,\n            &ctx.registry,\n            &ctx.bob,\n            &ctx.charlie,\n            &AccountId32::new([ctx.max_agents as u8; 32]),\n            100e12 as u128,\n        ) {\n            Ok(_) => panic!(\"Should panic because agent count exceeded\"),\n            Err(_) => (),\n        };\n    }\n    #[test]\n    fn test_nominator_update_panic_because_caller_restricted() {\n        let ctx = setup(VALIDATOR_COUNT).unwrap();\n\n        match helpers::call_update_agents(\n            ctx.sess,\n            &ctx.registry,\n            &ctx.charlie, // does not have `helpers::RoleType::UpdateAgents`\n            vec![helpers::WeightUpdate {\n                agent: ctx.nominators[0].clone(),\n                weight: 100,\n                increase: true,\n            }],\n        ) {\n            Ok(_) => panic!(\"Should panic because caller is restricted\"),\n            Err(_) => (),\n        };\n    }\n    #[test]\n    fn test_nominator_update_panic_because_new_weight_too_low() {\n        let ctx = setup(VALIDATOR_COUNT).unwrap();\n\n        match helpers::call_update_agents(\n            ctx.sess,\n            &ctx.registry,\n            &ctx.bob,\n            vec![helpers::WeightUpdate {\n                agent: ctx.nominators[0].clone(),\n                weight: 101, // weight is already set to 100\n                increase: false,\n            }],\n        ) {\n            Ok(_) => panic!(\"Should panic because weight cannot underflow\"),\n            Err(_) => (),\n        };\n    }\n    #[test]\n    fn test_nominator_disable_panic_because_caller_restricted() {\n        let ctx = setup(VALIDATOR_COUNT).unwrap();\n\n        match helpers::call_disable_agent(\n            ctx.sess,\n            &ctx.registry,\n            &ctx.charlie, // does not have `helpers::RoleType::DisableAgent`\n            &ctx.nominators[0],\n        ) {\n            Ok(_) => panic!(\"Should panic because caller is restricted\"),\n            Err(_) => (),\n        };\n    }\n    #[test]\n    fn test_nominator_disable_success() {\n        let ctx = setup(VALIDATOR_COUNT).unwrap();\n\n        let (total_weight_before, agents_before, sess) = helpers::get_agents(\n            ctx.sess,\n            &ctx.registry,\n        )\n            .unwrap();\n\n        let agent_to_disable = agents_before[0].address.clone();\n\n        // Disable agent\n        let sess = helpers::call_disable_agent(\n            sess,\n            &ctx.registry,\n            &ctx.bob, // has `helpers::RoleType::DisableAgent`\n            &agent_to_disable,\n        )\n            .unwrap();\n\n        let (total_weight_after, agents_after, sess) = helpers::get_agents(\n            sess,\n            &ctx.registry,\n        )\n            .unwrap();\n\n        assert_eq!(agents_after.len(), agents_before.len());\n        assert_eq!(total_weight_after, total_weight_before - agents_before[0].weight);\n        assert_eq!(agents_after[0].address, agents_before[0].address);\n        assert_eq!(agents_after[0].weight, 0);\n\n        // Attempt to add weight back\n        match helpers::call_update_agents(\n            sess,\n            &ctx.registry,\n            &ctx.bob,\n            vec![helpers::WeightUpdate {\n                agent: agent_to_disable.clone(),\n                weight: 100,\n                increase: true,\n            }],\n        ) {\n            Ok(_) => panic!(\"Should panic because agent is disabled\"),\n            Err(_) => (),\n        };\n    }\n    #[test]\n    fn test_nominator_remove_panic_because_stake_is_non_zero() {\n        let ctx = setup(VALIDATOR_COUNT).unwrap();\n\n        // Stake 1k AZERO\n        let (_, sess) = helpers::call_stake(ctx.sess, &ctx.vault, &ctx.share_token, &ctx.alice, 1_000e12 as u128).unwrap();\n\n        match helpers::call_remove_agent(\n            sess,\n            &ctx.registry,\n            &ctx.bob, // has `helpers::RoleType::RemoveAgent`\n            &ctx.nominators[0],\n        ) {\n            Ok(_) => panic!(\"Should panic because nominators[0] has stake\"),\n            Err(_) => (),\n        };\n    }\n    #[test]\n    fn test_nominator_remove_panic_because_caller_restricted() {\n        let ctx = setup(VALIDATOR_COUNT).unwrap();\n\n        match helpers::call_remove_agent(\n            ctx.sess,\n            &ctx.registry,\n            &ctx.charlie, // does not have `helpers::RoleType::RemoveAgent`\n            &ctx.nominators[0],\n        ) {\n            Ok(_) => panic!(\"Should panic because caller is restricted\"),\n            Err(_) => (),\n        };\n    }\n    #[test]\n    fn test_nominator_remove_success() {\n        let ctx = setup(VALIDATOR_COUNT).unwrap();\n\n        let (total_weight_before, agents_before, sess) = helpers::get_agents(\n            ctx.sess,\n            &ctx.registry,\n        )\n            .unwrap();\n\n        // Remove agent\n        let sess = helpers::call_remove_agent(\n            sess,\n            &ctx.registry,\n            &ctx.bob, // has `helpers::RoleType::RemoveAgent`\n            &ctx.nominators[0],\n        )\n            .unwrap();\n\n        let (total_weight_after, agents_after, _sess) = helpers::get_agents(\n            sess,\n            &ctx.registry,\n        )\n            .unwrap();\n\n        assert_eq!(agents_after.len(), agents_before.len() - 1);\n        assert_eq!(total_weight_after, total_weight_before - agents_before[1].weight);\n        assert_eq!(agents_after[0].address, agents_before[1].address);\n        assert_eq!(agents_after[0].weight, agents_before[1].weight);\n    }\n    #[test]\n    fn test_nominator_addition_equal_weights() -> Result<(), Box<dyn Error>> {\n        let ctx = setup(2 as usize).unwrap();\n\n        // Stake 10 million AZERO\n        let (_, sess) = helpers::call_stake(ctx.sess, &ctx.vault, &ctx.share_token, &ctx.bob, 10_000_000e12 as u128).unwrap();\n\n        let (stake1, _unbond, sess) = helpers::query_nominator_balance(sess, &ctx.nominators[0]).unwrap();\n        let (stake2, _unbond, sess) = helpers::query_nominator_balance(sess, &ctx.nominators[1]).unwrap();\n        assert_eq!(stake1, 5_000_000e12 as u128); // 50% to agent0\n        assert_eq!(stake2, 5_000_000e12 as u128); // 50% to agent1\n\n        let (total_weight_before, agents_before, sess) = helpers::get_agents(\n            sess,\n            &ctx.registry,\n        )\n            .unwrap();\n\n        // Add nomination agent\n        let (_new_agent, sess) = helpers::call_add_agent(\n            sess,\n            &ctx.registry,\n            &ctx.bob,\n            &ctx.bob,\n            &AccountId32::new([101u8; 32]),\n            100e12 as u128,\n        )?;\n\n        let (total_weight_after, agents_after, sess) = helpers::get_agents(\n            sess,\n            &ctx.registry,\n        )\n            .unwrap();\n\n        assert_eq!(agents_after.len(), agents_before.len() + 1);\n        assert_eq!(total_weight_after, total_weight_before);\n        assert_eq!(agents_after[2].weight, 0);\n\n        // Update weight from 0 to 100\n        let sess = helpers::call_update_agents(\n            sess,\n            &ctx.registry,\n            &ctx.bob,\n            vec![helpers::WeightUpdate {\n                agent: agents_after[2].address.clone(),\n                weight: 100,\n                increase: true,\n            }],\n        )\n            .unwrap();\n\n        let (total_weight_after, agents_after, sess) = helpers::get_agents(\n            sess,\n            &ctx.registry,\n        )\n            .unwrap();\n\n        assert_eq!(agents_after.len(), agents_before.len() + 1);\n        assert_eq!(total_weight_after, total_weight_before + 100);\n        assert_eq!(agents_after[2].weight, 100);\n\n        // Stake additional 10 million AZERO\n        let (_, sess) = helpers::call_stake(sess, &ctx.vault, &ctx.share_token, &ctx.bob, 10_000_000e12 as u128).unwrap();\n\n        let (stake1, _, sess) = helpers::query_nominator_balance(sess, &ctx.nominators[0]).unwrap();\n        let (stake2, _, sess) = helpers::query_nominator_balance(sess, &ctx.nominators[1]).unwrap();\n        let (stake3, _, _sess) = helpers::query_nominator_balance(sess, &agents_after[2].address).unwrap();\n        assert_eq!(stake1, 6_666_666_666666666668);\n        assert_eq!(stake2, 6_666_666_666666666666);\n        assert_eq!(stake3, 6_666_666_666666666666);\n\n        Ok(())\n    }\n    #[test]\n    fn test_nominator_addition_unequal_weights() -> Result<(), Box<dyn Error>> {\n        let ctx = setup(2 as usize).unwrap();\n\n        // Stake 10m AZERO\n        let (_, sess) = helpers::call_stake(ctx.sess, &ctx.vault, &ctx.share_token, &ctx.bob, 10_000_000e12 as u128).unwrap();\n\n        let (stake1, _, sess) = helpers::query_nominator_balance(sess, &ctx.nominators[0]).unwrap();\n        let (stake2, _, sess) = helpers::query_nominator_balance(sess, &ctx.nominators[1]).unwrap();\n        assert_eq!(stake1, 5_000_000e12 as u128); // 50% to agent0\n        assert_eq!(stake2, 5_000_000e12 as u128); // 50% to agent1\n\n        let (total_weight_before, agents_before, sess) = helpers::get_agents(\n            sess,\n            &ctx.registry,\n        )\n            .unwrap();\n\n        // Add nomination agent\n        let (_new_agent, sess) = helpers::call_add_agent(\n            sess,\n            &ctx.registry,\n            &ctx.bob,\n            &ctx.bob,\n            &AccountId32::new([101u8; 32]),\n            100e12 as u128,\n        )?;\n\n        let (total_weight_after, agents_after, sess) = helpers::get_agents(\n            sess,\n            &ctx.registry,\n        )\n            .unwrap();\n\n        assert_eq!(agents_after.len(), agents_before.len() + 1);\n        assert_eq!(total_weight_after, total_weight_before);\n        assert_eq!(agents_after[2].weight, 0);\n\n        // Update weight from 0 to 50\n        let sess = helpers::call_update_agents(\n            sess,\n            &ctx.registry,\n            &ctx.bob,\n            vec![helpers::WeightUpdate {\n                agent: agents_after[2].address.clone(),\n                weight: 50,\n                increase: true,\n            }],\n        )\n            .unwrap();\n\n        let (total_weight_after, agents_after, sess) = helpers::get_agents(\n            sess,\n            &ctx.registry,\n        )\n            .unwrap();\n\n        assert_eq!(total_weight_after, total_weight_before + 50);\n        assert_eq!(agents_after[2].weight, 50);\n\n        // Stake another 10m AZERO\n        let (_, sess) = helpers::call_stake(sess, &ctx.vault, &ctx.share_token, &ctx.bob, 10_000_000e12 as u128).unwrap();\n\n        let (stake1, _, sess) = helpers::query_nominator_balance(sess, &ctx.nominators[0]).unwrap();\n        let (stake2, _, sess) = helpers::query_nominator_balance(sess, &ctx.nominators[1]).unwrap();\n        let (stake3, _, _sess) = helpers::query_nominator_balance(sess, &agents_after[2].address).unwrap();\n        assert_eq!(stake1, 8_000_000e12 as u128);\n        assert_eq!(stake2, 8_000_000e12 as u128);\n        assert_eq!(stake3, 4_000_000e12 as u128);\n\n        Ok(())\n    }\n    #[test]\n    fn test_gas_cost_of_nominator_addition_flow_with_many_agents() -> Result<(), Box<dyn Error>> {\n        let ctx = setup(VALIDATOR_COUNT - 1).unwrap();\n\n        // Stake 10 million AZERO\n        let (_, sess) = helpers::call_stake(ctx.sess, &ctx.vault, &ctx.share_token, &ctx.bob, 10_000_000e12 as u128).unwrap();\n\n        let (total_weight_before, agents_before, sess) = helpers::get_agents(sess, &ctx.registry).unwrap();\n\n        // Add nomination agent\n        let (_new_agent, sess) = helpers::call_add_agent(\n            sess,\n            &ctx.registry,\n            &ctx.bob,\n            &ctx.bob,\n            &AccountId32::new([101u8; 32]),\n            100e12 as u128,\n        )?;\n\n        let (total_weight_after, agents_after, sess) = helpers::get_agents(sess, &ctx.registry).unwrap();\n\n        assert_eq!(agents_after.len(), agents_before.len() + 1);\n        assert_eq!(total_weight_after, total_weight_before);\n        assert_eq!(agents_after[agents_after.len() - 1].weight, 0);\n\n        // Update weight from 0 to 100\n        let sess = helpers::call_update_agents(\n            sess,\n            &ctx.registry,\n            &ctx.bob,\n            vec![helpers::WeightUpdate {\n                agent: agents_after[agents_after.len() - 1].address.clone(),\n                weight: 100,\n                increase: true,\n            }],\n        )\n            .unwrap();\n\n        let (total_weight_after, agents_after, _sess) = helpers::get_agents(sess, &ctx.registry).unwrap();\n\n        assert_eq!(agents_after.len(), agents_before.len() + 1);\n        assert_eq!(total_weight_after, total_weight_before + 100);\n        assert_eq!(agents_after[agents_after.len() - 1].weight, 100);\n\n        Ok(())\n    }\n    #[test]\n    fn test_unlock_weight_change() -> Result<(), Box<dyn Error>> {\n        let ctx = setup(2 as usize).unwrap();\n        let sess = ctx.sess;\n\n        // Stake 5 million AZERO\n        let (_, sess) = helpers::call_stake(sess, &ctx.vault, &ctx.share_token, &ctx.alice, 1_000_000e12 as u128).unwrap();\n        let (_, sess) = helpers::call_stake(sess, &ctx.vault, &ctx.share_token, &ctx.bob, 1_000_000e12 as u128).unwrap();\n        let (_, sess) = helpers::call_stake(sess, &ctx.vault, &ctx.share_token, &ctx.charlie, 1_000_000e12 as u128).unwrap();\n        let (_, sess) = helpers::call_stake(sess, &ctx.vault, &ctx.share_token, &ctx.dave, 1_000_000e12 as u128).unwrap();\n        let (_, sess) = helpers::call_stake(sess, &ctx.vault, &ctx.share_token, &ctx.ed, 1_000_000e12 as u128).unwrap();\n\n        let sess = helpers::update_days(sess, 2);\n\n        // Update agent #1 weight from 100/200 to 50/150\n        // Change weight -50 (from 100 to 50)\n        let sess = helpers::call_update_agents(\n            sess,\n            &ctx.registry,\n            &ctx.bob,\n            vec![helpers::WeightUpdate {\n                agent: ctx.nominators[0].clone(),\n                weight: 50,\n                increase: false,\n            }],\n        )\n            .unwrap();\n\n        // Request unlocks of all 5 million sA0\n        let (_, sess) = helpers::call_request_unlock(sess, &ctx.vault, &ctx.share_token, &ctx.alice, 1_000_000e12 as u128).unwrap();\n        let (_, sess) = helpers::call_request_unlock(sess, &ctx.vault, &ctx.share_token, &ctx.bob, 1_000_000e12 as u128).unwrap();\n        let (_, sess) = helpers::call_request_unlock(sess, &ctx.vault, &ctx.share_token, &ctx.charlie, 1_000_000e12 as u128).unwrap();\n        let (_, sess) = helpers::call_request_unlock(sess, &ctx.vault, &ctx.share_token, &ctx.dave, 1_000_000e12 as u128).unwrap();\n        let (_, sess) = helpers::call_request_unlock(sess, &ctx.vault, &ctx.share_token, &ctx.ed, 1_000_000e12 as u128).unwrap();\n\n        // Fees accumulated for 5m AZERO staked for 2 days\n        let expected_fees = 5_000_000e12 as u128 * 2 * helpers::DAY as u128 / helpers::YEAR as u128 * 200 / helpers::BIPS;\n        let (claimable_fees, sess) = helpers::get_current_virtual_shares(sess, &ctx.vault).unwrap();\n        assert_eq!(claimable_fees, expected_fees);\n\n        let (expected_azero, sess) = helpers::get_azero_from_shares(sess, &ctx.vault, expected_fees).unwrap();\n\n        let (stake1, _, sess) = helpers::query_nominator_balance(sess, &ctx.nominators[0]).unwrap();\n        let (stake2, _, _sess) = helpers::query_nominator_balance(sess, &ctx.nominators[1]).unwrap();\n        assert_eq!(stake1, expected_azero * 50 / 150); // agent 0 fees\n        assert_eq!(stake2, expected_azero * 100 / 150 + 1); // agent 1 fees\n\n        Ok(())\n    }\n    #[test]\n    fn test_withdraw_all() -> Result<(), Box<dyn Error>> {\n        let ctx = setup(2 as usize).unwrap();\n        let sess = ctx.sess;\n\n        // Stake 5 million AZERO\n        let (_, sess) = helpers::call_stake(sess, &ctx.vault, &ctx.share_token, &ctx.alice, 1_000_000e12 as u128).unwrap();\n        let (_, sess) = helpers::call_stake(sess, &ctx.vault, &ctx.share_token, &ctx.bob, 1_000_000e12 as u128).unwrap();\n        let (_, sess) = helpers::call_stake(sess, &ctx.vault, &ctx.share_token, &ctx.charlie, 1_000_000e12 as u128).unwrap();\n        let (_, sess) = helpers::call_stake(sess, &ctx.vault, &ctx.share_token, &ctx.dave, 1_000_000e12 as u128).unwrap();\n        let (_, sess) = helpers::call_stake(sess, &ctx.vault, &ctx.share_token, &ctx.ed, 1_000_000e12 as u128).unwrap();\n\n        // Allow fees to accumulate\n        let sess = helpers::update_days(sess, 2);\n\n        // Update agent weight from 100/200 to 50/150\n        // Change weight -50 (from 100 to 50)\n        let sess = helpers::call_update_agents(\n            sess,\n            &ctx.registry,\n            &ctx.bob,\n            vec![helpers::WeightUpdate {\n                agent: ctx.nominators[0].clone(),\n                weight: 50,\n                increase: false,\n            }],\n        )\n            .unwrap();\n\n        // Request unlocking of 5 million AZERO\n        let (_, sess) = helpers::call_request_unlock(sess, &ctx.vault, &ctx.share_token, &ctx.alice, 1_000_000e12 as u128).unwrap();\n        let (_, sess) = helpers::call_request_unlock(sess, &ctx.vault, &ctx.share_token, &ctx.bob, 1_000_000e12 as u128).unwrap();\n        let (_, sess) = helpers::call_request_unlock(sess, &ctx.vault, &ctx.share_token, &ctx.charlie, 1_000_000e12 as u128).unwrap();\n        let (_, sess) = helpers::call_request_unlock(sess, &ctx.vault, &ctx.share_token, &ctx.dave, 1_000_000e12 as u128).unwrap();\n        let (_, sess) = helpers::call_request_unlock(sess, &ctx.vault, &ctx.share_token, &ctx.ed, 1_000_000e12 as u128).unwrap();\n\n        // Wait for cooldown period\n        let sess = helpers::update_days(sess, 14);\n\n        // Fees accumulated for 5m AZERO staked for 2 days\n        let expected_fees_a = 5_000_000e12 as u128 * 2 * helpers::DAY as u128 / helpers::YEAR as u128 * 200 / helpers::BIPS;\n        let expected_fees_b = expected_fees_a * 14 * helpers::DAY as u128 / helpers::YEAR as u128 * 200 / helpers::BIPS;\n        let expected_fees = expected_fees_a + expected_fees_b;\n\n        let (claimable_fees, sess) = helpers::get_current_virtual_shares(sess, &ctx.vault).unwrap();\n        assert_eq!(claimable_fees, expected_fees);\n\n        let (expected_azero, sess) = helpers::get_azero_from_shares(sess, &ctx.vault, expected_fees).unwrap();\n\n        // Verify all AZERO is withdrawn except fees\n        let (stake, _unbond, sess) = helpers::query_nominator_balance(sess, &ctx.nominators[0]).unwrap();\n        assert_eq!(stake, expected_azero * 50 / 150); // agent 0 weight\n        let (stake, _unbond, sess) = helpers::query_nominator_balance(sess, &ctx.nominators[1]).unwrap();\n        assert_eq!(stake, expected_azero * 100 / 150 + 1); // agent 1 weight\n\n        let fee_split = expected_azero / 5;\n        let (redeemed, sess) = helpers::call_redeem_with_withdraw(sess, &ctx.vault, &ctx.alice, 0).unwrap();\n        assert_eq!(redeemed, 1_000_000e12 as u128 + 32 - fee_split - 10);\n        let (redeemed, sess) = helpers::call_redeem(sess, &ctx.vault, &ctx.bob, 0).unwrap();\n        assert_eq!(redeemed, 1_000_000e12 as u128 + 32 - fee_split - 8);\n        let (redeemed, sess) = helpers::call_redeem(sess, &ctx.vault, &ctx.charlie, 0).unwrap();\n        assert_eq!(redeemed, 1_000_000e12 as u128 + 32 - fee_split - 8);\n        let (redeemed, sess) = helpers::call_redeem(sess, &ctx.vault, &ctx.dave, 0).unwrap();\n        assert_eq!(redeemed, 1_000_000e12 as u128 + 32 - fee_split - 8);\n        let (redeemed, mut sess) = helpers::call_redeem(sess, &ctx.vault, &ctx.ed, 0).unwrap();\n        assert_eq!(redeemed, 1_000_000e12 as u128 + 32 - fee_split - 8);\n\n        let vault_balance = sess.chain_api().balance(&ctx.vault);\n        assert_eq!(vault_balance, 1, \"Vault should only have dust remaining\");\n\n        Ok(())\n    }\n    #[test]\n    fn test_token_transfer_from_panics_properly() {\n        let ctx = setup(VALIDATOR_COUNT).unwrap();\n\n        // Bob stakes 1m AZERO\n        let (_, sess) = helpers::call_stake(ctx.sess, &ctx.vault, &ctx.share_token, &ctx.bob, 1_000_000e12 as u128).unwrap();\n\n        // Ed attempts to transfer 1k of Bob's sA0\n        match helpers::call_function(\n            sess,\n            &ctx.share_token,\n            &ctx.ed, // not bob\n            String::from(\"PSP22::transfer_from\"),\n            Some(vec![ctx.bob.to_string(), ctx.ed.to_string(), 1_000e12.to_string(), \"[]\".to_string()]),\n            None,\n            helpers::transcoder_share_token(),\n        )  {\n            Ok(_) => panic!(\"Should panic because Bob has not approved Ed to transfer sA0\"),\n            Err(res) => println!(\"{:?}\", res.to_string()),\n        };\n    }\n    #[test]\n    fn test_token_transfer_from_works_normally() {\n        let ctx = setup(VALIDATOR_COUNT).unwrap();\n\n        // Bob stakes 1m AZERO\n        let (_, sess) = helpers::call_stake(ctx.sess, &ctx.vault, &ctx.share_token, &ctx.bob, 1_000_000e12 as u128).unwrap();\n\n        // Bob approves Ed to transfer 1k sA0\n        let sess = helpers::call_function(\n            sess,\n            &ctx.share_token,\n            &ctx.bob,\n            String::from(\"PSP22::approve\"),\n            Some(vec![ctx.ed.to_string(), 1_000e12.to_string()]),\n            None,\n            helpers::transcoder_share_token(),\n        ).unwrap();\n\n        // Ed transfers 1k of Bob's sA0\n        helpers::call_function(\n            sess,\n            &ctx.share_token,\n            &ctx.ed, // previously approved\n            String::from(\"PSP22::transfer_from\"),\n            Some(vec![ctx.bob.to_string(), ctx.ed.to_string(), 1_000e12.to_string(), \"[]\".to_string()]),\n            None,\n            helpers::transcoder_share_token(),\n        ).unwrap();\n    }\n    #[test]\n    fn test_compound_call() -> Result<(), Box<dyn Error>> {\n        let ctx = setup(VALIDATOR_COUNT).unwrap();\n\n        // Stake 1 AZERO\n        let deposit_amount = 1e12 as u128;\n        let (shares, mut sess) = helpers::call_stake(ctx.sess, &ctx.vault, &ctx.share_token, &ctx.bob, deposit_amount).unwrap();\n        assert_eq!(shares, deposit_amount); // 1:1 ratio\n\n        // Fund nominator agents to simulate AZERO being claimed\n        let mock_reward = 10_000;\n        sess.chain_api().add_tokens(ctx.nominators[0].clone(), mock_reward);\n        sess.chain_api().add_tokens(ctx.nominators[1].clone(), mock_reward);\n\n        // Compound\n        let sess = helpers::call_function(\n            sess,\n            &ctx.vault,\n            &ctx.bob,\n            String::from(\"IVault::compound\"),\n            None,\n            None,\n            helpers::transcoder_vault(),\n        )\n            .unwrap();\n\n        let (total_pooled, _sess) = helpers::get_total_pooled(sess, &ctx.vault).unwrap();\n        assert_eq!(total_pooled, deposit_amount + mock_reward * 2);\n\n        Ok(())\n    }\n\n    #[test]\n    fn test_compound_before_initial_stake() -> Result<(), Box<dyn Error>> {\n        let ctx = setup(VALIDATOR_COUNT).unwrap();\n        let mut sess = ctx.sess;\n\n        // Send funds to an agent\n        sess.chain_api().add_tokens(ctx.nominators[0].clone(), 1000);\n\n        // Compound\n        let sess = helpers::call_function(\n            sess,\n            &ctx.vault,\n            &ctx.bob,\n            String::from(\"IVault::compound\"),\n            None,\n            None,\n            helpers::transcoder_vault(),\n        )\n            .unwrap();\n\n        let (total_pooled, sess) = helpers::get_total_pooled(sess, &ctx.vault).unwrap();\n        assert_eq!(total_pooled, 1000);\n\n        let deposit_amount = 1e12 as u128;\n        let (shares, _sess) = helpers::call_stake(sess, &ctx.vault, &ctx.share_token, &ctx.bob, deposit_amount).unwrap();\n        assert_eq!(shares, deposit_amount); // 1:1 ratio\n\n        Ok(())\n    }\n}\n",
        "drink_tests/sources.rs":"use drink::session::contract_transcode::ContractMessageTranscoder;\nuse serde::Deserialize;\nuse serde_json::from_str;\nuse std::{\n    fs::{read, read_to_string},\n    path::PathBuf,\n    rc::Rc,\n};\n\n// Fetch deployed hashes\n\n#[derive(Deserialize)]\nstruct Source {\n    hash: String,\n}\n#[derive(Deserialize)]\nstruct Artifact {\n    source: Source,\n}\npub fn hash_registry() -> String {\n    let json = read_to_string(\"../deployments/development/registry/registry.json\").unwrap();\n    let artifact: Artifact = from_str(&json).unwrap();\n    artifact.source.hash\n}\npub fn hash_share_token() -> String {\n    let json = read_to_string(\"../deployments/development/share_token/share_token.json\").unwrap();\n    let artifact: Artifact = from_str(&json).expect(\"Should extract hash from share_token.json\");\n    artifact.source.hash\n}\n\npub fn hash_nominator() -> String {\n    let json = read_to_string(\"../deployments/development/mock_nominator/mock_nominator.json\").unwrap();\n    let artifact: Artifact = from_str(&json).expect(\"Should extract hash from mock_nominator.json\");\n    artifact.source.hash\n}\n\n// Transcoders for making contract calls\n\npub fn transcoder_registry() -> Option<Rc<ContractMessageTranscoder>> {\n    Some(Rc::new(\n        ContractMessageTranscoder::load(PathBuf::from(\n            \"../deployments/development/registry/registry.json\",\n        ))\n            .expect(\"Failed to create transcoder\"),\n    ))\n}\npub fn transcoder_share_token() -> Option<Rc<ContractMessageTranscoder>> {\n    Some(Rc::new(\n        ContractMessageTranscoder::load(PathBuf::from(\n            \"../deployments/development/share_token/share_token.json\",\n        ))\n            .expect(\"Failed to create transcoder\"),\n    ))\n}\npub fn transcoder_vault() -> Option<Rc<ContractMessageTranscoder>> {\n    Some(Rc::new(\n        ContractMessageTranscoder::load(PathBuf::from(\n            \"../deployments/development/vault/vault.json\",\n        ))\n            .expect(\"Failed to create transcoder\"),\n    ))\n}\npub fn transcoder_nominator() -> Option<Rc<ContractMessageTranscoder>> {\n    Some(Rc::new(\n        ContractMessageTranscoder::load(PathBuf::from(\n            \"../deployments/development/mock_nominator/mock_nominator.json\",\n        ))\n            .expect(\"Failed to create transcoder\"),\n    ))\n}\n\n// Bytes for instantiating contracts\n\npub fn bytes_registry() -> Vec<u8> {\n    read(\"../deployments/development/registry/registry.wasm\")\n        .expect(\"Failed to find or read contract file\")\n}\npub fn bytes_share_token() -> Vec<u8> {\n    read(\"../deployments/development/share_token/share_token.wasm\")\n        .expect(\"Failed to find or read contract file\")\n}\npub fn bytes_vault() -> Vec<u8> {\n    read(\"../deployments/development/vault/vault.wasm\")\n        .expect(\"Failed to find or read contract file\")\n}\npub fn bytes_nominator() -> Vec<u8> {\n    read(\"../deployments/development/mock_nominator/mock_nominator.wasm\")\n        .expect(\"Failed to find or read contract file\")\n}\n",
        "src/mock_nominator/Cargo.toml":"[package]\nname = \"mock_nominator\"\nversion = \"0.1.0\"\nauthors = [\"Brandon <brandon@watercoolerstudios.io>\", \"John <john@watercoolerstudios.io\"]\nedition = \"2021\"\npublish = false\n\n[dependencies]\nink = { version = \"=4.3.0\", default-features = false, features = [\"call-runtime\"] }\nscale = { package = \"parity-scale-codec\", version = \"3\", default-features = false, features = [\n    \"derive\",\n] }\nscale-info = { version = \"=2.11.2\", default-features = false, features = [\n    \"derive\",\n], optional = true }\nsp-io = { version = \"=34.0.0\", default-features = false }\nsp-runtime = { version = \"=35.0.0\", default-features = false }\n\n[lib]\npath = \"lib.rs\"\n\n[features]\ndefault = [\"std\"]\nstd = [\"ink/std\", \"scale/std\", \"scale-info/std\", \"sp-runtime/std\", \"sp-io/std\"]\nink-as-dependency = []\ne2e-tests = []\n",
        "src/mock_nominator/errors.rs":"#[derive(Debug, PartialEq, Eq, scale::Encode, scale::Decode)]\n#[cfg_attr(feature = \"std\", derive(scale_info::TypeInfo))]\npub enum RuntimeError {\n    CallRuntimeFailed,\n    Unauthorized,\n    Active,\n}\n",
        "src/mock_nominator/lib.rs":"#![cfg_attr(not(feature = \"std\"), no_std, no_main)]\n\npub mod errors;\npub mod traits;\n\n#[ink::contract]\nmod mock_nominator {\n    use crate::errors::RuntimeError;\n    use crate::traits::INominationAgent;\n    use ink::env::Error as EnvError;\n\n    #[ink(storage)]\n    pub struct NominationAgent {\n        vault: AccountId,\n        registry: AccountId,\n        admin: AccountId,\n        validator: AccountId,\n        staked: u128,\n        unbonding: u128,\n        creation_bond: u128,\n    }\n\n    impl From<EnvError> for RuntimeError {\n        fn from(e: EnvError) -> Self {\n            match e {\n                EnvError::CallRuntimeFailed => RuntimeError::CallRuntimeFailed,\n                _ => panic!(\"Unexpected error from `pallet-contracts`.\"),\n            }\n        }\n    }\n\n    impl NominationAgent {\n        #[ink(constructor, payable)]\n        pub fn new(\n            vault: AccountId,\n            admin: AccountId,\n            validator: AccountId,\n        ) -> Self {\n            let creation_bond = Self::env().transferred_value();\n\n            // Mock spending AZERO to create agent\n            Self::env().transfer(\n                AccountId::from([0u8; 32]),\n                creation_bond,\n            ).unwrap();\n\n            Self {\n                vault,\n                registry: Self::env().caller(),\n                admin,\n                validator,\n                staked: 0,\n                unbonding: 0,\n                creation_bond,\n            }\n        }\n    }\n\n    impl INominationAgent for NominationAgent {\n        #[ink(message, payable, selector = 1)]\n        fn deposit(&mut self) -> Result<(), RuntimeError> {\n            if Self::env().caller() != self.vault {\n                return Err(RuntimeError::Unauthorized);\n            }\n            self.staked += Self::env().transferred_value();\n            return Ok(());\n        }\n\n        #[ink(message, selector = 2)]\n        fn start_unbond(&mut self, amount: u128) -> Result<(), RuntimeError> {\n            if Self::env().caller() != self.vault {\n                return Err(RuntimeError::Unauthorized);\n            }\n            self.staked -= amount;\n            self.unbonding += amount;\n            return Ok(());\n        }\n\n        #[ink(message, selector = 3)]\n        fn withdraw_unbonded(&mut self) -> Result<(), RuntimeError> {\n            if Self::env().caller() != self.vault {\n                return Err(RuntimeError::Unauthorized);\n            }\n            if self.unbonding > 0 {\n                Self::env().transfer(self.vault, self.unbonding)?;\n                self.unbonding = 0;\n            }\n            return Ok(());\n        }\n\n        #[ink(message, selector = 4)]\n        fn compound(&mut self) -> Result<Balance, RuntimeError> {\n            let vault = self.vault; // shadow\n\n            if Self::env().caller() != vault {\n                return Err(RuntimeError::Unauthorized);\n            }\n\n            let compound_amount = Self::env().balance() - self.staked - self.unbonding;\n\n            // Gracefully return when nomination agent has no rewards\n            if compound_amount == 0 {\n                return Ok(0);\n            }\n\n            if compound_amount > 0 {\n                self.staked += compound_amount;\n            }\n\n            Ok(compound_amount)\n        }\n\n        #[ink(message, selector = 12)]\n        fn get_staked_value(&self) -> Balance {\n            self.staked\n        }\n\n        #[ink(message, selector = 13)]\n        fn get_unbonding_value(&self) -> Balance {\n            self.unbonding\n        }\n\n        #[ink(message)]\n        fn get_vault(&self) -> AccountId {\n            self.vault\n        }\n\n        #[ink(message)]\n        fn get_admin(&self) -> AccountId {\n            self.admin\n        }\n\n        #[ink(message)]\n        fn get_validator(&self) -> AccountId {\n            self.validator\n        }\n\n        #[ink(message, selector = 101)]\n        fn destroy(&mut self) -> Result<(), RuntimeError> {\n            if Self::env().caller() != self.registry {\n                return Err(RuntimeError::Unauthorized);\n            }\n            if self.staked > 0 || self.unbonding > 0 {\n                return Err(RuntimeError::Active);\n            }\n            self.creation_bond = 0;\n            Ok(())\n        }\n\n        #[ink(message, selector = 102)]\n        fn admin_withdraw_bond(&mut self, to: AccountId) -> Result<u128, RuntimeError> {\n            if Self::env().caller() != self.admin {\n                return Err(RuntimeError::Unauthorized);\n            }\n            if self.creation_bond > 0 {\n                return Err(RuntimeError::Active);\n            }\n            // Requires funds are sent via test environment to succeed\n            let balance = Self::env().balance();\n            Self::env().transfer(to, balance).unwrap();\n            Ok(balance)\n        }\n\n        #[ink(message, selector = 999)]\n        fn set_code(&mut self, code_hash: [u8; 32]) -> Result<(), RuntimeError> {\n            if Self::env().caller() != self.registry {\n                return Err(RuntimeError::Unauthorized);\n            }\n            ink::env::set_code_hash(&code_hash)?;\n            Ok(())\n        }\n    }\n}\n",
        "src/mock_nominator/traits.rs":"use crate::errors::RuntimeError;\nuse ink::primitives::AccountId;\n\n#[ink::trait_definition]\npub trait INominationAgent {\n    #[ink(message, payable, selector = 1)]\n    fn deposit(&mut self) -> Result<(), RuntimeError>;\n\n    #[ink(message, selector = 2)]\n    fn start_unbond(&mut self, amount: u128) -> Result<(), RuntimeError>;\n\n    #[ink(message, selector = 3)]\n    fn withdraw_unbonded(&mut self) -> Result<(), RuntimeError>;\n\n    #[ink(message, selector = 4)]\n    fn compound(&mut self) -> Result<u128, RuntimeError>;\n\n    #[ink(message, selector = 12)]\n    fn get_staked_value(&self) -> u128;\n\n    #[ink(message, selector = 13)]\n    fn get_unbonding_value(&self) -> u128;\n\n    #[ink(message)]\n    fn get_vault(&self) -> AccountId;\n\n    #[ink(message)]\n    fn get_admin(&self) -> AccountId;\n\n    #[ink(message)]\n    fn get_validator(&self) -> AccountId;\n\n    #[ink(message, selector = 101)]\n    fn destroy(&mut self) -> Result<(), RuntimeError>;\n\n    #[ink(message, selector = 102)]\n    fn admin_withdraw_bond(&mut self, to: AccountId) -> Result<u128, RuntimeError>;\n\n    #[ink(message, selector = 999)]\n    fn set_code(&mut self, code_hash: [u8; 32]) -> Result<(), RuntimeError>;\n}\n",
        "src/nomination_agent/Cargo.toml":"[package]\nname = \"nomination_agent\"\nversion = \"0.1.0\"\nauthors = [\"Brandon <brandon@watercoolerstudios.io>\", \"John <john@watercoolerstudios.io\"]\nedition = \"2021\"\n\n[dependencies]\nink = { version = \"=4.3.0\", default-features = false, features = [\n    \"call-runtime\",\n    \"ink-debug\"\n] }\nscale = { package = \"parity-scale-codec\", version = \"3\", default-features = false, features = [\n    \"derive\",\n] }\nscale-info = { version = \"=2.11.2\", default-features = false, features = [\n    \"derive\",\n], optional = true }\nsp-io = { version = \"=34.0.0\", default-features = false }\nsp-runtime = { version = \"=35.0.0\", default-features = false }\n\n[lib]\nname = \"nomination_agent\"\npath = \"lib.rs\"\n\n[features]\ndefault = [\"std\"]\nstd = [\"ink/std\", \"scale/std\", \"scale-info/std\", \"sp-runtime/std\", \"sp-io/std\"]\nink-as-dependency = []\n",
        "src/nomination_agent/data.rs":"use ink::prelude::vec::Vec;\nuse ink::primitives::AccountId;\n\n#[allow(dead_code)]\n#[derive(Clone, scale::Encode)]\npub enum MultiAddress<AccountId, AccountIndex> {\n    // It's an account ID (pubkey).\n    Id(AccountId),\n    // It's an account index.\n    Index(#[codec(compact)] AccountIndex),\n    // It's some arbitrary raw bytes.\n    Raw(Vec<u8>),\n    // It's a 32 byte representation.\n    Address32([u8; 32]),\n    // Its a 20 byte representation.\n    Address20([u8; 20]),\n}\n\n#[allow(dead_code)]\n#[derive(scale::Encode)]\npub enum RewardDestination<_0> {\n    #[codec(index = 0)]\n    Staked,\n    #[codec(index = 1)]\n    Stash,\n    #[codec(index = 2)]\n    Controller,\n    #[codec(index = 3)]\n    Account(_0),\n    #[codec(index = 4)]\n    None,\n}\n\n#[derive(scale::Encode)]\npub enum StakingCall {\n    #[codec(index = 0)]\n    Bond {\n        #[codec(compact)]\n        value: u128,\n        payee: RewardDestination<AccountId>,\n    },\n    #[codec(index = 1)]\n    BondExtra {\n        #[codec(compact)]\n        max_additional: u128,\n    },\n    #[codec(index = 2)]\n    Unbond {\n        #[codec(compact)]\n        value: u128,\n    },\n    #[codec(index = 3)]\n    WithdrawUnbonded {\n        num_slashing_spans: u32,\n    },\n    #[codec(index = 5)]\n    Nominate {\n        targets: Vec<MultiAddress<AccountId, ()>>\n    },\n    #[codec(index = 6)]\n    Chill,\n}\n\n#[derive(scale::Encode)]\npub enum RuntimeCall {\n    #[codec(index = 8)]\n    Staking(StakingCall),\n}\n",
        "src/nomination_agent/errors.rs":"#[derive(Debug, PartialEq, Eq, scale::Encode, scale::Decode)]\n#[cfg_attr(feature = \"std\", derive(scale_info::TypeInfo))]\npub enum RuntimeError {\n    CallRuntimeFailed,\n    Unauthorized,\n    Active,\n}\n",
        "src/nomination_agent/lib.rs":"#![cfg_attr(not(feature = \"std\"), no_std, no_main)]\n\nmod data;\npub mod errors;\npub mod traits;\n\n#[ink::contract]\npub mod nomination_agent {\n    use crate::data::{MultiAddress, RewardDestination, RuntimeCall, StakingCall};\n    use crate::errors::RuntimeError;\n    use crate::traits::INominationAgent;\n    use ink::env::Error as EnvError;\n\n    #[ink(storage)]\n    pub struct NominationAgent {\n        vault: AccountId,\n        registry: AccountId,\n        admin: AccountId,\n        validator: AccountId,\n        staked: u128,\n        unbonding: u128,\n        creation_bond: u128,\n    }\n\n    impl From<EnvError> for RuntimeError {\n        fn from(e: EnvError) -> Self {\n            match e {\n                EnvError::CallRuntimeFailed => RuntimeError::CallRuntimeFailed,\n                _ => panic!(\"Unexpected error from `pallet-contracts`.\"),\n            }\n        }\n    }\n\n    impl NominationAgent {\n        #[ink(constructor, payable)]\n        pub fn new(\n            vault: AccountId,\n            admin: AccountId,\n            validator: AccountId,\n        ) -> Self {\n            let creation_bond = Self::env().transferred_value();\n\n            let nomination_agent = NominationAgent {\n                vault,\n                registry: Self::env().caller(),\n                admin,\n                validator,\n                staked: 0,\n                unbonding: 0,\n                creation_bond,\n            };\n\n            nomination_agent\n                .env()\n                .call_runtime(&RuntimeCall::Staking(StakingCall::Bond {\n                    value: creation_bond,\n                    payee: RewardDestination::Stash,\n                }))\n                .unwrap();\n\n            nomination_agent\n                .env()\n                .call_runtime(&RuntimeCall::Staking(StakingCall::Nominate {\n                    targets: [MultiAddress::Id(validator)].to_vec(),\n                }))\n                .unwrap();\n\n            nomination_agent\n        }\n    }\n\n    impl INominationAgent for NominationAgent {\n        #[ink(message, payable, selector = 1)]\n        fn deposit(&mut self) -> Result<(), RuntimeError> {\n            let deposit_amount = Self::env().transferred_value();\n\n            // Restricted to vault\n            if Self::env().caller() != self.vault {\n                return Err(RuntimeError::Unauthorized);\n            }\n\n            self.staked += deposit_amount;\n\n            // Bond extra AZERO\n            self.env()\n                .call_runtime(&RuntimeCall::Staking(StakingCall::BondExtra {\n                    max_additional: deposit_amount,\n                }))?;\n\n            Ok(())\n        }\n\n        #[ink(message, selector = 2)]\n        fn start_unbond(&mut self, amount: u128) -> Result<(), RuntimeError> {\n            // Restricted to vault\n            if Self::env().caller() != self.vault {\n                return Err(RuntimeError::Unauthorized);\n            }\n\n            self.staked -= amount;\n            self.unbonding += amount;\n\n            let balance_before = Self::env().balance();\n\n            // Unbond AZERO\n            self.env()\n                .call_runtime(&RuntimeCall::Staking(StakingCall::Unbond {\n                    value: amount,\n                }))?;\n\n            let withdrawn = Self::env().balance() - balance_before;\n\n            if withdrawn > 0 {\n                // Typically this should be 0\n                // If unlocking requests equal `staking.maxUnlockingChunks`, some might be withdrawn\n                ink::env::debug_println!(\"Withdrawn {:?} AZERO\", withdrawn);\n                self.unbonding -= withdrawn;\n                Self::env().transfer(self.vault, withdrawn)?;\n            }\n\n            Ok(())\n        }\n\n        #[ink(message, selector = 3)]\n        fn withdraw_unbonded(&mut self) -> Result<(), RuntimeError> {\n            let vault = self.vault; // shadow\n\n            // Restricted to vault\n            if Self::env().caller() != vault {\n                return Err(RuntimeError::Unauthorized);\n            }\n\n            let balance_before = Self::env().balance();\n\n            if let Err(e) = self.env().call_runtime(&RuntimeCall::Staking(\n                StakingCall::WithdrawUnbonded {\n                    num_slashing_spans: 0,\n                },\n            )) {\n                ink::env::debug_println!(\"Ignoring StakingCall::WithdrawUnbonded error {:?}\", e);\n                return Ok(());\n            };\n\n            let withdrawn = Self::env().balance() - balance_before;\n            ink::env::debug_println!(\"Withdrawn {:?} AZERO\", withdrawn);\n\n            // Transfer withdrawn AZERO to vault\n            if withdrawn > 0 {\n                self.unbonding -= withdrawn;\n                Self::env().transfer(vault, withdrawn)?;\n            }\n\n            Ok(())\n        }\n\n        #[ink(message, selector = 4)]\n        fn compound(&mut self) -> Result<Balance, RuntimeError> {\n            // Restricted to vault\n            if Self::env().caller() != self.vault {\n                return Err(RuntimeError::Unauthorized);\n            }\n\n            let balance_before = Self::env().balance();\n\n            // Gracefully return when no funds are available\n            if balance_before == 0 {\n                return Ok(0);\n            }\n\n            // Attempt bonding\n            self.env()\n                .call_runtime(&RuntimeCall::Staking(StakingCall::BondExtra {\n                    max_additional: balance_before,\n                }))\n                .ok();\n\n            let compounded = balance_before - Self::env().balance();\n\n            if compounded > 0 {\n                self.staked += compounded;\n            }\n\n            Ok(compounded)\n        }\n\n        #[ink(message, selector = 12)]\n        fn get_staked_value(&self) -> Balance {\n            self.staked\n        }\n\n        #[ink(message, selector = 13)]\n        fn get_unbonding_value(&self) -> Balance {\n            self.unbonding\n        }\n\n        #[ink(message)]\n        fn get_vault(&self) -> AccountId {\n            self.vault\n        }\n\n        #[ink(message)]\n        fn get_admin(&self) -> AccountId {\n            self.admin\n        }\n\n        #[ink(message)]\n        fn get_validator(&self) -> AccountId {\n            self.validator\n        }\n\n        /// Step 1 of 2 in finalizing the agent's lifecycle\n        /// Performs the following actions:\n        ///     1) Removes the validator nomination\n        ///     2) Begins unbonding the initial bond\n        ///\n        /// Can only be called by registry\n        /// Must have no protocol funds staked\n        /// Must have no protocol funds unbonding\n        #[ink(message, selector = 101)]\n        fn destroy(&mut self) -> Result<(), RuntimeError> {\n            // Restricted to registry\n            if Self::env().caller() != self.registry {\n                return Err(RuntimeError::Unauthorized);\n            }\n\n            if self.staked > 0 || self.unbonding > 0 {\n                return Err(RuntimeError::Active);\n            }\n\n            // Chill\n            self.env()\n                .call_runtime(&RuntimeCall::Staking(StakingCall::Chill))?;\n\n            // Unbond initial bond\n            self.env()\n                .call_runtime(&RuntimeCall::Staking(StakingCall::Unbond {\n                    value: self.creation_bond,\n                }))?;\n\n            self.creation_bond = 0;\n\n            Ok(())\n        }\n\n        /// Step 2 of 2 in finalizing the agent's lifecycle\n        /// Performs the following actions:\n        ///     1) Withdraws the (now unbonded) initial bond\n        ///     2) Transfers the initial bond to any account of choice\n        ///\n        /// Can only be called by admin\n        /// Must be called after `destroy()`\n        #[ink(message, selector = 102)]\n        fn admin_withdraw_bond(&mut self, to: AccountId) -> Result<u128, RuntimeError> {\n            // Restricted to admin\n            if Self::env().caller() != self.admin {\n                return Err(RuntimeError::Unauthorized);\n            }\n\n            if self.creation_bond > 0 {\n                return Err(RuntimeError::Active);\n            }\n\n            self.env()\n                .call_runtime(&RuntimeCall::Staking(StakingCall::WithdrawUnbonded {\n                    num_slashing_spans: 0,\n                }))\n                .ok();\n\n            let balance = Self::env().balance();\n\n            Self::env().transfer(to, balance)?;\n\n            Ok(balance)\n        }\n\n        /// Allows the Registry to effectively \"upgrade\" the contract logic\n        ///\n        /// Can only be called by registry\n        #[ink(message, selector = 999)]\n        fn set_code(&mut self, code_hash: [u8; 32]) -> Result<(), RuntimeError> {\n            // Restricted to registry\n            if Self::env().caller() != self.registry {\n                return Err(RuntimeError::Unauthorized);\n            }\n\n            ink::env::set_code_hash(&code_hash)?;\n\n            Ok(())\n        }\n    }\n}\n",
        "src/nomination_agent/traits.rs":"use crate::errors::RuntimeError;\nuse ink::primitives::AccountId;\n\n#[ink::trait_definition]\npub trait INominationAgent {\n    #[ink(message, payable, selector = 1)]\n    fn deposit(&mut self) -> Result<(), RuntimeError>;\n\n    #[ink(message, selector = 2)]\n    fn start_unbond(&mut self, amount: u128) -> Result<(), RuntimeError>;\n\n    #[ink(message, selector = 3)]\n    fn withdraw_unbonded(&mut self) -> Result<(), RuntimeError>;\n\n    #[ink(message, selector = 4)]\n    fn compound(&mut self) -> Result<u128, RuntimeError>;\n\n    #[ink(message, selector = 12)]\n    fn get_staked_value(&self) -> u128;\n\n    #[ink(message, selector = 13)]\n    fn get_unbonding_value(&self) -> u128;\n\n    #[ink(message)]\n    fn get_vault(&self) -> AccountId;\n\n    #[ink(message)]\n    fn get_admin(&self) -> AccountId;\n\n    #[ink(message)]\n    fn get_validator(&self) -> AccountId;\n\n    #[ink(message, selector = 101)]\n    fn destroy(&mut self) -> Result<(), RuntimeError>;\n\n    #[ink(message, selector = 102)]\n    fn admin_withdraw_bond(&mut self, to: AccountId) -> Result<u128, RuntimeError>;\n\n    #[ink(message, selector = 999)]\n    fn set_code(&mut self, code_hash: [u8; 32]) -> Result<(), RuntimeError>;\n}\n",
        "src/registry/Cargo.toml":"[package]\nname = \"registry\"\nversion = \"0.1.0\"\nauthors = [\"Brandon <brandon@watercoolerstudios.io>\", \"John <john@watercoolerstudios.io\"]\nedition = \"2021\"\n\n[dependencies]\nink = { version = \"=4.3.0\", default-features = false }\nscale = { package = \"parity-scale-codec\", version = \"3\", default-features = false, features = [\n    \"derive\",\n] }\nscale-info = { version = \"=2.11.2\", default-features = false, features = [\n    \"derive\",\n], optional = true }\nnomination_agent = { path = \"../nomination_agent\", default-features = false, features = [\n    \"ink-as-dependency\",\n] }\n\n[lib]\nname = \"registry\"\npath = \"lib.rs\"\n\n[features]\ndefault = [\"std\"]\nstd = [\"ink/std\", \"scale/std\", \"scale-info\", \"scale-info/std\", \"nomination_agent/std\"]\nink-as-dependency = []\n",
        "src/registry/errors.rs":"use ink::prelude::string::String;\n\n#[derive(Debug, PartialEq, Eq, scale::Encode, scale::Decode)]\n#[cfg_attr(feature = \"std\", derive(scale_info::TypeInfo))]\npub enum RegistryError {\n    InvalidInput,\n    TooManyAgents,\n    AgentNotFound,\n    AgentDisabled,\n    ActiveAgent,\n    InvalidPermissions,\n    InvalidRole,\n    NoChange,\n    /// An interaction with ink! environment has failed\n    // NOTE: We're representing the `ink::env::Error` as `String` b/c the\n    // type does not have Encode/Decode implemented.\n    InkEnvError(String),\n}",
        "src/registry/lib.rs":"#![cfg_attr(not(feature = \"std\"), no_std, no_main)]\n\npub mod errors;\npub mod traits;\n\n#[ink::contract]\npub mod registry {\n\n    use crate::errors::RegistryError;\n    use crate::traits::IRegistry;\n    use ink::{\n        contract_ref,\n        env::Error as InkEnvError,\n        prelude::{format, vec::Vec},\n        storage::Mapping,\n        ToAccountId,\n    };\n    use nomination_agent::{nomination_agent::NominationAgentRef, traits::INominationAgent};\n\n    impl From<InkEnvError> for RegistryError {\n        fn from(e: InkEnvError) -> Self {\n            RegistryError::InkEnvError(format!(\"{:?}\", e))\n        }\n    }\n\n    pub const MAX_AGENTS: usize = 50;\n\n    #[derive(Debug, PartialEq, Eq, Clone, scale::Encode, scale::Decode)]\n    #[cfg_attr(\n        feature = \"std\",\n        derive(scale_info::TypeInfo, ink::storage::traits::StorageLayout)\n    )]\n    pub struct Role {\n        admin: AccountId,\n        account: AccountId,\n    }\n\n    #[derive(Debug, PartialEq, Eq, Clone, scale::Encode, scale::Decode)]\n    #[cfg_attr(\n        feature = \"std\",\n        derive(scale_info::TypeInfo, ink::storage::traits::StorageLayout)\n    )]\n    pub enum RoleType {\n        // Permission to add new agents\n        AddAgent,\n        // Permission to update agent weights\n        UpdateAgents,\n        // Permission to disable active agents\n        DisableAgent,\n        // Permission to remove deprecated agents\n        RemoveAgent,\n        // Permission to set code hash aka \"upgrade\" logic\n        SetCodeHash,\n    }\n\n    #[derive(Debug, PartialEq, Eq, Clone, scale::Encode, scale::Decode)]\n    #[cfg_attr(\n        feature = \"std\",\n        derive(scale_info::TypeInfo, ink::storage::traits::StorageLayout)\n    )]\n    pub struct Agent {\n        pub address: AccountId,\n        pub weight: u128,\n        pub disabled: bool,\n    }\n\n    #[derive(Debug, PartialEq, Eq, Clone, scale::Encode, scale::Decode)]\n    #[cfg_attr(\n        feature = \"std\",\n        derive(scale_info::TypeInfo, ink::storage::traits::StorageLayout)\n    )]\n    pub struct WeightUpdate {\n        pub agent: AccountId,\n        pub weight: u128,\n        pub increase: bool,\n    }\n\n    #[ink(event)]\n    pub struct AgentAdded {\n        #[ink(topic)]\n        agent: AccountId,\n    }\n    #[ink(event)]\n    pub struct AgentUpdated {\n        #[ink(topic)]\n        agent: AccountId,\n        old_weight: u128,\n        new_weight: u128,\n    }\n    #[ink(event)]\n    pub struct AgentDisabled {\n        #[ink(topic)]\n        agent: AccountId,\n        old_weight: u128,\n    }\n    #[ink(event)]\n    pub struct AgentDeleted {\n        #[ink(topic)]\n        agent: AccountId,\n    }\n    #[ink(event)]\n    pub struct RoleAccountChanged {\n        role_type: RoleType,\n        new_account: AccountId,\n    }\n    #[ink(event)]\n    pub struct RoleAdminChanged {\n        role_type: RoleType,\n        new_account: AccountId,\n    }\n\n    #[ink(storage)]\n    pub struct Registry {\n        // List of all nomination agents including their deployment and relative weight\n        pub agents: Vec<Agent>,\n        // Sum of nomination agent relative weights\n        pub total_weight: u128,\n        // Permissions for adding agents, updating weights, and removing agents\n        pub roles: Mapping<RoleType, Role>,\n        // Used for instantiating agents\n        pub vault: AccountId,\n        pub nomination_agent_hash: Hash,\n        pub nomination_agent_counter: u128,\n    }\n\n    impl Registry {\n        #[ink(constructor)]\n        pub fn new(\n            role_add: AccountId,\n            role_update: AccountId,\n            role_disable: AccountId,\n            role_remove: AccountId,\n            role_set_code_hash: AccountId,\n            nomination_agent_hash: Hash,\n        ) -> Self {\n            let mut initial_roles = Mapping::default();\n            initial_roles.insert(\n                RoleType::AddAgent,\n                &Role {\n                    admin: role_add,\n                    account: role_add,\n                },\n            );\n            initial_roles.insert(\n                RoleType::UpdateAgents,\n                &Role {\n                    admin: role_update,\n                    account: role_update,\n                },\n            );\n            initial_roles.insert(\n                RoleType::DisableAgent,\n                &Role {\n                    admin: role_disable,\n                    account: role_disable,\n                },\n            );\n            initial_roles.insert(\n                RoleType::RemoveAgent,\n                &Role {\n                    admin: role_remove,\n                    account: role_remove,\n                },\n            );\n            initial_roles.insert(\n                RoleType::SetCodeHash,\n                &Role {\n                    admin: role_set_code_hash,\n                    account: role_set_code_hash,\n                },\n            );\n\n            Self {\n                agents: Vec::new(),\n                total_weight: 0,\n                roles: initial_roles,\n                vault: Self::env().caller(),\n                nomination_agent_hash,\n                nomination_agent_counter: 0,\n            }\n        }\n    }\n\n    impl IRegistry for Registry {\n        /// Add a new nomination agent\n        ///\n        /// Caller must have the AddAgent role.\n        /// Cannot add the same nomination agent twice.\n        #[ink(message, payable, selector = 1)]\n        fn add_agent(\n            &mut self,\n            admin: AccountId,\n            validator: AccountId,\n        ) -> Result<AccountId, RegistryError> {\n            let caller = Self::env().caller();\n            let nominator_bond = Self::env().transferred_value();\n\n            if caller != self.roles.get(RoleType::AddAgent).unwrap().account {\n                return Err(RegistryError::InvalidPermissions);\n            }\n\n            if self.agents.len() >= MAX_AGENTS {\n                return Err(RegistryError::TooManyAgents);\n            }\n\n            let nomination_agent_counter = self.nomination_agent_counter; // shadow\n\n            let agent_ref = NominationAgentRef::new(\n                self.vault,\n                admin,\n                validator,\n            )\n            .endowment(nominator_bond)\n            .code_hash(self.nomination_agent_hash)\n            .salt_bytes(nomination_agent_counter.to_le_bytes())\n            .instantiate();\n\n            let agent_address = NominationAgentRef::to_account_id(&agent_ref);\n\n            self.nomination_agent_counter = nomination_agent_counter + 1;\n\n            self.agents.push(Agent {\n                address: agent_address,\n                weight: 0,\n                disabled: false,\n            });\n\n            Self::env().emit_event(AgentAdded {\n                agent: agent_address,\n            });\n\n            Ok(agent_address)\n        }\n\n        /// Update weight of existing nomination agents\n        ///\n        /// Caller must have the UpdateAgents role.\n        /// Cannot update a disabled agent.\n        #[ink(message, selector = 2)]\n        fn update_agents(\n            &mut self,\n            weight_updates: Vec<WeightUpdate>,\n        ) -> Result<(), RegistryError> {\n            let caller = Self::env().caller();\n\n            if caller != self.roles.get(RoleType::UpdateAgents).unwrap().account {\n                return Err(RegistryError::InvalidPermissions);\n            }\n\n            for update in weight_updates.iter() {\n                if let Some(index) = self.agents.iter().position(|a| a.address == update.agent) {\n                    if self.agents[index].disabled {\n                        return Err(RegistryError::AgentDisabled);\n                    }\n\n                    let old_weight = self.agents[index].weight;\n                    let new_weight;\n\n                    if update.increase {\n                        new_weight = old_weight + update.weight;\n                        self.total_weight += update.weight;\n                    } else {\n                        if update.weight > old_weight {\n                            return Err(RegistryError::InvalidInput);\n                        }\n                        new_weight = old_weight - update.weight;\n                        self.total_weight -= update.weight;\n                    };\n\n                    self.agents[index].weight = new_weight;\n\n                    Self::env().emit_event(AgentUpdated {\n                        agent: update.agent,\n                        old_weight,\n                        new_weight,\n                    });\n                } else {\n                    return Err(RegistryError::AgentNotFound);\n                }\n            }\n\n            Ok(())\n        }\n\n        /// Begins the process of offboarding a nomination agent\n        /// Permanently removes weight allocation from a given agent.\n        /// This allows dynamic registry weights and offboarding to co-exist.\n        ///\n        /// Caller must have the DisableAgent role.\n        #[ink(message, selector = 5)]\n        fn disable_agent(&mut self, agent: AccountId) -> Result<(), RegistryError> {\n            let caller = Self::env().caller();\n\n            if caller != self.roles.get(RoleType::DisableAgent).unwrap().account {\n                return Err(RegistryError::InvalidPermissions);\n            }\n\n            if let Some(index) = self.agents.iter().position(|a| a.address == agent) {\n                if self.agents[index].disabled {\n                    return Err(RegistryError::NoChange);\n                }\n\n                let old_weight = self.agents[index].weight;\n                self.agents[index].weight = 0;\n                self.agents[index].disabled = true;\n                self.total_weight -= old_weight;\n\n                Self::env().emit_event(AgentDisabled { agent, old_weight });\n            } else {\n                return Err(RegistryError::AgentNotFound);\n            }\n\n            Ok(())\n        }\n\n        /// Removes a nomination agent\n        /// This is intended to remove fully deprecated agents to save gas during iteration.\n        ///\n        /// Caller must have the RemoveAgent role.\n        /// Agent must have no AZERO staked (excludes initial bond).\n        /// Agent must have no AZERO unbonding.\n        #[ink(message, selector = 3)]\n        fn remove_agent(&mut self, agent: AccountId) -> Result<(), RegistryError> {\n            let caller = Self::env().caller();\n\n            if caller != self.roles.get(RoleType::RemoveAgent).unwrap().account {\n                return Err(RegistryError::InvalidPermissions);\n            }\n\n            if let Some(index) = self.agents.iter().position(|a| a.address == agent) {\n                let mut agent_contract: contract_ref!(INominationAgent) = agent.into();\n                // Do not delete agents with AZERO staked\n                if agent_contract.get_staked_value() > 0 {\n                    return Err(RegistryError::ActiveAgent);\n                }\n                // Do not delete agents with AZERO unbonding\n                if agent_contract.get_unbonding_value() > 0 {\n                    return Err(RegistryError::ActiveAgent);\n                }\n                let weight = self.agents[index].weight;\n                if weight > 0 {\n                    self.total_weight -= weight;\n                }\n                self.agents.remove(index);\n                agent_contract\n                    .destroy()\n                    .expect(\"Agent begins the destruction process\");\n\n                Self::env().emit_event(AgentDeleted { agent });\n            } else {\n                return Err(RegistryError::AgentNotFound);\n            }\n            Ok(())\n        }\n\n        #[ink(message, selector = 4)]\n        fn get_agents(&self) -> (u128, Vec<Agent>) {\n            (self.total_weight, self.agents.clone())\n        }\n\n        /// ================================ Update Role Methods ================================\n\n        /// Transfers role to a new account\n        ///\n        /// Caller must be the admin for the role\n        #[ink(message)]\n        fn transfer_role(\n            &mut self,\n            role_type: RoleType,\n            new_account: AccountId,\n        ) -> Result<(), RegistryError> {\n            if let Some(mut role) = self.roles.get(role_type.clone()) {\n                if Self::env().caller() != role.admin {\n                    return Err(RegistryError::InvalidPermissions);\n                }\n                if role.account == new_account {\n                    return Err(RegistryError::NoChange);\n                }\n\n                // Update role account\n                role.account = new_account;\n                self.roles.insert(role_type.clone(), &role);\n\n                Self::env().emit_event(RoleAccountChanged {\n                    role_type,\n                    new_account,\n                });\n            } else {\n                return Err(RegistryError::InvalidRole);\n            }\n\n            Ok(())\n        }\n\n        /// Transfers administration of role to a new account\n        ///\n        /// Caller must be the admin for the role\n        #[ink(message)]\n        fn transfer_role_admin(\n            &mut self,\n            role_type: RoleType,\n            new_account: AccountId,\n        ) -> Result<(), RegistryError> {\n            if let Some(mut role) = self.roles.get(role_type.clone()) {\n                if Self::env().caller() != role.admin {\n                    return Err(RegistryError::InvalidPermissions);\n                }\n                if role.admin == new_account {\n                    return Err(RegistryError::NoChange);\n                }\n\n                // Update role admin\n                role.admin = new_account;\n                self.roles.insert(role_type.clone(), &role);\n\n                Self::env().emit_event(RoleAdminChanged {\n                    role_type,\n                    new_account,\n                });\n            } else {\n                return Err(RegistryError::InvalidRole);\n            }\n\n            Ok(())\n        }\n\n        /// ================================ Code Hash Methods ================================\n\n        /// \"Upgrade\" the Registry contract logic\n        ///\n        /// Caller must have the SetCodeHash role.\n        #[ink(message)]\n        fn set_code(&mut self, code_hash: [u8; 32]) -> Result<(), RegistryError> {\n            let caller = Self::env().caller();\n\n            if caller != self.roles.get(RoleType::SetCodeHash).unwrap().account {\n                return Err(RegistryError::InvalidPermissions);\n            }\n\n            ink::env::set_code_hash(&code_hash)?;\n\n            Ok(())\n        }\n\n        /// \"Upgrade\" the logic of all nomination agent contracts\n        ///\n        /// Caller must have the SetCodeHash role.\n        #[ink(message)]\n        fn set_agent_code(&mut self, nomination_agent_hash: [u8; 32]) -> Result<(), RegistryError> {\n            let caller = Self::env().caller();\n\n            if caller != self.roles.get(RoleType::SetCodeHash).unwrap().account {\n                return Err(RegistryError::InvalidPermissions);\n            }\n\n            for agent in self.agents.iter() {\n                let mut agent_contract: contract_ref!(INominationAgent) = agent.address.into();\n                agent_contract\n                    .set_code(nomination_agent_hash)\n                    .expect(\"Agent code hash is updated\");\n            }\n\n            self.nomination_agent_hash = Hash::from(nomination_agent_hash);\n\n            Ok(())\n        }\n\n        #[ink(message)]\n        fn get_max_agents(&self) -> u32 {\n            MAX_AGENTS as u32\n        }\n\n        /// ================================ View Only Role Methods ================================\n\n        #[ink(message)]\n        fn get_role(&self, role_type: RoleType) -> AccountId {\n            self.roles.get(role_type).unwrap().account\n        }\n\n        #[ink(message)]\n        fn get_role_admin(&self, role_type: RoleType) -> AccountId {\n            self.roles.get(role_type).unwrap().admin\n        }\n    }\n}\n",
        "src/registry/traits.rs":"use crate::errors::RegistryError;\nuse crate::registry::{Agent, RoleType, WeightUpdate};\nuse ink::{primitives::AccountId, prelude::vec::Vec};\n\n#[ink::trait_definition]\npub trait IRegistry {\n    #[ink(message, payable, selector = 1)]\n    fn add_agent(\n        &mut self,\n        admin: AccountId,\n        validator: AccountId,\n    ) -> Result<AccountId, RegistryError>;\n    #[ink(message, selector = 2)]\n    fn update_agents(&mut self, updates: Vec<WeightUpdate>) -> Result<(), RegistryError>;\n    #[ink(message, selector = 5)]\n    fn disable_agent(&mut self, agent: AccountId) -> Result<(), RegistryError>;\n    #[ink(message, selector = 3)]\n    fn remove_agent(&mut self, account: AccountId) -> Result<(), RegistryError>;\n    #[ink(message, selector = 4)]\n    fn get_agents(&self) -> (u128, Vec<Agent>);\n\n    #[ink(message)]\n    fn transfer_role(\n        &mut self,\n        role_type: RoleType,\n        new_account: AccountId,\n    ) -> Result<(), RegistryError>;\n\n    #[ink(message)]\n    fn transfer_role_admin(\n        &mut self,\n        role_type: RoleType,\n        new_account: AccountId,\n    ) -> Result<(), RegistryError>;\n\n    #[ink(message)]\n    fn set_code(&mut self, code_hash: [u8; 32]) -> Result<(), RegistryError>;\n\n    #[ink(message)]\n    fn set_agent_code(&mut self, nomination_agent_hash: [u8; 32]) -> Result<(), RegistryError>;\n\n    #[ink(message)]\n    fn get_role(&self, role_type: RoleType) -> AccountId;\n\n    #[ink(message)]\n    fn get_role_admin(&self, role_type: RoleType) -> AccountId;\n\n    #[ink(message)]\n    fn get_max_agents(&self) -> u32;\n}\n",
        "src/share_token/Cargo.toml":"[package]\nname = \"share_token\"\nversion = \"0.1.0\"\nauthors = [\"Brandon <brandon@watercoolerstudios.io>\", \"John <john@watercoolerstudios.io\"]\nedition = \"2021\"\n\n[dependencies]\nink = { version = \"=4.3.0\", default-features = false }\nscale = { package = \"parity-scale-codec\", version = \"3\", default-features = false, features = [\n    \"derive\",\n] }\nscale-info = { version = \"=2.11.2\", default-features = false, features = [\n    \"derive\",\n], optional = true }\npsp22 = { version = \"=0.2.1\", default-features = false }\n\n[lib]\nname = \"share_token\"\npath = \"lib.rs\"\n\n[features]\ndefault = [\"std\"]\nstd = [\"ink/std\", \"scale/std\", \"scale-info\", \"scale-info/std\", \"psp22/std\"]\nink-as-dependency = []\ncontract = []\n",
        "src/share_token/lib.rs":"#![cfg_attr(not(feature = \"std\"), no_std, no_main)]\nmod traits;\n\npub use traits::ShareToken;\npub use crate::token::TokenRef;\n\n#[ink::contract]\nmod token {\n\n    use ink::prelude::{string::String, vec::Vec};\n    use psp22::{PSP22Burnable, PSP22Data, PSP22Error, PSP22Event, PSP22Metadata, PSP22};\n    #[ink(storage)]\n    pub struct Token {\n        data: PSP22Data, // (1)\n        owner: AccountId,\n        name: Option<String>,\n        symbol: Option<String>,\n        decimals: u8,\n    }\n\n    impl Token {\n        #[ink(constructor)]\n        pub fn new(name: Option<String>, symbol: Option<String>) -> Self {\n            let caller = Self::env().caller();\n            Self {\n                owner: caller,\n                data: PSP22Data::new(0, caller),\n                name,\n                symbol,\n                decimals: 12_u8,\n            }\n        }\n        #[ink(message, selector = 7777)]\n        pub fn mint(&mut self, to: AccountId, value: u128) -> Result<(), PSP22Error> {\n            if Self::env().caller() != self.owner {\n                return Err(PSP22Error::Custom(String::from(\"Caller is not Owner\")));\n            }\n            let events = self.data.mint(to, value)?;\n            self.emit_events(events);\n            Ok(())\n        }\n        #[ink(message)]\n        pub fn get_owner(&self) -> AccountId {\n            self.owner\n        }\n        // A helper function translating a vector of PSP22Events into the proper\n        // ink event types (defined internally in this contract) and emitting them.\n        // (5)\n        fn emit_events(&self, events: Vec<PSP22Event>) {\n            for event in events {\n                match event {\n                    PSP22Event::Transfer { from, to, value } => {\n                        self.env().emit_event(Transfer { from, to, value })\n                    }\n                    PSP22Event::Approval {\n                        owner,\n                        spender,\n                        amount,\n                    } => self.env().emit_event(Approval {\n                        owner,\n                        spender,\n                        amount,\n                    }),\n                }\n            }\n        }\n    }\n\n    // (3)\n    #[ink(event)]\n    pub struct Approval {\n        #[ink(topic)]\n        owner: AccountId,\n        #[ink(topic)]\n        spender: AccountId,\n        amount: u128,\n    }\n\n    // (3)\n    #[ink(event)]\n    pub struct Transfer {\n        #[ink(topic)]\n        from: Option<AccountId>,\n        #[ink(topic)]\n        to: Option<AccountId>,\n        value: u128,\n    }\n    impl PSP22Burnable for Token {\n        #[ink(message)]\n        fn burn(&mut self, value: u128) -> Result<(), PSP22Error> {\n            if Self::env().caller() != self.owner {\n                return Err(PSP22Error::Custom(String::from(\"Caller is not Owner\")));\n            }\n            let events = self.data.burn(self.env().caller(), value)?;\n            self.emit_events(events);\n            Ok(())\n        }\n    }\n    // (4)\n    impl PSP22 for Token {\n        #[ink(message)]\n        fn total_supply(&self) -> u128 {\n            self.data.total_supply()\n        }\n\n        #[ink(message)]\n        fn balance_of(&self, owner: AccountId) -> u128 {\n            self.data.balance_of(owner)\n        }\n\n        #[ink(message)]\n        fn allowance(&self, owner: AccountId, spender: AccountId) -> u128 {\n            self.data.allowance(owner, spender)\n        }\n\n        #[ink(message)]\n        fn transfer(\n            &mut self,\n            to: AccountId,\n            value: u128,\n            _data: Vec<u8>,\n        ) -> Result<(), PSP22Error> {\n            let events = self.data.transfer(self.env().caller(), to, value)?;\n            self.emit_events(events);\n            Ok(())\n        }\n\n        #[ink(message)]\n        fn transfer_from(\n            &mut self,\n            from: AccountId,\n            to: AccountId,\n            value: u128,\n            _data: Vec<u8>,\n        ) -> Result<(), PSP22Error> {\n            let caller = self.env().caller();\n\n            if caller == self.owner {\n                let events = self.data.transfer(from, to, value)?;\n                self.emit_events(events);\n            } else {\n                let events = self.data.transfer_from(caller, from, to, value)?;\n                self.emit_events(events);\n            }\n            \n            Ok(())\n        }\n\n        #[ink(message)]\n        fn approve(&mut self, spender: AccountId, value: u128) -> Result<(), PSP22Error> {\n            let events = self.data.approve(self.env().caller(), spender, value)?;\n            self.emit_events(events);\n            Ok(())\n        }\n\n        #[ink(message)]\n        fn increase_allowance(\n            &mut self,\n            spender: AccountId,\n            delta_value: u128,\n        ) -> Result<(), PSP22Error> {\n            let events = self\n                .data\n                .increase_allowance(self.env().caller(), spender, delta_value)?;\n            self.emit_events(events);\n            Ok(())\n        }\n\n        #[ink(message)]\n        fn decrease_allowance(\n            &mut self,\n            spender: AccountId,\n            delta_value: u128,\n        ) -> Result<(), PSP22Error> {\n            let events = self\n                .data\n                .decrease_allowance(self.env().caller(), spender, delta_value)?;\n            self.emit_events(events);\n            Ok(())\n        }\n    }\n\n    // (6)\n    impl PSP22Metadata for Token {\n        #[ink(message)]\n        fn token_name(&self) -> Option<String> {\n            self.name.clone()\n        }\n        #[ink(message)]\n        fn token_symbol(&self) -> Option<String> {\n            self.symbol.clone()\n        }\n        #[ink(message)]\n        fn token_decimals(&self) -> u8 {\n            self.decimals\n        }\n    }\n\n    // (7)\n}\n",
        "src/share_token/traits.rs":"use ink::{primitives::AccountId};\nuse psp22::PSP22Error;\n\n#[ink::trait_definition]\npub trait ShareToken {\n    #[ink(message, selector = 7777)]\n    fn mint(&mut self, to: AccountId, value: u128) -> Result<(), PSP22Error>;\n}\n",
        "src/vault/Cargo.toml":"[package]\nname = \"vault\"\nversion = \"0.1.0\"\nauthors = [\"Brandon <brandon@watercoolerstudios.io>\", \"John <john@watercoolerstudios.io\"]\nedition = \"2021\"\n\n[dependencies]\nink = { version = \"=4.3.0\", default-features = false, features = [\"ink-debug\"] }\nscale = { package = \"parity-scale-codec\", version = \"3\", default-features = false, features = [\n    \"derive\",\n] }\nscale-info = { version = \"=2.11.2\", default-features = false, features = [\n    \"derive\",\n], optional = true }\npsp22 = { version = \"=0.2.1\", default-features = false }\nnum-bigint = { version = \"=0.4.5\", default-features = false }\nnum-traits = { version = \"=0.2.19\", default-features = false }\nregistry = { path = \"../registry\", default-features = false, features = [\n    \"ink-as-dependency\",\n] }\nshare_token = { path = \"../share_token\", default-features = false, features = [\n    \"ink-as-dependency\",\n] }\n\n[lib]\nname = \"vault\"\npath = \"lib.rs\"\n\n[features]\ndefault = [\"std\"]\nstd = [\n    \"ink/std\",\n    \"scale/std\",\n    \"scale-info\",\n    \"scale-info/std\",\n    \"psp22/std\",\n    \"num-bigint/std\",\n    \"num-traits/std\",\n    \"registry/std\",\n]\nink-as-dependency = []\n",
        "src/vault/data.rs":"use crate::errors::VaultError;\nuse crate::nomination_agent_utils::{\n    call_compound,\n    call_deposit,\n    call_unbond,\n    call_withdraw_unbonded,\n    query_staked_value,\n};\nuse ink::{\n    env::{\n        debug_println,\n        DefaultEnvironment,\n        Environment,\n    },\n    prelude::vec::Vec,\n    primitives::AccountId,\n    storage::Mapping,\n};\nuse num_bigint::BigUint;\nuse num_traits::cast::ToPrimitive;\nuse registry::{\n    registry::{Agent, RegistryRef},\n    traits::IRegistry,\n};\n\npub type Balance = <DefaultEnvironment as Environment>::Balance;\npub type Timestamp = u64;\n\npub const BIPS: u16 = 10000;\npub const DAY: u64 = 86400 * 1000;\npub const YEAR: u64 = DAY * 365_25 / 100; // https://docs.alephzero.org/aleph-zero/use/stake/staking-rewards\n\n#[derive(Debug, PartialEq, Eq, Clone, scale::Encode, scale::Decode)]\n#[cfg_attr(feature = \"std\", derive(scale_info::TypeInfo, ink::storage::traits::StorageLayout))]\npub struct UnlockRequest {\n    pub creation_time: Timestamp,\n    pub azero: u128,\n}\n\n#[ink::storage_item]\n#[derive(Debug)]\npub struct VaultData {\n    /// account that can adjust fees\n    pub role_adjust_fee: AccountId,\n    /// account that receives the fees from `withdraw_fees`\n    pub role_fee_to: AccountId,\n    /// account that can \"upgrade\" Vault logic via `set_code`\n    pub role_set_code: Option<AccountId>,\n\n    /// total AZERO staked excluding AZERO being unbonded\n    pub total_pooled: Balance,\n    /// total sA0 minted\n    pub total_shares_minted: u128,\n    /// rolling accumulator of inflation fees (sA0) that can be minted and claimed by owner\n    pub total_shares_virtual: u128,\n\n    /// record of each user's unlock requests indexed by user AccountId\n    pub user_unlock_requests: Mapping<AccountId, Vec<UnlockRequest>>,\n\n    /// time required to unbond staked funds\n    pub cooldown_period: u64,\n\n    /// last update time of claimable fees variable only modified by stake, redeem, withdraw_fees, and adjust_fee\n    pub last_fee_update: Timestamp,\n    /// annualized fee percentage expressed in basis points\n    pub fee_percentage: u16,\n\n    /// token contract used for representing protocol staked AZERO ownership\n    pub shares_contract: AccountId,\n    /// registry contract used for tracking agents and weights\n    pub registry_contract: RegistryRef,\n}\n\nimpl VaultData {\n    pub fn new(\n        admin: AccountId,\n        shares_contract_: AccountId,\n        registry_ref: RegistryRef,\n        current_time: Timestamp,\n        era: u64,\n    ) -> VaultData {\n        VaultData {\n            role_adjust_fee: admin,\n            role_fee_to: admin,\n            role_set_code: Some(admin),\n            total_pooled: 0,\n            total_shares_minted: 0,\n            total_shares_virtual: 0,\n            user_unlock_requests: Mapping::default(),\n            cooldown_period: era * 14,\n            last_fee_update: current_time,\n            fee_percentage: 2_00, // 2.00%\n            shares_contract: shares_contract_,\n            registry_contract: registry_ref,\n        }\n    }\n\n    /// Calculates differences between current staked amounts and optimal staked amounts\n    ///\n    /// # Returns\n    ///\n    /// `pos_diff` - Total positive difference; zero indicates no over-allocations\n    /// `neg_diff` - Total negative difference; zero indicates no under-allocations\n    /// `stakes` - Amount of AZERO staked in each agent\n    /// `imbalances` - Deltas between the staked value and optimal value in each agent\n    ///                Positive values indicate an over-allocation\n    ///                Negative values indicate an under-allocation\n    pub fn get_weight_imbalances(\n        &self,\n        agents: &Vec<Agent>,\n        total_weight: u128,\n        total_pooled: u128,\n    ) -> (u128, u128, Vec<u128>, Vec<i128>) {\n        let mut pos_diff = 0_u128;\n        let mut neg_diff = 0_u128;\n        let mut stakes = Vec::new();\n        let mut imbalances = Vec::new();\n\n        for a in agents.into_iter() {\n            let staked_amount_current = query_staked_value(a.address) as i128;\n            let staked_amount_optimal = if total_weight > 0 {\n                self.pro_rata(a.weight, total_pooled, total_weight) as i128\n            } else {\n                0\n            };\n            let diff = staked_amount_current - staked_amount_optimal;\n            if diff > 0 {\n                pos_diff += diff as u128;\n            } else if diff < 0 {\n                neg_diff += -diff as u128;\n            }\n            stakes.push(staked_amount_current as u128);\n            imbalances.push(diff);\n        }\n\n        (pos_diff, neg_diff, stakes, imbalances)\n    }\n\n    /// Deposits a given amount to nominator agents splitting deposits by nominator weights and stake imbalances\n    ///\n    /// Uses a weighting algorithm that prioritizes negatively imbalanced (under-allocated) agents.\n    /// Phase1: The amount is split among negatively imbalanced nodes according to their proportion of the total imbalance.\n    /// Phase2: If the deposit amount is more than the negative imbalance, the remainder is split according to nominator weight proportions.\n    pub fn delegate_bonding(&mut self, azero: Balance) -> Result<(), VaultError> {\n        let (total_weight, agents) = self.registry_contract.get_agents();\n\n        if total_weight == 0 {\n            return Err(VaultError::ZeroTotalWeight);\n        }\n\n        let new_total_pooled = self.total_pooled + azero;\n\n        let (_pos_diff, neg_diff, _stakes, imbalances) = self\n            .get_weight_imbalances(&agents, total_weight, new_total_pooled);\n\n        // Amount to distribute to under-allocated agents\n        let phase1 = if azero < neg_diff { azero } else { neg_diff };\n\n        // Remaining amount to distribute equitably to all agents\n        let phase2 = azero - phase1;\n\n        let n = agents.len();\n        let mut deposit_amounts: Vec<u128> = Vec::with_capacity(n);\n        let mut deposit_summation = 0;\n\n        for i in 0..n {\n            // Distribute to under-allocated agents\n            // Weighted by agent imbalance\n            let phase1_amount = if imbalances[i] < 0 {\n                self.pro_rata(phase1, -imbalances[i] as u128, neg_diff)\n            } else {\n                0\n            };\n\n            // Distribute remaining amount equitably to all agents\n            // Weighted by agent weight\n            let phase2_amount = if phase2 > 0 {\n                self.pro_rata(phase2, agents[i].weight, total_weight)\n            } else {\n                0\n            };\n\n            let deposit_amount = phase1_amount + phase2_amount;\n            deposit_amounts.push(deposit_amount);\n            deposit_summation += deposit_amount;\n        }\n\n        if deposit_summation == 0 {\n            return Err(VaultError::ZeroDepositing);\n        }\n\n        let dust = azero - deposit_summation;\n        debug_println!(\"Dust: {}\", dust);\n\n        // Allocate dust\n        // Prioritizes agents added earlier in the registry\n        // Fully allocates dust to the first agent which is receiving a deposit\n        if dust > 0 {\n            for i in 0..n {\n                if deposit_amounts[i] > 0 {\n                    debug_println!(\"Allocating {} dust to agent #{}\", dust, i);\n                    deposit_amounts[i] += dust;\n                    break;\n                }\n            }\n        }\n\n        // Deposit\n        for (i, a) in agents.iter().enumerate() {\n            let deposit_amount = deposit_amounts[i];\n            if deposit_amount > 0 {\n                debug_println!(\"Depositing {} into agent #{}\", deposit_amount, i);\n                if let Err(e) = call_deposit(a.address, deposit_amount) {\n                    return Err(VaultError::InternalError(e));\n                }\n            }\n        }\n\n        self.total_pooled = new_total_pooled;\n\n        Ok(())\n    }\n\n    /// Unlocks a given amount of staked AZERO\n    ///\n    /// Uses a weighting algorithm that prioritizes positively imbalanced (over-allocated) agents.\n    /// Phase1: The amount is split among positively imbalanced nodes according to their proportion of the total imbalance.\n    /// Phase2: If the unlock amount is more than the positive imbalance, the remainder is split according to nominator stake proportions.\n    pub fn delegate_unbonding(&mut self, azero: Balance) -> Result<(), VaultError> {\n        let (total_weight, agents) = self.registry_contract.get_agents();\n\n        let total_pooled_ = self.total_pooled; // shadow\n\n        let new_total_pooled = total_pooled_ - azero;\n\n        let (pos_diff, _neg_diff, stakes, imbalances) = self\n            .get_weight_imbalances(&agents, total_weight, new_total_pooled);\n\n        // Amount to withdraw from over-allocated agents\n        let phase1 = if azero < pos_diff { azero } else { pos_diff };\n\n        // Remaining amount to withdraw equitably from all agents\n        let phase2 = azero - phase1;\n\n        let total_staked_after_phase1 = total_pooled_ - phase1;\n\n        let n = agents.len();\n        let mut unbond_amounts: Vec<u128> = Vec::with_capacity(n);\n        let mut unbond_summation = 0;\n\n        for i in 0..n {\n            // Unbond from over-allocated agents\n            // Weighted by agent imbalance\n            let phase1_amount = if imbalances[i] > 0 {\n                self.pro_rata(phase1, imbalances[i] as u128, pos_diff)\n            } else {\n                0\n            };\n\n            // Unbond remaining amount equitably from all agents\n            // Weighted by agent remaining stake\n            let phase2_amount = if phase2 > 0 {\n                self.pro_rata(phase2, stakes[i] - phase1_amount, total_staked_after_phase1)\n            } else {\n                0\n            };\n\n            let unbond_amount = phase1_amount + phase2_amount;\n            unbond_amounts.push(unbond_amount);\n            unbond_summation += unbond_amount;\n        }\n\n        if unbond_summation == 0 {\n            return Err(VaultError::ZeroUnbonding);\n        }\n\n        let mut dust = azero - unbond_summation;\n        debug_println!(\"Dust: {}\", dust);\n\n        // Allocate dust\n        // Prioritizes agents added earlier in the registry\n        // Allocates dust to agents with surplus bonded AZERO\n        // Splits dust across agents when first agent surplus is not sufficient\n        if dust > 0 {\n            for i in 0..n {\n                if stakes[i] > unbond_amounts[i] {\n                    let surplus = stakes[i] - unbond_amounts[i];\n                    if dust > surplus {\n                        debug_println!(\"Allocating {} dust to agent #{}\", surplus, i);\n                        unbond_amounts[i] += surplus;\n                        dust -= surplus;\n                    } else {\n                        debug_println!(\"Allocating {} dust to agent #{}\", dust, i);\n                        unbond_amounts[i] += dust;\n                        break;\n                    }\n                }\n            }\n        }\n\n        // Unbond\n        for (i, a) in agents.iter().enumerate() {\n            let unbond_amount = unbond_amounts[i];\n            if unbond_amount > 0 {\n                debug_println!(\"Unbonding {} from agent #{}\", unbond_amount, i);\n                if let Err(e) = call_unbond(a.address, unbond_amount) {\n                    return Err(VaultError::InternalError(e));\n                }\n            }\n        }\n\n        self.total_pooled = new_total_pooled;\n\n        Ok(())\n    }\n\n    /// Claim unbonded AZERO from specific agents\n    ///\n    /// Specified agents must be currently known by the Registry\n    /// Specifying duplicate agents will waste gas\n    pub fn delegate_withdraw_unbonded(&self, agents: Vec<AccountId>) -> Result<(), VaultError> {\n        let (_total_weight, registry_agents) = self.registry_contract.get_agents();\n\n        for agent in agents.into_iter() {\n            // Ensure user-provided agent is known by the Registry\n            if !registry_agents.iter().any(|registry_agent| registry_agent.address == agent) {\n                return Err(VaultError::InvalidIndex);\n            }\n            if let Err(e) = call_withdraw_unbonded(agent) {\n                return Err(VaultError::InternalError(e));\n            }\n        }\n\n        Ok(())\n    }\n\n    /// Claim unbonded AZERO from all agents\n    pub fn delegate_withdraw_unbonded_all(&self) -> Result<(), VaultError> {\n        let (_total_weight, agents) = self.registry_contract.get_agents();\n\n        for a in agents.into_iter() {\n            if let Err(e) = call_withdraw_unbonded(a.address) {\n                return Err(VaultError::InternalError(e));\n            }\n        }\n\n        Ok(())\n    }\n\n    /// Reinvest AZERO across all agents without issuing new shares\n    /// Rewards must have already been paid via `PayoutStakers`\n    ///\n    /// # Returns\n    ///\n    /// `total_compounded` - Total AZERO compounded across all agents\n    pub fn delegate_compound(&mut self) -> Result<Balance, VaultError> {\n        let (_total_weight, agents) = self.registry_contract.get_agents();\n\n        let mut total_compounded = 0;\n\n        for (i, a) in agents.into_iter().enumerate() {\n            match call_compound(a.address) {\n                Ok(compound_amount) => {\n                    debug_println!(\"Compounded {} to agent #{}\", compound_amount, i);\n                    total_compounded += compound_amount;\n                },\n                Err(e) => return Err(VaultError::InternalError(e)),\n            }\n        }\n\n        if total_compounded == 0 {\n            return Err(VaultError::ZeroCompounding);\n        }\n\n        self.total_pooled += total_compounded;\n\n        Ok(total_compounded)\n    }\n\n    /// Calculates summation of fees from last update until now\n    /// Must be called before changing: `total_shares_minted`, `fee_percentage`\n    /// Must be called before calculating redemption ratio via: `get_shares_from_azero()` and `get_azero_from_shares()`\n    pub fn update_fees(&mut self, current_time: Timestamp) {\n        // Time since last update\n        let time = current_time - self.last_fee_update;\n\n        // Calculate fee accumulation since last update\n        if time > 0 {\n            let virtual_shares = self.pro_rata(\n                self.total_shares_minted + self.total_shares_virtual,\n                self.fee_percentage as u128,\n                BIPS as u128,\n            );\n            let time_weighted_virtual_shares = self.pro_rata(virtual_shares, time as u128, YEAR as u128);\n\n            self.total_shares_virtual += time_weighted_virtual_shares;\n            self.last_fee_update = current_time;\n        }\n    }\n\n    /// Returns the virtual shares that will exist at the given time\n    pub fn get_virtual_shares_at_time(&self, current_time: Timestamp) -> Balance {\n        // Time since last update\n        let time = current_time - self.last_fee_update;\n\n        if time > 0 {\n            // Calculate fee accumulation since last update\n            let virtual_shares = self.pro_rata(\n                self.total_shares_minted + self.total_shares_virtual,\n                self.fee_percentage as u128,\n                BIPS as u128,\n            );\n            let time_weighted_virtual_shares = self.pro_rata(virtual_shares, time as u128, YEAR as u128);\n            self.total_shares_virtual + time_weighted_virtual_shares\n        } else {\n            // No additional fee accumulation is required\n            self.total_shares_virtual\n        }\n    }\n\n    /// Performs the u128 operations: a * b / c\n    pub fn pro_rata(&self, a: u128, b: u128, c: u128) -> u128 {\n        let result = BigUint::from(a) * BigUint::from(b) / BigUint::from(c);\n        BigUint::to_u128(&result).unwrap()\n    }\n}\n",
        "src/vault/errors.rs":"use ink::{\n    prelude::string::String,\n};\nuse psp22::PSP22Error;\nuse crate::nomination_agent_utils::RuntimeError;\n\n#[derive(Debug, PartialEq, Eq, scale::Encode, scale::Decode)]\n#[cfg_attr(feature = \"std\", derive(scale_info::TypeInfo))]\npub enum VaultError {\n    InvalidPercent,\n    InvalidIndex,\n    InvalidUserUnlockRequest,\n    CooldownPeriod,\n    InvalidPermissions,\n    NoChange,\n    ZeroDepositing,\n    ZeroUnbonding,\n    ZeroTotalWeight,\n    ZeroCompounding,\n    MinimumStake,\n    /// An interaction with ink! environment has failed\n    // NOTE: We're representing the `ink::env::Error` as `String` b/c the\n    // type does not have Encode/Decode implemented.\n    InkEnvError(String),\n    InternalError(RuntimeError),\n    TokenError(PSP22Error),\n}\n",
        "src/vault/lib.rs":"#![cfg_attr(not(feature = \"std\"), no_std, no_main)]\nmod data;\npub mod errors;\nmod nomination_agent_utils;\npub mod traits;\n\n#[ink::contract]\nmod vault {\n    use crate::data::*;\n    use crate::errors::VaultError;\n    use crate::traits::*;\n\n    use ink::{\n        codegen::EmitEvent,\n        contract_ref,\n        env::Error as InkEnvError,\n        prelude::{format, string::String, vec::Vec},\n        reflect::ContractEventBase,\n        ToAccountId,\n    };\n    use psp22::{PSP22Burnable, PSP22};\n    use registry::{registry::RegistryRef, traits::IRegistry};\n    use share_token::{ShareToken, TokenRef};\n\n    /// Errors returned by the contract's methods.\n    impl From<InkEnvError> for VaultError {\n        fn from(e: InkEnvError) -> Self {\n            VaultError::InkEnvError(format!(\"{:?}\", e))\n        }\n    }\n\n    /// Alias for wrapper around all events in this contract generated by ink!.\n    type Event = <Vault as ContractEventBase>::Type;\n\n    #[ink(event)]\n    pub struct Staked {\n        #[ink(topic)]\n        staker: AccountId,\n        azero: Balance,\n        new_shares: u128,\n        virtual_shares: u128,\n    }\n    #[ink(event)]\n    pub struct Referral {\n        #[ink(topic)]\n        referral_id: AccountId,\n        staker: AccountId,\n        azero: Balance,\n    }\n    #[ink(event)]\n    pub struct Compounded {\n        caller: AccountId,\n        azero: Balance,\n        virtual_shares: u128,\n    }\n    #[ink(event)]\n    pub struct UnlockRequested {\n        #[ink(topic)]\n        staker: AccountId,\n        unlock_id: u128,\n        shares: u128,\n        azero: u128,\n        virtual_shares: u128,\n    }\n    #[ink(event)]\n    pub struct UnlockRedeemed {\n        #[ink(topic)]\n        staker: AccountId,\n        azero: u128,\n        unlock_id: u64,\n    }\n    #[ink(event)]\n    pub struct FeesWithdrawn {\n        shares: u128,\n    }\n    #[ink(event)]\n    pub struct FeesAdjusted {\n        new_fee: u16,\n        virtual_shares: u128,\n    }\n    #[ink(event)]\n    pub struct RoleAdjustFeeTransferred {\n        new_account: AccountId,\n    }\n    #[ink(event)]\n    pub struct RoleFeeToTransferred {\n        new_account: AccountId,\n    }\n    #[ink(event)]\n    pub struct RoleSetCodeTransferred {\n        new_account: AccountId,\n    }\n    #[ink(event)]\n    pub struct NewCodeHash {\n        code_hash: [u8; 32],\n    }\n    #[ink(event)]\n    pub struct SetCodeDisabled {}\n\n    #[ink(storage)]\n    pub struct Vault {\n        pub data: VaultData,\n    }\n\n    impl Vault {\n        #[ink(constructor)]\n        pub fn new(\n            share_token_hash: Hash,\n            registry_code_hash: Hash,\n            nomination_agent_hash: Hash,\n            era: u64,\n        ) -> Self {\n            let caller = Self::env().caller();\n            let now = Self::env().block_timestamp();\n\n            let registry_ref = RegistryRef::new(caller, caller, caller, caller, caller, nomination_agent_hash)\n                .endowment(0)\n                .code_hash(registry_code_hash)\n                .salt_bytes(now.to_le_bytes())\n                .instantiate();\n            let share_token_ref = TokenRef::new(Some(String::from(\"Ike Liquid Staked AZERO\")), Some(String::from(\"sA0\")))\n                .endowment(0)\n                .code_hash(share_token_hash)\n                .salt_bytes(now.to_le_bytes())\n                .instantiate();\n\n            Self {\n                data: VaultData::new(\n                    caller,\n                    TokenRef::to_account_id(&share_token_ref),\n                    registry_ref,\n                    now,\n                    era,\n                ),\n            }\n        }\n\n        fn emit_event<EE>(emitter: EE, event: Event)\n        where\n            EE: EmitEvent<Vault>,\n        {\n            emitter.emit_event(event);\n        }\n\n        fn transfer_shares_from(\n            &self,\n            from: &AccountId,\n            to: &AccountId,\n            amount: u128,\n        ) -> Result<(), VaultError> {\n            let mut token: contract_ref!(PSP22) = self.data.shares_contract.into();\n            if let Err(e) = token.transfer_from(*from, *to, amount, Vec::new()) {\n                return Err(VaultError::TokenError(e));\n            }\n            Ok(())\n        }\n\n        fn mint_shares(&mut self, amount: u128, to: AccountId) -> Result<(), VaultError> {\n            let mut token: contract_ref!(ShareToken) = self.data.shares_contract.into();\n            self.data.total_shares_minted += amount;\n            if let Err(e) = token.mint(to, amount) {\n                return Err(VaultError::TokenError(e));\n            }\n            Ok(())\n        }\n\n        fn burn_shares(&mut self, amount: u128) -> Result<(), VaultError> {\n            let mut token: contract_ref!(PSP22Burnable) = self.data.shares_contract.into();\n            self.data.total_shares_minted -= amount;\n            if let Err(e) = token.burn(amount) {\n                return Err(VaultError::TokenError(e));\n            }\n            Ok(())\n        }\n    }\n\n    impl RateProvider for Vault {\n        /// Calculate the value of sA0 shares in terms of AZERO with TARGET_DECIMALS precision\n        #[ink(message)]\n        fn get_rate(&mut self) -> u128 {\n            // Because both RATE_DECIMALS and sA0.decimals() are 12,\n            // no further adjustment is necessary\n            self.get_azero_from_shares(1e12 as u128)\n        }\n    }\n\n    impl IVault for Vault {\n        /// Allow users to convert AZERO into sA0\n        /// Mints the caller sA0 based on the redemption ratio\n        ///\n        /// Minimum AZERO amount is required to stake\n        /// AZERO must be transferred via transferred_value\n        #[ink(message, payable)]\n        fn stake(&mut self) -> Result<Balance, VaultError> {\n            let caller = Self::env().caller();\n            let azero = Self::env().transferred_value();\n\n            // Verify minimum AZERO is being staked\n            if azero < 1_000_000 {\n                return Err(VaultError::MinimumStake);\n            }\n\n            // Update fees before calculating redemption ratio and minting shares\n            self.data.update_fees(Self::env().block_timestamp());\n\n            let new_shares = self.get_shares_from_azero(azero);\n            self.mint_shares(new_shares, caller)?;\n\n            self.data.delegate_bonding(azero)?;\n\n            Self::emit_event(\n                Self::env(),\n                Event::Staked(Staked {\n                    staker: caller,\n                    azero,\n                    new_shares,\n                    virtual_shares: self.data.total_shares_virtual, // updated in update_fees()\n                }),\n            );\n\n            Ok(new_shares)\n        }\n\n        #[ink(message, payable)]\n        fn stake_with_referral(&mut self, referral_id: AccountId) -> Result<Balance, VaultError> {\n            let new_shares = self.stake()?;\n            Self::emit_event(\n                Self::env(),\n                Event::Referral(Referral {\n                    referral_id,\n                    staker: Self::env().caller(),\n                    azero: Self::env().transferred_value(),\n                }),\n            );\n            Ok(new_shares)\n        }\n\n        /// Allow user to begin the unlock process converting shares into AZERO\n        ///\n        /// Transfers `shares` to the vault contract\n        /// Calculates AZERO value of shares\n        /// Creates `UnlockRequest` for the user\n        /// Delegates unbonding of the associated AZERO\n        /// Burns the associated shares tokens\n        #[ink(message)]\n        fn request_unlock(&mut self, shares: u128) -> Result<(), VaultError> {\n            let caller = Self::env().caller();\n            let now = Self::env().block_timestamp();\n\n            self.transfer_shares_from(&caller, &Self::env().account_id(), shares)?;\n\n            // Update fees before calculating redemption ratio and burning shares\n            self.data.update_fees(now);\n\n            let azero = self.get_azero_from_shares(shares);\n\n            // Update user's unlock requests\n            let mut user_unlock_requests = self.data.user_unlock_requests.get(caller).unwrap_or_default();\n            user_unlock_requests.push(UnlockRequest {\n                creation_time: now,\n                azero,\n            });\n            self.data.user_unlock_requests.insert(caller, &user_unlock_requests);\n\n            // Allocate unlock quantity across nomination pools\n            self.data.delegate_unbonding(azero)?;\n\n            self.burn_shares(shares)?;\n\n            Self::emit_event(\n                Self::env(),\n                Event::UnlockRequested(UnlockRequested {\n                    staker: caller,\n                    unlock_id: (user_unlock_requests.len()-1) as u128,\n                    shares,\n                    azero,\n                    virtual_shares: self.data.total_shares_virtual, // updated in update_fees()\n                }),\n            );\n\n            Ok(())\n        }\n\n        /// Attempts to claim unbonded AZERO from specified agents\n        #[ink(message)]\n        fn delegate_withdraw_unbonded(&mut self, agents: Vec<AccountId>) -> Result<(), VaultError> {\n            self.data.delegate_withdraw_unbonded(agents)?;\n\n            Ok(())\n        }\n\n        /// Allows a user to withdraw staked AZERO\n        ///\n        /// Returns original deposit amount plus interest to depositor address\n        /// Queries the redeemable amount by user AccountId and Claim Vector index\n        /// Associated unlock request must have been completed\n        /// Deletes the user's unlock request\n        #[ink(message)]\n        fn redeem(&mut self, user: AccountId, unlock_id: u64) -> Result<(), VaultError> {\n            let now = Self::env().block_timestamp();\n\n            let mut user_unlock_requests = self.data.user_unlock_requests.get(user).unwrap_or_default();\n\n            // Ensure user specified a valid unlock request index\n            if unlock_id >= user_unlock_requests.len() as u64 {\n                return Err(VaultError::InvalidUserUnlockRequest);\n            }\n\n            let creation_time = user_unlock_requests[unlock_id as usize].creation_time;\n            let azero = user_unlock_requests[unlock_id as usize].azero;\n\n            // Ensure unbond has completed\n            if now < creation_time + self.data.cooldown_period {\n                return Err(VaultError::CooldownPeriod);\n            }\n\n            // Delete completed user unlock request\n            user_unlock_requests.remove(unlock_id as usize);\n            self.data.user_unlock_requests.insert(user, &user_unlock_requests);\n\n            // Send AZERO to user\n            Self::env().transfer(user, azero)?;\n\n            Self::emit_event(\n                Self::env(),\n                Event::UnlockRedeemed(UnlockRedeemed {\n                    staker: user,\n                    azero,\n                    unlock_id,\n                }),\n            );\n\n            Ok(())\n        }\n\n        /// Alternative method for a user to withdraw staked AZERO\n        ///\n        /// This should be called instead of `redeem()` when insufficient AZERO exists in the Vault and\n        /// validator(s) have unbonded AZERO which can be claimed\n        #[ink(message)]\n        fn redeem_with_withdraw(&mut self, user: AccountId, unlock_id: u64) -> Result<(), VaultError> {\n            // Claim all unbonded AZERO into Vault\n            self.data.delegate_withdraw_unbonded_all()?;\n\n            self.redeem(user, unlock_id)?;\n\n            Ok(())\n        }\n\n        /// Compound earned interest for all validators\n        ///\n        /// Can be called by anyone\n        #[ink(message)]\n        fn compound(&mut self) -> Result<Balance, VaultError> {\n            let caller = Self::env().caller();\n\n            // Delegate compounding to all agents\n            let compounded = self.data.delegate_compound()?;\n\n            Self::emit_event(\n                Self::env(),\n                Event::Compounded(Compounded {\n                    caller,\n                    azero: compounded,\n                    virtual_shares: self.get_current_virtual_shares(),\n                }),\n            );\n\n            Ok(compounded)\n        }\n\n        /// Claim fees by inflating sA0 supply\n        ///\n        /// Caller must have the fee to role (`role_fee_to`)\n        /// Mints virtual shares as sA0 to the caller\n        /// Effectively serves as a compounding for protocol fee\n        /// sets total_shares_virtual to 0\n        #[ink(message)]\n        fn withdraw_fees(&mut self) -> Result<(), VaultError> {\n            let caller = Self::env().caller();\n            let now = Self::env().block_timestamp();\n            let role_fee_to = self.data.role_fee_to; // shadow\n\n            if caller != role_fee_to {\n                return Err(VaultError::InvalidPermissions);\n            }\n\n            self.data.update_fees(now);\n\n            let shares = self.data.total_shares_virtual;\n            self.mint_shares(shares, role_fee_to)?;\n            self.data.total_shares_virtual = 0;\n\n            Self::emit_event(\n                Self::env(),\n                Event::FeesWithdrawn(FeesWithdrawn {\n                    shares,\n                }),\n            );\n\n            Ok(())\n        }\n\n        /// Upgrade the contract by the ink env set_code_hash function\n        ///\n        /// The set code role (`role_set_code`) must be set\n        /// Caller must have the set code role (`role_set_code`)\n        /// See ink documentation for details https://paritytech.github.io/ink/ink_env/fn.set_code_hash.html\n        #[ink(message)]\n        fn set_code(&mut self, code_hash: [u8; 32]) -> Result<(), VaultError> {\n            let caller = Self::env().caller();\n            let role_set_code = self.data.role_set_code; // shadow\n\n            if role_set_code.is_none() || caller != role_set_code.unwrap() {\n                return Err(VaultError::InvalidPermissions);\n            }\n\n            ink::env::set_code_hash(&code_hash)?;\n\n            Self::emit_event(\n                Self::env(),\n                Event::NewCodeHash(NewCodeHash {\n                    code_hash,\n                }),\n            );\n\n            Ok(())\n        }\n\n        /// Removes the ability to \"upgrade\" the contract via `self.set_code()`\n        ///\n        /// The set code role (`role_set_code`) must be set\n        /// Caller must have the set code role (`role_set_code`)\n        #[ink(message)]\n        fn disable_set_code(&mut self) -> Result<(), VaultError> {\n            let caller = Self::env().caller();\n            let role_set_code = self.data.role_set_code; // shadow\n\n            if role_set_code.is_none() {\n                return Err(VaultError::NoChange);\n            }\n            if caller != role_set_code.unwrap() {\n                return Err(VaultError::InvalidPermissions);\n            }\n\n            self.data.role_set_code = None;\n\n            Self::emit_event(\n                Self::env(),\n                Event::SetCodeDisabled(SetCodeDisabled {}),\n            );\n\n            Ok(())\n        }\n\n        /// Update the protocol fee\n        ///\n        /// Caller must have the adjust fee role (`role_adjust_fee`)\n        /// Updates the total_shares_virtual accumulator at the old fee level first\n        #[ink(message)]\n        fn adjust_fee(&mut self, new_fee: u16) -> Result<(), VaultError> {\n            let caller = Self::env().caller();\n            let now = Self::env().block_timestamp();\n\n            if caller != self.data.role_adjust_fee {\n                return Err(VaultError::InvalidPermissions);\n            }\n            if self.data.fee_percentage == new_fee {\n                return Err(VaultError::NoChange);\n            }\n            if new_fee >= BIPS {\n                return Err(VaultError::InvalidPercent);\n            }\n\n            self.data.update_fees(now);\n            self.data.fee_percentage = new_fee;\n\n            Self::emit_event(\n                Self::env(),\n                Event::FeesAdjusted(FeesAdjusted {\n                    new_fee,\n                    virtual_shares: self.data.total_shares_virtual, // updated in update_fees()\n                }),\n            );\n\n            Ok(())\n        }\n\n        #[ink(message)]\n        fn get_role_adjust_fee(&self) -> AccountId {\n            self.data.role_adjust_fee\n        }\n\n        /// Transfers adjust fee role to a new account\n        ///\n        /// Caller must have the adjust fee role (`role_adjust_fee`)\n        #[ink(message)]\n        fn transfer_role_adjust_fee(&mut self, new_account: AccountId) -> Result<(), VaultError> {\n            let caller = Self::env().caller();\n            let role_adjust_fee = self.data.role_adjust_fee; // shadow\n\n            if caller != role_adjust_fee {\n                return Err(VaultError::InvalidPermissions);\n            }\n            if role_adjust_fee == new_account {\n                return Err(VaultError::NoChange);\n            }\n\n            self.data.role_adjust_fee = new_account;\n\n            Self::emit_event(\n                Self::env(),\n                Event::RoleAdjustFeeTransferred(RoleAdjustFeeTransferred {\n                    new_account,\n                }),\n            );\n\n            Ok(())\n        }\n\n        #[ink(message)]\n        fn get_role_fee_to(&self) -> AccountId {\n            self.data.role_fee_to\n        }\n\n        /// Transfers fee to role to a new account\n        ///\n        /// Caller must have the fee to role (`role_fee_to`)\n        #[ink(message)]\n        fn transfer_role_fee_to(&mut self, new_account: AccountId) -> Result<(), VaultError> {\n            let caller = Self::env().caller();\n            let role_fee_to = self.data.role_fee_to; // shadow\n\n            if caller != role_fee_to {\n                return Err(VaultError::InvalidPermissions);\n            }\n            if role_fee_to == new_account {\n                return Err(VaultError::NoChange);\n            }\n\n            self.data.role_fee_to = new_account;\n\n            Self::emit_event(\n                Self::env(),\n                Event::RoleFeeToTransferred(RoleFeeToTransferred {\n                    new_account,\n                }),\n            );\n\n            Ok(())\n        }\n\n        #[ink(message)]\n        fn get_role_set_code(&self) -> Option<AccountId> {\n            self.data.role_set_code\n        }\n\n        /// Transfers set code role to a new account\n        ///\n        /// The set code role (`role_set_code`) must be set\n        /// Caller must have the set code role (`role_set_code`)\n        #[ink(message)]\n        fn transfer_role_set_code(&mut self, new_account: AccountId) -> Result<(), VaultError> {\n            let caller = Self::env().caller();\n            let role_set_code = self.data.role_set_code; // shadow\n\n            if role_set_code.is_none() || caller != role_set_code.unwrap() {\n                return Err(VaultError::InvalidPermissions);\n            }\n            if role_set_code.unwrap() == new_account {\n                return Err(VaultError::NoChange);\n            }\n\n            self.data.role_set_code = Some(new_account);\n\n            Self::emit_event(\n                Self::env(),\n                Event::RoleSetCodeTransferred(RoleSetCodeTransferred {\n                    new_account,\n                }),\n            );\n\n            Ok(())\n        }\n\n        /// Returns the total amount of bonded AZERO\n        #[ink(message)]\n        fn get_total_pooled(&self) -> Balance {\n            self.data.total_pooled\n        }\n\n        /// Shares effectively in circulation by the protocol including:\n        ///     1) sA0 that has already been minted\n        ///     2) sA0 that could be minted (virtual) representing accumulating protocol fees\n        #[ink(message)]\n        fn get_total_shares(&self) -> u128 {\n            self.data.total_shares_minted + self.get_current_virtual_shares()\n        }\n\n        /// Protocol fees (sA0) which can be minted and withdrawn at the current block timestamp\n        #[ink(message)]\n        fn get_current_virtual_shares(&self) -> u128 {\n            let now = Self::env().block_timestamp();\n            self.data.get_virtual_shares_at_time(now)\n        }\n\n        #[ink(message)]\n        fn get_fee_percentage(&self) -> u16 {\n            self.data.fee_percentage\n        }\n        \n        #[ink(message)]\n        fn get_share_token_contract(&self) -> AccountId {\n            self.data.shares_contract\n        }\n\n        #[ink(message)]\n        fn get_registry_contract(&self) -> AccountId {\n            RegistryRef::to_account_id(&self.data.registry_contract)\n        }\n\n        /// Calculate the value of AZERO in terms of sA0 shares\n        #[ink(message)]\n        fn get_shares_from_azero(&self, azero: Balance) -> u128 {\n            let total_pooled = self.data.total_pooled; // shadow\n            let total_shares = self.get_total_shares(); // shadow\n            if total_pooled == 0 || total_shares == 0 {\n                // This happens upon initial stake\n                // Also known as 1:1 redemption ratio\n                azero\n            } else {\n                self.data.pro_rata(azero, total_shares, total_pooled)\n            }\n        }\n\n        /// Calculate the value of sA0 shares in terms of AZERO\n        #[ink(message)]\n        fn get_azero_from_shares(&self, shares: u128) -> Balance {\n            let total_shares = self.get_total_shares();\n            if total_shares == 0 {\n                // This should never happen\n                0\n            } else {\n                self.data.pro_rata(shares, self.data.total_pooled, total_shares)\n            }\n        }\n\n        /// Returns the unlock requests for a given user\n        #[ink(message)]\n        fn get_unlock_requests(&self, user: AccountId) -> Vec<UnlockRequest> {\n            self.data.user_unlock_requests.get(user).unwrap_or_default()\n        }\n\n        #[ink(message)]\n        fn get_weight_imbalances(&self, total_pooled: u128) -> (u128, u128, Vec<u128>, Vec<i128>) {\n            let (total_weight, agents) = self.data.registry_contract.get_agents();\n            self.data.get_weight_imbalances(&agents, total_weight, total_pooled)\n        }\n    }\n}\n",
        "src/vault/nomination_agent_utils.rs":"use ink::{\n    env::{\n        call::{build_call, ExecutionInput, Selector},\n        DefaultEnvironment,\n        Environment,\n    },\n    primitives::AccountId,\n};\n\n// TODO: Import these from ../nomination_agent/errors.rs::RuntimeError\n#[derive(Debug, PartialEq, Eq, scale::Encode, scale::Decode)]\n#[cfg_attr(feature = \"std\", derive(scale_info::TypeInfo))]\npub enum RuntimeError {\n    CallRuntimeFailed,\n    Unauthorized,\n    Active,\n}\n\ntype Balance = <DefaultEnvironment as Environment>::Balance;\nconst DEPOSIT_SELECTOR: Selector = Selector::new([0, 0, 0, 1]);\nconst UNBOND_SELECTOR: Selector = Selector::new([0, 0, 0, 2]);\nconst WITHDRAW_SELECTOR: Selector = Selector::new([0, 0, 0, 3]);\nconst COMPOUND_SELECTOR: Selector = Selector::new( [0, 0, 0, 4]);\nconst QUERY_STAKED_VALUE_SELECTOR: Selector = Selector::new([0, 0, 0, 12]);\n\npub fn make_call(\n    nomination_agent_instance: AccountId,\n    selector: Selector,\n    transferred_value: u128,\n) -> Result<(), RuntimeError> {\n    build_call::<DefaultEnvironment>()\n        .call(nomination_agent_instance)\n        .exec_input(ExecutionInput::new(selector))\n        .transferred_value(transferred_value)\n        .returns::<Result<(), RuntimeError>>()\n        .invoke()\n}\npub fn call_deposit(\n    nomination_agent_instance: AccountId,\n    transferred_value: u128,\n) -> Result<(), RuntimeError> {\n    make_call(nomination_agent_instance, DEPOSIT_SELECTOR, transferred_value)\n}\n\npub fn call_unbond(nomination_agent_instance: AccountId, amount: u128) -> Result<(), RuntimeError> {\n    build_call::<DefaultEnvironment>()\n        .call(nomination_agent_instance)\n        .exec_input(ExecutionInput::new(UNBOND_SELECTOR).push_arg(amount))\n        .transferred_value(0)\n        .returns::<Result<(), RuntimeError>>()\n        .invoke()\n}\n\npub fn call_withdraw_unbonded(nomination_agent_instance: AccountId) -> Result<(), RuntimeError> {\n    make_call(nomination_agent_instance, WITHDRAW_SELECTOR, 0_u128)\n}\n\npub fn call_compound(nomination_agent_instance: AccountId) -> Result<Balance, RuntimeError> {\n    let call_result: Result<Balance, RuntimeError> = build_call::<DefaultEnvironment>()\n        .call(nomination_agent_instance)\n        .exec_input(ExecutionInput::new(COMPOUND_SELECTOR))\n        .transferred_value(0)\n        .returns::<Result<Balance, RuntimeError>>()\n        .invoke();\n    call_result\n}\n\npub fn query_staked_value(nomination_agent_instance: AccountId) -> Balance {\n    let call_result: Balance = build_call::<DefaultEnvironment>()\n        .call(nomination_agent_instance)\n        .exec_input(ExecutionInput::new(QUERY_STAKED_VALUE_SELECTOR))\n        .transferred_value(0)\n        .returns::<Balance>()\n        .invoke();\n    call_result\n}\n",
        "src/vault/traits.rs":"use crate::data::{Balance, UnlockRequest};\nuse crate::errors::VaultError;\nuse ink::{\n    primitives::AccountId,\n    prelude::vec::Vec,\n};\n\n#[ink::trait_definition]\npub trait RateProvider {\n    // Get \"rate\" of a particular token with respect to a given base token.\n    // For instance, in the context of liquid staking, the base token could be the native token of the chain and the rate,\n    // at a particular point of time would be the price of the yield bearing liquid staking token in terms of the base token.\n    // The rate is supposed to have precision of RATE_DECIMALS=12 decimal places. So if the rate is 1.5, it should be represented as 1.5 * 10^12.\n    // Note that the rate is expected to be a number relatively close to 1.0. More specifically, with the selected precision, the maximum\n    // supported rate is of the order of 10^8, but in practice one would expect (get_rate() / 10^12) \\in [0.001, 1000.0].\n    #[ink(message)]\n    fn get_rate(&mut self) -> u128;\n}\n\n#[ink::trait_definition]\npub trait IVault {\n    #[ink(message, payable)]\n    fn stake(&mut self) -> Result<u128, VaultError>;\n\n    #[ink(message, payable)]\n    fn stake_with_referral(&mut self, referral_id: AccountId) -> Result<u128, VaultError>;\n\n    #[ink(message)]\n    fn request_unlock(&mut self, shares: u128) -> Result<(), VaultError>;\n\n    #[ink(message)]\n    fn delegate_withdraw_unbonded(&mut self, agents: Vec<AccountId>) -> Result<(), VaultError>;\n\n    #[ink(message)]\n    fn redeem(&mut self, user: AccountId, unlock_id: u64) -> Result<(), VaultError>;\n\n    #[ink(message)]\n    fn redeem_with_withdraw(&mut self, user: AccountId, unlock_id: u64) -> Result<(), VaultError>;\n\n    #[ink(message)]\n    fn compound(&mut self) -> Result<Balance, VaultError>;\n\n    #[ink(message)]\n    fn withdraw_fees(&mut self) -> Result<(), VaultError>;\n\n    #[ink(message)]\n    fn set_code(&mut self, code_hash: [u8; 32]) -> Result<(), VaultError>;\n\n    #[ink(message)]\n    fn disable_set_code(&mut self) -> Result<(), VaultError>;\n\n    #[ink(message)]\n    fn adjust_fee(&mut self, new_fee: u16) -> Result<(), VaultError>;\n\n    #[ink(message)]\n    fn get_role_adjust_fee(&self) -> AccountId;\n\n    #[ink(message)]\n    fn transfer_role_adjust_fee(&mut self, new_account: AccountId) -> Result<(), VaultError>;\n\n    #[ink(message)]\n    fn get_role_fee_to(&self) -> AccountId;\n\n    #[ink(message)]\n    fn transfer_role_fee_to(&mut self, new_account: AccountId) -> Result<(), VaultError>;\n\n    #[ink(message)]\n    fn get_role_set_code(&self) -> Option<AccountId>;\n\n    #[ink(message)]\n    fn transfer_role_set_code(&mut self, new_account: AccountId) -> Result<(), VaultError>;\n\n    #[ink(message)]\n    fn get_total_pooled(&self) -> Balance;\n\n    #[ink(message)]\n    fn get_total_shares(&self) -> u128;\n\n    #[ink(message)]\n    fn get_current_virtual_shares(&self) -> u128;\n\n    #[ink(message)]\n    fn get_fee_percentage(&self) -> u16;\n\n    #[ink(message)]\n    fn get_share_token_contract(&self) -> AccountId;\n\n    #[ink(message)]\n    fn get_registry_contract(&self) -> AccountId;\n\n    #[ink(message)]\n    fn get_shares_from_azero(&self, azero: Balance) -> u128;\n\n    #[ink(message)]\n    fn get_azero_from_shares(&self, shares: u128) -> Balance;\n\n    #[ink(message)]\n    fn get_unlock_requests(&self, user: AccountId) -> Vec<UnlockRequest>;\n\n    #[ink(message)]\n    fn get_weight_imbalances(&self, total_pooled: u128) -> (u128, u128, Vec<u128>, Vec<i128>);\n}\n"
    },
    "manifest-path":"./Cargo.toml"
}
